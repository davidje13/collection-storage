import CollectionStorage from './CollectionStorage';
import WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';
import Encryption from './wrappers/encryption/Encryption';
import { encryptByKey, encryptByRecord, encryptByRecordWithMasterKey, Encrypted } from './wrappers/encrypted';
import DB from './interfaces/DB';
import Collection from './interfaces/Collection';
import IDable from './interfaces/IDable';
export declare type DB = DB;
export declare type Collection<T extends IDable> = Collection<T>;
export declare type Wrapped<T extends IDable, WF extends keyof T, W> = Wrapped<T, WF, W>;
export declare type Encrypted<T extends IDable, WF extends keyof T> = Encrypted<T, WF>;
export declare type Encryption<EncT, KeyT> = Encryption<EncT, KeyT>;
export { default as MemoryDb } from './memory/MemoryDb';
export { default as MongoDb } from './mongo/MongoDb';
export { default as LruCache } from './helpers/LruCache';
export { WrappedCollection, encryptByKey, encryptByRecord, encryptByRecordWithMasterKey, };
export { default as nodeEncryptionSync, } from './wrappers/encryption/nodeEncryptionSync';
export default CollectionStorage;
