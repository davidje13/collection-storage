{"version":3,"sources":["webpack://collection-storage/webpack/universalModuleDefinition","webpack://collection-storage/webpack/bootstrap","webpack://collection-storage/./src/interfaces/BaseCollection.ts","webpack://collection-storage/external \"crypto\"","webpack://collection-storage/./src/helpers/retry.ts","webpack://collection-storage/external \"mongodb\"","webpack://collection-storage/external \"zlib\"","webpack://collection-storage/external \"util\"","webpack://collection-storage/external \"url\"","webpack://collection-storage/./src/mongo/MongoCollection.ts","webpack://collection-storage/external \"ioredis\"","webpack://collection-storage/external \"pg\"","webpack://collection-storage/./src/helpers/serialiser.ts","webpack://collection-storage/./src/memory/MemoryCollection.ts","webpack://collection-storage/./src/interfaces/BaseDB.ts","webpack://collection-storage/./src/memory/MemoryDb.ts","webpack://collection-storage/./src/mongo/MongoDb.ts","webpack://collection-storage/./src/redis/helpers.ts","webpack://collection-storage/./src/redis/RedisCollection.ts","webpack://collection-storage/./src/redis/scripts.ts","webpack://collection-storage/./src/redis/RedisConnectionPool.ts","webpack://collection-storage/./src/redis/RedisDb.ts","webpack://collection-storage/./src/postgresql/hstore.ts","webpack://collection-storage/./src/postgresql/sql.ts","webpack://collection-storage/./src/postgresql/PostgresCollection.ts","webpack://collection-storage/./src/postgresql/PostgresDb.ts","webpack://collection-storage/./src/wrappers/WrappedCollection.ts","webpack://collection-storage/./src/helpers/LruCache.ts","webpack://collection-storage/./src/wrappers/encryption/nodeEncryptionSync.ts","webpack://collection-storage/./src/wrappers/encrypted.ts","webpack://collection-storage/./src/wrappers/compressed.ts","webpack://collection-storage/./src/wrappers/migrated.ts","webpack://collection-storage/./src/index.ts","webpack://collection-storage/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseCollection","constructor","keys","this","innerPreAct","preAct","entry","internalAdd","searchAttribute","searchValue","returnAttributes","isIndexed","Error","internalGet","internalGetAll","update","options","undefined","id","upsert","withoutId","internalUpsert","isIndexUnique","some","k","internalUpdate","internalRemove","wait","pending","addPending","Promise","resolve","reject","push","internalReady","async","e","forEach","f","attribute","keyOptions","Boolean","unique","require","sleep","millis","setTimeout","shouldRetry","maxAttempts","baseDelayMillis","attemptDelayMillis","randomDelayMillis","attempt","fn","message","Math","random","DOT_REG","fieldNameToMongo","encodeURIComponent","replace","withUpsertRetry","retry","includes","convertToMongo","converted","v","Buffer","MBinary","_bsontype","convertFromMongo","buffer","decodeURIComponent","makeMongoProjection","names","projection","fieldName","MongoCollection","collection","stateRef","closed","super","initAsync","all","map","keyName","mongoKey","createIndex","insertOne","updateOne","$set","query","mongoUpdate","updateMany","findOne","cursor","find","result","raw","deleteMany","deletedCount","MARK_BINARY","charCodeAt","MARK_STRING","MARK_BINARY_BUFF","Uint8Array","of","serialiseValue","toString","JSON","stringify","deserialiseValue","type","data","substr","from","parse","serialiseValueBin","concat","deserialiseValueBin","subarray","serialiseRecord","record","deserialiseRecord","MemoryCollection","simulatedLatency","Map","indices","serialised","internalCheckDuplicates","set","internalPopulateIndices","has","updates","internalGetSerialisedIds","sId","oldSerialised","oldValue","newValue","newSerialised","internalRemoveIndices","sIds","fields","field","applyFilter","delete","length","sKey","index","serialisedValue","checkId","Set","add","size","BaseDB","makeCollection","getCollection","cached","collectionCache","normKeys","sort","join","cachedNormKeys","cachedCol","created","closeReadiness","close","syncClose","toAwait","slice","allSettled","then","internalClose","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","MongoDb","client","escapeName","MongoClient","default","connect","useNewUrlParser","useUnifiedTopology","getDb","minifyLuaScript","lines","argNames","combined","ln","trim","RegExp","notUndefined","item","makeIndexKeys","partialSerialisedValue","filter","prefix","parseItem","itemHasContent","values","unwatchAll","unwatch","mapAwaitSync","RedisCollection","pool","keyPrefix","keyPrefixes","keyInfo","uniqueKeys","nonUniqueKeys","withConnection","runAdd","patchSerialised","retryWithConnection","patch","getUpdatePatch","runUpdates","insertValue","getAndWatchBySerialisedKey","patches","getByKeysKeepWatches","makeKey","cut","indexedKeys","items","rawByKeyKeepWatches","pipeline","multi","remove","exec","serialisedId","checkWatch","keyCount","entries","flat","watch","argsList","makeUpdateArgs","results","updateArgs","checkUpdate","chain","updateWithoutCheck","diff","patchUniqueKeys","patchNonUniqueKeys","oldUniqueKeys","oldNonUniqueKeys","serialisedIds","commands","multiExec","exists","hmget","hgetall","parsed","keyAddress","smembers","SCRIPT_ADD","FRAG_CHECK_UPDATE","FRAG_UPDATE","SCRIPT_CHECK_UPDATE","SCRIPT_UPDATE_WITHOUT_CHECK","SCRIPT_UPDATE","SCRIPT_REMOVE","withRetry","RedisConnectionPool","RedisStatic","maxConnections","teardown","getConnection","returnConnection","inUse","doClose","closingFn","connections","disconnect","pop","defineCommand","lua","defineAllScripts","queue","q","shift","RedisDb","lazyConnect","getConnectionPool","quoteHValue","DQUOTE_REG","SQUOTE_REG","quoteValue","msg","ID_REG","withIdentifiers","base","identifiers","STATEMENTS","CREATE_TABLE","CREATE_INDEX","CREATE_UNIQUE_INDEX","DROP_INDEX","INSERT","UPDATE","UPDATE_ID","UPSERT_ID","SELECT_ONE","SELECT_ALL","SELECT_ALL_BY","SELECT_ID","DELETE","DELETE_ID","toHStore","encodeHStore","fromHStore","rawMap","hstore","current","currentKey","quote","decodeHStore","PostgresCollection","tableName","T","keyEntries","I","release","configureTable","rest","runTableQuery","rowCount","rows","queryName","cachedQueries","rowMode","text","PostgresDb","Pool","connectionString","end","hasAnyField","WrappedCollection","baseCollection","wrapper","wrapAll","unwrapAll","getAll","extra","preRemove","processed","preWrap","allFields","wrap","preUnwrap","unwrap","LruCache","capacity","calc","storage","flush","next","ALG","ALG_BUF","nodeEncryptionSync","encrypt","iv","crypto","randomBytes","cipher","createCipheriv","part","final","decrypt","equals","encrypted","decipher","createDecipheriv","generateKey","createSecretKey","serialiseKey","export","deserialiseKey","makeEncrypter","encryptByKey","encryption","allowRaw","encryptByRecord","keyCollection","cacheSize","cache","loadKey","generateIfNeeded","cachedAsync","removeKey","encryptByRecordWithMasterKey","sMasterKey","opts","keyEnc","gzipCompress","promisify","zlib","gzip","gzipDecompress","gunzip","MARK_UNCOMPRESSED","compress","compressionThresholdBytes","gzipped","compressValue","allowRawBuffer","decompressValue","MigratedCollection","migrations","extraFetchFields","extendAttributes","applyMigration","attr","migration","migrate","CollectionStorage","dbClass","startsWith"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"collection-storage\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"collection-storage\"] = factory();\n\telse\n\t\troot[\"collection-storage\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","import type { Collection, UpdateOptions } from './Collection';\nimport type { IDable } from './IDable';\nimport type { DBKeys } from './DB';\n\nexport default abstract class BaseCollection<T extends IDable> implements Collection<T> {\n  // actually read publicly by BaseDB but we don't want this to be a user-accessible property\n  protected internalReady?: () => Promise<void>;\n\n  private innerPreAct: () => Promise<void> | void;\n\n  protected constructor(\n    protected readonly keys: DBKeys<T>,\n  ) {\n    this.innerPreAct = this.preAct.bind(this);\n  }\n\n  public async add(entry: T): Promise<void> {\n    await this.innerPreAct();\n    return this.internalAdd(entry);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.innerPreAct();\n    return this.internalGet(searchAttribute, searchValue, returnAttributes);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (searchAttribute && !this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.innerPreAct();\n    return this.internalGetAll(searchAttribute, searchValue, returnAttributes);\n  }\n\n  public async update<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options: UpdateOptions = {},\n  ): Promise<void> {\n    if (searchAttribute === 'id' && update.id !== undefined && update.id !== searchValue) {\n      throw new Error('Cannot update ID');\n    }\n    if (options.upsert) {\n      if (searchAttribute !== 'id') {\n        throw new Error(`Can only upsert by ID, not ${searchAttribute}`);\n      }\n      let withoutId = update;\n      if (Object.prototype.hasOwnProperty.call(update, 'id')) {\n        withoutId = { ...update };\n        delete withoutId.id;\n      }\n      await this.innerPreAct();\n      return this.internalUpsert(searchValue as T['id'], withoutId, options);\n    }\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    if (\n      !this.isIndexUnique(searchAttribute) &&\n      Object.keys(update).some((k) => this.isIndexUnique(k))\n    ) {\n      throw new Error('duplicate');\n    }\n\n    await this.innerPreAct();\n    return this.internalUpdate(searchAttribute, searchValue, update, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.innerPreAct();\n    return this.internalRemove(searchAttribute, searchValue);\n  }\n\n  // Subclass constructors can call this with a promise that will resolve when\n  // they are ready to be used. BaseCollection will automatically ensure that\n  // other interactions are queued until this promise resolves.\n  // (this call will always succeed; you can safely ignore the promise returned)\n  protected async initAsync(wait: Promise<unknown>): Promise<void> {\n    const pending: [() => void, (e: Error) => void][] = [];\n    const addPending = (): Promise<void> => new Promise((resolve, reject) => {\n      pending.push([resolve, reject]);\n    });\n    this.internalReady = addPending;\n    this.innerPreAct = async (): Promise<void> => {\n      await addPending();\n      return this.preAct();\n    };\n    try {\n      await wait;\n    } catch (e) {\n      this.internalReady = (): Promise<void> => Promise.reject(e);\n      this.innerPreAct = (): void => { throw e; };\n      pending.forEach((f) => f[1](e));\n      return;\n    }\n    this.internalReady = undefined;\n    this.innerPreAct = this.preAct.bind(this);\n    pending.forEach((f) => f[0]());\n  }\n\n  protected isIndexed(attribute: string): boolean {\n    return (\n      attribute === 'id' ||\n      this.keys[attribute as keyof DBKeys<T>] !== undefined\n    );\n  }\n\n  protected isIndexUnique(attribute: string): boolean {\n    const keyOptions = this.keys[attribute as keyof DBKeys<T>];\n    return (\n      attribute === 'id' ||\n      Boolean(keyOptions && keyOptions.unique)\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  protected preAct(): Promise<void> | void {}\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.internalGetAll(searchAttribute, searchValue, returnAttributes);\n    return all[0] ?? null;\n  }\n\n  protected internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n    options: UpdateOptions,\n  ): Promise<void> {\n    return this.internalUpdate('id', id, update, options);\n  }\n\n  protected abstract internalAdd(entry: T): Promise<void>;\n\n  protected abstract internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]>;\n\n  protected abstract internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options: UpdateOptions,\n  ): Promise<void>;\n\n  protected abstract internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number>;\n}\n","module.exports = require(\"crypto\");","function sleep(millis: number): Promise<void> | null {\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nexport default (\n  shouldRetry: (e: any) => boolean,\n  maxAttempts = 5,\n  baseDelayMillis = 20,\n  attemptDelayMillis = 200,\n  randomDelayMillis = 200,\n) => async <T>(fn: () => Promise<T> | T): Promise<T> => {\n  for (let attempt = 1; ; attempt += 1) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      return await fn();\n    } catch (e) {\n      if (!shouldRetry(e)) {\n        throw e;\n      }\n      if (attempt >= maxAttempts) {\n        e.message += ` (attempted ${attempt} times)`;\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(\n      baseDelayMillis +\n      attempt * attemptDelayMillis +\n      Math.random() * randomDelayMillis,\n    );\n  }\n};\n","module.exports = require(\"mongodb\");","module.exports = require(\"zlib\");","module.exports = require(\"util\");","module.exports = require(\"url\");","import {\n  Collection as MCollection,\n  Binary as MBinary,\n} from 'mongodb';\nimport type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport type { StateRef } from '../interfaces/BaseDB';\nimport retry from '../helpers/retry';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\nconst DOT_REG = /\\./g;\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return encodeURIComponent(name).replace(DOT_REG, '%2E');\n}\n\nfunction fieldNameFromMongo(name: string): string {\n  if (name === MONGO_ID) {\n    return ID;\n  }\n  return decodeURIComponent(name);\n}\n\nconst withUpsertRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message.includes('E11000')\n));\n\nfunction convertToMongo<T extends Partial<IDable>>(\n  value: T,\n): Record<string, unknown> {\n  const converted: Record<string, unknown> = {};\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    if (v instanceof Buffer) {\n      v = new MBinary(v);\n      // eslint-disable-next-line no-underscore-dangle\n    } else if (typeof v === 'object' && v._bsontype) {\n      throw new Error('Must use Buffer to provide binary data');\n    }\n    converted[fieldNameToMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: Record<string, unknown> | null,\n): T | null {\n  if (!value) {\n    return null;\n  }\n  const converted: T = {} as any;\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype === 'Binary') {\n      v = v.buffer;\n    }\n    (converted as any)[fieldNameFromMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction makeMongoProjection(\n  names?: readonly string[],\n): Record<string, boolean> {\n  const projection: Record<string, boolean> = {};\n  if (names) {\n    projection[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      projection[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return projection;\n}\n\nexport default class MongoCollection<T extends IDable> extends BaseCollection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    keys: DBKeys<T> = {},\n    private readonly stateRef: StateRef = { closed: false },\n  ) {\n    super(keys);\n    this.initAsync(Promise.all(Object.keys(keys).map((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      const mongoKey = fieldNameToMongo(keyName);\n      if (options?.unique) {\n        return collection.createIndex({ [mongoKey]: 1 }, { unique: true });\n      }\n      return collection.createIndex({ [mongoKey]: 'hashed' });\n    })));\n  }\n\n  protected preAct(): void {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n  }\n\n  protected async internalAdd(value: T): Promise<void> {\n    await this.collection.insertOne(convertToMongo(value));\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    await withUpsertRetry(() => this.collection.updateOne(\n      convertToMongo({ id }),\n      { $set: convertToMongo(update) },\n      { upsert: true },\n    ));\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n  ): Promise<void> {\n    const query = convertToMongo({ [searchAttribute]: searchValue });\n    const mongoUpdate = { $set: convertToMongo(update) };\n    if (this.isIndexUnique(searchAttribute)) {\n      await this.collection.updateOne(query, mongoUpdate);\n    } else {\n      await this.collection.updateMany(query, mongoUpdate);\n    }\n  }\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.collection.findOne(\n      convertToMongo({ [searchAttribute]: searchValue }),\n      { projection: makeMongoProjection(returnAttributes) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const cursor = this.collection.find(\n      searchAttribute ? convertToMongo({ [searchAttribute]: searchValue }) : {},\n      { projection: makeMongoProjection(returnAttributes) },\n    );\n\n    const result: Pick<T, F[-1]>[] = [];\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const result = await this.collection.deleteMany(\n      convertToMongo({ [searchAttribute]: searchValue }),\n    );\n    return result.deletedCount || 0;\n  }\n}\n","module.exports = require(\"ioredis\");","module.exports = require(\"pg\");","// B = base64 binary\n// b = raw binary (*Bin functions only)\n// s = raw utf8 string\n// t = true\n// f = false\n// n = null\n// J = JSON (also accepts any plain JSON value for compatibility)\n\nconst JSON_INIT_CHARS = '{[\"0123456789-'; // t/f/n are dedicated values\nconst MARK_BINARY = 'b'.charCodeAt(0);\nconst MARK_STRING = 's'.charCodeAt(0);\n\nconst MARK_BINARY_BUFF = Uint8Array.of(MARK_BINARY);\n\nexport function canonicalJSON(o: Record<string, unknown> | undefined): string {\n  if (!o) {\n    return 'null';\n  }\n  // string comparison is intended\n  /* eslint-disable-next-line @typescript-eslint/require-array-sort-compare */\n  const content = Object.keys(o)\n    .sort()\n    .map((k) => `${JSON.stringify(k)}:${JSON.stringify(o[k])}`)\n    .join(',');\n  return `{${content}}`;\n}\n\nexport function serialiseValue(value: unknown): string {\n  if (value instanceof Buffer) {\n    return `B${value.toString('base64')}`;\n  }\n  if (typeof value === 'string') {\n    return `s${value}`;\n  }\n  if (typeof value === 'boolean') {\n    return value ? 't' : 'f';\n  }\n  if (value === null) {\n    return 'n';\n  }\n  return `J${JSON.stringify(value)}`;\n}\n\nexport function deserialiseValue(value: string): unknown {\n  const type = value[0];\n  const data = value.substr(1);\n  switch (type) {\n    case 'B': return Buffer.from(data, 'base64');\n    case 's': return data;\n    case 't': return true;\n    case 'f': return false;\n    case 'n': return null;\n    case 'J': return JSON.parse(data);\n    default:\n      if (JSON_INIT_CHARS.includes(type)) {\n        return JSON.parse(value);\n      }\n      throw new Error(`Unknown data type ${type}`);\n  }\n}\n\nexport function serialiseValueBin(value: unknown): Buffer {\n  if (value instanceof Buffer) {\n    return Buffer.concat([MARK_BINARY_BUFF, value]);\n  }\n  return Buffer.from(serialiseValue(value), 'utf8');\n}\n\nexport function deserialiseValueBin(value: Buffer | string): unknown {\n  if (typeof value === 'string') {\n    return deserialiseValue(value);\n  }\n\n  const type = value[0];\n  if (type === MARK_BINARY) {\n    return value.subarray(1);\n  }\n  if (type === MARK_STRING) {\n    return value.subarray(1).toString('utf8');\n  }\n  return deserialiseValue(value.toString('utf8'));\n}\n\nexport function serialiseRecord<T>(\n  record: T,\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  Object.keys(record).forEach((k) => {\n    result[k] = serialiseValue((record as any)[k]);\n  });\n  return result;\n}\n\nexport function deserialiseRecord(\n  record: Record<string, string | null>,\n): Record<string, unknown> {\n  const result: Record<string, any> = {};\n  Object.keys(record).forEach((k) => {\n    const v = record[k];\n    if (v) {\n      result[k] = deserialiseValue(v);\n    }\n  });\n  return result;\n}\n","import type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport type { StateRef } from '../interfaces/BaseDB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\n\nfunction sleep(millis: number): Promise<void> | void {\n  if (!millis) {\n    return undefined;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\nexport default class MemoryCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly data: Map<string, Record<string, string>>;\n\n  private readonly indices: Partial<Record<keyof T, Map<string, Set<string>>>> = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n    private readonly stateRef: StateRef = { closed: false },\n  ) {\n    super(keys);\n\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      this.indices[k as keyof T] = new Map();\n    });\n  }\n\n  protected preAct(): Promise<void> | void {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    return sleep(this.simulatedLatency);\n  }\n\n  protected async internalAdd(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    this.internalCheckDuplicates(serialised, true);\n    this.data.set(serialised.id, serialised);\n    this.internalPopulateIndices(serialised);\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    if (this.data.has(serialiseValue(id))) {\n      await this.internalUpdate('id', id, update);\n    } else {\n      await this.internalAdd({ id, ...update } as T);\n    }\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n  ): Promise<void> {\n    const sIds = this.internalGetSerialisedIds(searchAttribute, searchValue);\n\n    const updates = sIds.map((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      const oldValue = deserialiseRecord(oldSerialised) as T;\n      const newValue = { ...oldValue, ...update };\n      if (newValue.id !== oldValue.id) {\n        throw new Error('Cannot update ID');\n      }\n      const newSerialised = serialiseRecord(newValue);\n      return { oldSerialised, newSerialised };\n    });\n\n    updates.forEach(({ oldSerialised }) => this.internalRemoveIndices(oldSerialised));\n    try {\n      updates.forEach(({ newSerialised }) => this.internalCheckDuplicates(newSerialised, false));\n    } catch (e) {\n      updates.forEach(({ oldSerialised }) => this.internalPopulateIndices(oldSerialised));\n      throw e;\n    }\n    updates.forEach(({ newSerialised }) => {\n      this.data.set(newSerialised.id, newSerialised);\n      this.internalPopulateIndices(newSerialised);\n    });\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    let sIds: string[];\n    if (searchAttribute) {\n      sIds = this.internalGetSerialisedIds(searchAttribute, searchValue!);\n    } else {\n      sIds = [...this.data.keys()];\n    }\n    return sIds.map((sId) => applyFilter(\n      deserialiseRecord(this.data.get(sId)!) as T,\n      returnAttributes,\n    ));\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const sIds = this.internalGetSerialisedIds(searchAttribute, searchValue);\n    sIds.forEach((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      this.internalRemoveIndices(oldSerialised);\n      this.data.delete(sId);\n    });\n\n    return sIds.length;\n  }\n\n  private internalGetSerialisedIds<K extends keyof T>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): string[] {\n    const sKey = serialiseValue(searchValue);\n    if (searchAttribute === 'id') {\n      return this.data.has(sKey) ? [sKey] : [];\n    }\n    const index = this.indices[searchAttribute];\n    if (!index) {\n      throw new Error(`Requested key ${searchAttribute} not indexed`);\n    }\n    const sIds = index.get(sKey);\n    return sIds ? [...sIds] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(\n    serialisedValue: Record<string, string>,\n    checkId: boolean,\n  ): void {\n    if (checkId && this.data.has(serialisedValue.id)) {\n      throw new Error('duplicate');\n    }\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      if (this.isIndexUnique(key) && index.has(serialisedValue[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      const v = serialisedValue[key];\n      let o = index.get(v);\n      if (!o) {\n        o = new Set<string>();\n        index.set(v, o);\n      }\n      o.add(serialisedValue.id);\n    });\n  }\n\n  private internalRemoveIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      const v = serialisedValue[key];\n      const o = index.get(v)!;\n      o.delete(serialisedValue.id);\n      if (!o.size) {\n        index.delete(v);\n      }\n    });\n  }\n}\n","import type { Collection } from './Collection';\nimport type { IDable } from './IDable';\nimport type { DB, DBKeys } from './DB';\nimport { canonicalJSON } from '../helpers/serialiser';\n\nexport interface StateRef {\n  closed: boolean;\n}\n\ninterface AsyncCollection<T extends IDable> extends Collection<T> {\n  internalReady?: () => Promise<void>;\n}\n\nexport default abstract class BaseDB implements DB {\n  protected readonly stateRef: StateRef = { closed: false };\n\n  private readonly collectionCache = new Map<string, [string, Collection<any>]>();\n\n  private readonly closeReadiness: Promise<void>[] = [];\n\n  constructor(\n    private readonly makeCollection: <T extends IDable>(\n      name: string,\n      keys?: DBKeys<T>,\n    ) => Collection<T>,\n  ) {}\n\n  public getCollection<T extends IDable>(name: string, keys?: DBKeys<T>): Collection<T> {\n    const cached = this.collectionCache.get(name);\n    const normKeys = canonicalJSON(keys);\n    if (cached) {\n      const [cachedNormKeys, cachedCol] = cached;\n      if (normKeys !== cachedNormKeys) {\n        throw new Error(`Cannot requuest collection '${name}' with different keys`);\n      }\n      return cachedCol;\n    }\n    const created = this.makeCollection(name, keys) as AsyncCollection<T>;\n    if (created.internalReady) {\n      this.closeReadiness.push(created.internalReady());\n    }\n    this.collectionCache.set(name, [normKeys, created]);\n    return created;\n  }\n\n  close(): Promise<void> | void {\n    if (this.stateRef.closed) {\n      return undefined;\n    }\n    this.syncClose();\n    const toAwait = this.closeReadiness.slice();\n    this.closeReadiness.length = 0;\n    return Promise.allSettled(toAwait).then(() => this.internalClose());\n  }\n\n  protected syncClose(): void {\n    this.stateRef.closed = true;\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  protected internalClose(): Promise<void> | void {}\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport type { IDable } from '../interfaces/IDable';\nimport BaseDB from '../interfaces/BaseDB';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb extends BaseDB {\n  public constructor({ simulatedLatency = 0 } = {}) {\n    super((name, keys) => new MemoryCollection(keys, simulatedLatency, this.stateRef));\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(name: string, keys?: DBKeys<T>): MemoryCollection<T> {\n    return super.getCollection(name, keys) as MemoryCollection<T>;\n  }\n\n  public close(): void {\n    this.syncClose();\n  }\n}\n","import type { Db as MongoDbT, MongoClient as MongoClientT } from 'mongodb';\nimport type { DBKeys } from '../interfaces/DB';\nimport BaseDB from '../interfaces/BaseDB';\nimport type { IDable } from '../interfaces/IDable';\nimport type MongoCollectionT from './MongoCollection';\n\nfunction escapeName(name: string): string {\n  return encodeURIComponent(name);\n}\n\nexport default class MongoDb extends BaseDB {\n  private constructor(\n    private readonly client: MongoClientT,\n    MongoCollection: typeof MongoCollectionT,\n  ) {\n    super((name, keys) => new MongoCollection(\n      this.client.db().collection(escapeName(name)),\n      keys,\n      this.stateRef,\n    ));\n  }\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const {\n      default: MongoCollection,\n    } = await import(/* webpackMode: \"eager\" */ './MongoCollection');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client, MongoCollection);\n  }\n\n  public getCollection<T extends IDable>(name: string, keys?: DBKeys<T>): MongoCollectionT<T> {\n    return super.getCollection(name, keys) as MongoCollectionT<T>;\n  }\n\n  public getDb(): MongoDbT {\n    return this.client.db();\n  }\n\n  protected internalClose(): Promise<void> {\n    return this.client.close();\n  }\n}\n","import type {\n  Redis,\n  Pipeline,\n  MultiOptions,\n  Ok,\n} from 'ioredis';\n\n// Thanks, https://stackoverflow.com/a/50014868/1180785\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U : never;\n\ntype PipelineVersions<I> = {\n  [K in keyof I]: (...args: ArgumentTypes<I[K]>) => Pipeline & PipelineVersions<I>;\n};\n\ninterface RedisWithExtendedPipeline<I> extends Redis {\n  multi(commands?: string[][], options?: MultiOptions): Pipeline & PipelineVersions<I>;\n  multi(options: { pipeline: false }): Promise<Ok>;\n}\n\nexport type ExtendedRedis<I> = I & RedisWithExtendedPipeline<I>;\n\nexport async function multiExec(\n  client: Redis,\n  commands: string[][],\n): Promise<[unknown, any][] | null> {\n  if (!commands.length) {\n    return [];\n  }\n  return client.multi(commands).exec();\n}\n\nexport function minifyLuaScript(\n  lines: string[],\n  ...argNames: string[]\n): string {\n  let combined = lines.map((ln) => ln.trim()).join(' ');\n  argNames.forEach((name, i) => {\n    combined = combined.replace(new RegExp(`\\\\$${name}\\\\b`, 'g'), `ARGV[${i + 1}]`);\n  });\n  return combined;\n}\n","import type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { UpdateOptions } from '../interfaces/Collection';\nimport type { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\nimport type RedisConnectionPool from './RedisConnectionPool';\nimport { multiExec } from './helpers';\nimport type { ERedis } from './scripts';\n\ninterface Key<T> {\n  key: keyof T & string;\n  prefix: string;\n}\n\ninterface InternalPatch {\n  sId: string;\n  oldSerialised: Record<string, string | null>;\n  newSerialised: Record<string, string>;\n}\n\nconst notUndefined = <T>(item?: T): item is T => (item !== undefined);\n\nfunction makeIndexKeys(\n  keys: Key<any>[],\n  partialSerialisedValue: Record<string, string | null>,\n): string[] {\n  return keys\n    .filter(({ key }) => partialSerialisedValue[key])\n    .map(({ key, prefix }) => `${prefix}:${partialSerialisedValue[key]}`);\n}\n\nfunction parseItem(\n  item: (string | null)[] | Record<string, string | null>,\n  fields?: readonly string[],\n): Record<string, string | null> {\n  if (!fields) {\n    return item as any;\n  }\n  const result: Record<string, string | null> = {};\n  for (let f = 0; f < fields.length; f += 1) {\n    result[fields[f]] = (item as any)[f];\n  }\n  return result;\n}\n\nfunction itemHasContent(item: Record<string, string | null>): boolean {\n  return Object.values(item).some((v) => (v !== null));\n}\n\nasync function unwatchAll(client: ERedis): Promise<void> {\n  await client.unwatch();\n}\n\nasync function mapAwaitSync<T, O>(\n  values: T[],\n  fn: (value: T) => Promise<O>,\n): Promise<O[]> {\n  const result: O[] = [];\n  for (let i = 0; i < values.length; i += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    result.push(await fn(values[i]));\n  }\n  return result;\n}\n\nexport default class RedisCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly keyPrefixes: { [K in keyof T]?: string } = {};\n\n  private readonly uniqueKeys: Key<T>[] = [];\n\n  private readonly nonUniqueKeys: Key<T>[] = [];\n\n  public constructor(\n    private readonly pool: RedisConnectionPool,\n    private readonly prefix: string,\n    keys: DBKeys<T> = {},\n  ) {\n    super(keys);\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      const keyPrefix = `${prefix}-${key}`;\n      this.keyPrefixes[key] = keyPrefix;\n      const keyInfo = { key, prefix: keyPrefix };\n      if (keys[key]!.unique) {\n        this.uniqueKeys.push(keyInfo);\n      } else {\n        this.nonUniqueKeys.push(keyInfo);\n      }\n    });\n  }\n\n  protected internalAdd(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    return this.pool.withConnection(async (client) => {\n      const added = await this.runAdd(client, serialised, false);\n      if (!added) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  protected internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    { upsert }: UpdateOptions,\n  ): Promise<void> {\n    const patchSerialised = serialiseRecord(update);\n    const sKey = serialiseValue(searchValue);\n\n    if (searchAttribute === 'id') {\n      return this.pool.retryWithConnection(async (client) => {\n        const patch = await this.getUpdatePatch(client, sKey, patchSerialised);\n        if (patch) {\n          await this.runUpdates(client, [patch]);\n        } else if (upsert) {\n          const insertValue = { ...patchSerialised, id: sKey };\n          if (!await this.runAdd(client, insertValue, true)) {\n            throw new Error('duplicate');\n          }\n        }\n      }, unwatchAll);\n    }\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      const patches = (await mapAwaitSync(\n        sIds,\n        (sId) => this.getUpdatePatch(client, sId, patchSerialised),\n      )).filter(notUndefined);\n      await this.runUpdates(client, patches);\n    }, unwatchAll);\n  }\n\n  protected internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const sKey = serialiseValue(searchValue);\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey))[0];\n      if (sId === undefined) {\n        return null;\n      }\n      const results = await this.getByKeysKeepWatches(client, [sId], returnAttributes);\n      return results[0] ?? null;\n    }, unwatchAll);\n  }\n\n  protected internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    return this.pool.retryWithConnection(async (client) => {\n      let sIds: string[];\n      if (searchAttribute) {\n        const sKey = serialiseValue(searchValue);\n        sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      } else {\n        sIds = await client.keys(this.makeKey('*'));\n        const cut = this.prefix.length + 1;\n        sIds = sIds.map((v) => v.substr(cut));\n      }\n      return this.getByKeysKeepWatches(client, sIds, returnAttributes);\n    }, unwatchAll);\n  }\n\n  protected internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const sKey = serialiseValue(searchValue);\n    const indexedKeys = Object.keys(this.keys);\n    indexedKeys.push('id');\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      const items = (await mapAwaitSync(\n        sIds,\n        (sId) => this.rawByKeyKeepWatches(client, sId, indexedKeys),\n      )).filter(notUndefined);\n\n      if (items.length === 0) {\n        return 0;\n      }\n\n      const pipeline = client.multi();\n      items.forEach((item) => {\n        const uniqueKeys = makeIndexKeys(this.uniqueKeys, item);\n        const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, item);\n        pipeline.remove(\n          1 + uniqueKeys.length + nonUniqueKeys.length,\n          this.makeKey(item.id!),\n          ...uniqueKeys,\n          ...nonUniqueKeys,\n          item.id!,\n        );\n      });\n      await pipeline.exec();\n      return items.length;\n    }, unwatchAll);\n  }\n\n  private makeKey(serialisedId: string): string {\n    return `${this.prefix}:${serialisedId}`;\n  }\n\n  private async runAdd(\n    client: ERedis,\n    { id, ...serialised }: Record<string, string>,\n    checkWatch: boolean,\n  ): Promise<boolean> {\n    const uniqueKeys = makeIndexKeys(this.uniqueKeys, serialised);\n    const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, serialised);\n\n    const keyCount = 1 + uniqueKeys.length + nonUniqueKeys.length;\n    const params = [\n      this.makeKey(id),\n      ...uniqueKeys,\n      ...nonUniqueKeys,\n      uniqueKeys.length,\n      'id', // ID is always first in flattened key/value pairs\n      id,\n      ...Object.entries(serialised).flat(),\n    ];\n\n    if (!checkWatch) {\n      return Boolean(await client.add(keyCount, ...params));\n    }\n\n    const result = await client\n      .multi()\n      .add(keyCount, ...params)\n      .exec();\n    if (!result) {\n      throw new Error('transient error');\n    }\n    return Boolean(result[0][1]);\n  }\n\n  private async getUpdatePatch(\n    client: ERedis,\n    sId: string,\n    patchSerialised: Record<string, string>,\n  ): Promise<InternalPatch | undefined> {\n    await client.watch(this.makeKey(sId));\n    const oldSerialised = await this.rawByKeyKeepWatches(\n      client,\n      sId,\n      Object.keys(this.keys).filter((k) => patchSerialised[k]),\n    );\n    if (!oldSerialised) {\n      return undefined;\n    }\n    const newSerialised = { ...patchSerialised };\n    Object.keys(newSerialised).forEach((k) => {\n      if (oldSerialised[k] === newSerialised[k]) {\n        delete newSerialised[k];\n        delete oldSerialised[k];\n      }\n    });\n    return { sId, newSerialised, oldSerialised };\n  }\n\n  private async runUpdates(\n    client: ERedis,\n    patches: InternalPatch[],\n  ): Promise<void> {\n    const argsList = patches\n      .map((patch) => this.makeUpdateArgs(patch))\n      .filter(notUndefined);\n\n    if (!argsList.length) {\n      return;\n    }\n\n    if (argsList.length === 1) {\n      const results = await client.multi()\n        .update(argsList[0][0], argsList[0][1])\n        .exec();\n\n      if (!results) {\n        throw new Error('transient error');\n      }\n      if (!results[0][1]) {\n        throw new Error('duplicate');\n      }\n      return;\n    }\n\n    const updateCheckResults = await mapAwaitSync(\n      argsList,\n      (updateArgs) => client.checkUpdate(updateArgs[0], updateArgs[1]),\n    );\n    if (updateCheckResults.some((r) => !r)) {\n      throw new Error('duplicate');\n    }\n\n    let chain = client.multi();\n    argsList.forEach((updateArgs) => {\n      chain = chain.updateWithoutCheck(updateArgs[0], updateArgs[1]);\n    });\n    const results = await chain.exec();\n\n    if (!results) {\n      throw new Error('transient error');\n    }\n  }\n\n  private makeUpdateArgs(\n    { sId, oldSerialised, newSerialised }: InternalPatch,\n  ): [number, any[]] | undefined {\n    const diff = Object.entries(newSerialised).flat();\n    if (!diff.length) {\n      return undefined; // nothing changed\n    }\n    const patchUniqueKeys = makeIndexKeys(this.uniqueKeys, newSerialised);\n    const patchNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, newSerialised);\n    const oldUniqueKeys = makeIndexKeys(this.uniqueKeys, oldSerialised);\n    const oldNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, oldSerialised);\n    if (\n      oldUniqueKeys.length !== patchUniqueKeys.length ||\n      oldNonUniqueKeys.length !== patchNonUniqueKeys.length\n    ) {\n      throw new Error('unexpected key mismatch with old value');\n    }\n    const keyCount = 1 + (patchUniqueKeys.length + patchNonUniqueKeys.length) * 2;\n    const params = [\n      this.makeKey(sId),\n      ...patchUniqueKeys,\n      ...patchNonUniqueKeys,\n      ...oldUniqueKeys,\n      ...oldNonUniqueKeys,\n      patchUniqueKeys.length,\n      patchUniqueKeys.length + patchNonUniqueKeys.length,\n      sId,\n      ...diff,\n    ];\n    return [keyCount, params];\n  }\n\n  private async getByKeysKeepWatches<F extends readonly (keyof T & string)[]>(\n    client: ERedis,\n    serialisedIds: string[],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const results = await multiExec(\n      client,\n      serialisedIds\n        .map((sId) => this.makeKey(sId))\n        .map((k) => (fields ? ['hmget', k, ...fields] : ['hgetall', k])),\n    );\n    if (!results) {\n      throw new Error('transient error');\n    }\n    return results\n      .map(([, item]: [unknown, any]) => parseItem(item, fields))\n      .filter(itemHasContent)\n      .map(deserialiseRecord) as T[];\n  }\n\n  private async rawByKeyKeepWatches(\n    client: ERedis,\n    serialisedId: string,\n    fields?: readonly string[],\n  ): Promise<Record<string, string | null> | undefined> {\n    const key = this.makeKey(serialisedId);\n    let item;\n    if (fields) {\n      if (!fields.length) {\n        // just check existence\n        const exists = await client.exists(key);\n        return exists ? {} : undefined;\n      }\n      item = await client.hmget(key, ...fields);\n    } else {\n      item = await client.hgetall(key);\n    }\n    const parsed = parseItem(item, fields);\n    return itemHasContent(parsed) ? parsed : undefined;\n  }\n\n  private async getAndWatchBySerialisedKey(\n    client: ERedis,\n    keyName: keyof T,\n    serialisedValue: string,\n  ): Promise<string[]> {\n    if (keyName === 'id') {\n      return [serialisedValue];\n    }\n    const keyPrefix = this.keyPrefixes[keyName];\n    if (!keyPrefix) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const keyAddress = `${keyPrefix}:${serialisedValue}`;\n    await client.watch(keyAddress);\n    return client.smembers(keyAddress);\n  }\n}\n","import type { Redis as RedisT } from 'ioredis';\nimport { minifyLuaScript, ExtendedRedis } from './helpers';\n\nexport interface ScriptExtensions {\n  add(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  update(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  checkUpdate(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  updateWithoutCheck(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n  remove(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n}\n\nexport type ERedis = ExtendedRedis<ScriptExtensions>;\n\n// KEYS = [id, ...uniqueKeys, ...nonUniqueKeys]\nconst SCRIPT_ADD = minifyLuaScript([\n  'if redis.call(\"exists\",KEYS[1])==1 then',\n  '  return 0',\n  'end',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 2))',\n  'for k=2,#KEYS do',\n  '  redis.call(\"sadd\",KEYS[k],ARGV[3])',\n  'end',\n  'return 1',\n], 'uniqueKeyCount');\n\nconst FRAG_CHECK_UPDATE = [\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n];\n\nconst FRAG_UPDATE = [\n  'local tkc=tonumber($totalKeyCount)',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 4))',\n  'for k=1,tkc do',\n  '  redis.call(\"smove\",KEYS[1+tkc+k],KEYS[1+k],$id)',\n  'end',\n];\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_CHECK_UPDATE = minifyLuaScript([\n  ...FRAG_CHECK_UPDATE,\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE_WITHOUT_CHECK = minifyLuaScript([\n  ...FRAG_UPDATE,\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE = minifyLuaScript([\n  ...FRAG_CHECK_UPDATE,\n  ...FRAG_UPDATE,\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...keys]\nconst SCRIPT_REMOVE = minifyLuaScript([\n  'redis.call(\"del\",KEYS[1])',\n  'for k=2,#KEYS do',\n  '  redis.call(\"srem\",KEYS[k],$id)',\n  'end',\n], 'id');\n\nexport default function defineAllScripts(client: RedisT): ERedis {\n  client.defineCommand('add', { lua: SCRIPT_ADD });\n  client.defineCommand('update', { lua: SCRIPT_UPDATE });\n  client.defineCommand('checkUpdate', { lua: SCRIPT_CHECK_UPDATE });\n  client.defineCommand('updateWithoutCheck', { lua: SCRIPT_UPDATE_WITHOUT_CHECK });\n  client.defineCommand('remove', { lua: SCRIPT_REMOVE });\n\n  return client as ERedis;\n}\n","import type { Redis as RedisT, RedisOptions as RedisOptionsT } from 'ioredis';\nimport defineAllScripts, { ERedis } from './scripts';\nimport retry from '../helpers/retry';\n\ntype RS = new(host?: string, options?: RedisOptionsT) => RedisT;\n\nconst withRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message === 'transient error'\n));\n\nexport default class RedisConnectionPool {\n  private readonly connections: ERedis[] = [];\n\n  private inUse = 0;\n\n  private queue: ((client: ERedis) => void)[] = [];\n\n  private closingFn?: () => void;\n\n  private closed = false;\n\n  public constructor(\n    private readonly RedisStatic: RS,\n    private readonly url: string,\n    private readonly options: RedisOptionsT,\n    private readonly maxConnections: number,\n  ) {}\n\n  public async withConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    const c = await this.getConnection();\n    try {\n      return await fn(c);\n    } finally {\n      await teardown?.(c);\n      this.returnConnection(c);\n    }\n  }\n\n  public async retryWithConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    return withRetry(() => this.withConnection(fn, teardown));\n  }\n\n  public close(): Promise<void> {\n    if (this.closed) {\n      return Promise.resolve();\n    }\n\n    this.closed = true;\n    if (this.inUse === 0) {\n      this.doClose();\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve): void => {\n      this.closingFn = (): void => {\n        this.doClose();\n        resolve();\n      };\n    });\n  }\n\n  private doClose(): void {\n    this.connections.forEach((c) => c.disconnect());\n    this.connections.length = 0;\n  }\n\n  private async getConnection(): Promise<ERedis> {\n    if (this.closed) {\n      throw new Error('Connection closed');\n    }\n\n    const r = this.connections.pop();\n    if (r) {\n      this.inUse += 1;\n      return r;\n    }\n    if (this.inUse < this.maxConnections) {\n      this.inUse += 1;\n      const client = new this.RedisStatic(this.url, this.options);\n      await client.connect();\n      return defineAllScripts(client);\n    }\n    return new Promise((resolve): void => {\n      this.queue.push(resolve);\n    });\n  }\n\n  private returnConnection(c: ERedis): void {\n    const q = this.queue.shift();\n    if (q) {\n      q(c);\n    } else {\n      this.inUse -= 1;\n      this.connections.push(c);\n      if (this.inUse === 0) {\n        this.closingFn?.();\n      }\n    }\n  }\n}\n","import RedisCollection from './RedisCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport BaseDB from '../interfaces/BaseDB';\nimport type { IDable } from '../interfaces/IDable';\nimport RedisConnectionPool from './RedisConnectionPool';\n\nexport default class RedisDb extends BaseDB {\n  private constructor(\n    private readonly pool: RedisConnectionPool,\n  ) {\n    super((name, keys) => new RedisCollection(this.pool, name, keys));\n  }\n\n  public static async connect(url: string): Promise<RedisDb> {\n    const { default: RedisStatic } = await import('ioredis');\n    const connectionPoolSize = 5;\n    return new RedisDb(new RedisConnectionPool(\n      RedisStatic,\n      url,\n      { lazyConnect: true },\n      connectionPoolSize,\n    ));\n  }\n\n  public getCollection<T extends IDable>(name: string, keys?: DBKeys<T>): RedisCollection<T> {\n    return super.getCollection(name, keys) as RedisCollection<T>;\n  }\n\n  public getConnectionPool(): RedisConnectionPool {\n    return this.pool;\n  }\n\n  protected internalClose(): Promise<void> {\n    return this.pool.close();\n  }\n}\n","export function quoteHValue(v: string): string {\n  return `\"${v.replace(/([\"\\\\])/g, '\\\\$1')}\"`;\n}\n\nexport function encodeHStore(record: Record<string, string>): string {\n  const result: string[] = [];\n  Object.keys(record).forEach((k) => {\n    result.push(`${quoteHValue(k)}=>${quoteHValue(record[k])}`);\n  });\n  return result.join(',');\n}\n\nexport function decodeHStore(hstore: string): Record<string, string> {\n  const result: Record<string, string> = {};\n  let current = '';\n  let currentKey = '';\n  let quote = false;\n  for (let p = 0; p < hstore.length;) {\n    const c = hstore[p];\n    switch (c) {\n      case ' ':\n      case '\\r':\n      case '\\n':\n      case '\\t':\n        if (quote) {\n          current += c;\n        }\n        break;\n      case '\\\\':\n        current += hstore[p + 1];\n        p += 1;\n        break;\n      case '\"':\n        quote = !quote;\n        break;\n      case '=':\n        if (quote) {\n          current += c;\n        } else if (hstore[p + 1] === '>') {\n          currentKey = current;\n          current = '';\n          p += 1;\n        }\n        break;\n      case ',':\n        if (quote) {\n          current += c;\n        } else {\n          result[currentKey] = current;\n          currentKey = '';\n          current = '';\n        }\n        break;\n      default:\n        current += c;\n        break;\n    }\n    p += 1;\n  }\n  if (currentKey) {\n    result[currentKey] = current;\n  }\n  return result;\n}\n","const DQUOTE_REG = /\"/g;\nexport function quoteIdentifier(msg: string): string {\n  return `\"${msg.replace(DQUOTE_REG, '\"\"')}\"`;\n}\n\nconst SQUOTE_REG = /'/g;\nexport function quoteValue(msg: string): string {\n  // only used for creating indices,\n  // because prepared statements do not support CREATE\n  return `'${msg.replace(SQUOTE_REG, '\\'\\'')}'`;\n}\n\nconst ID_REG = /\\$[A-Z]/g;\nexport function withIdentifiers(\n  base: string,\n  identifiers: Record<string, string>,\n): string {\n  return base.replace(\n    ID_REG,\n    (v) => quoteIdentifier(identifiers[v.substr(1)]),\n  );\n}\n","import type { Pool as PgPoolT, QueryArrayResult as PgQueryArrayResultT } from 'pg';\nimport type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport type { StateRef } from '../interfaces/BaseDB';\nimport { serialiseValue, deserialiseValue, serialiseRecord } from '../helpers/serialiser';\nimport { encodeHStore, decodeHStore } from './hstore';\nimport { withIdentifiers, quoteValue } from './sql';\n\nconst STATEMENTS = {\n  CREATE_TABLE: [\n    'CREATE TABLE IF NOT EXISTS $T (',\n    'id TEXT NOT NULL PRIMARY KEY,',\n    'data HSTORE NOT NULL',\n    ')',\n  ].join(''),\n\n  CREATE_INDEX: 'CREATE INDEX IF NOT EXISTS $I ON $T USING HASH ((data->$1))',\n  CREATE_UNIQUE_INDEX: 'CREATE UNIQUE INDEX IF NOT EXISTS $I ON $T ((data->$1))',\n  DROP_INDEX: 'DROP INDEX IF EXISTS $I',\n\n  INSERT: 'INSERT INTO $T (id, data) VALUES ($1, $2::hstore)',\n\n  UPDATE: 'UPDATE $T SET data=data||$1::hstore WHERE data->$2=$3 RETURNING id',\n  UPDATE_ID: 'UPDATE $T SET data=data||$1::hstore WHERE id=$2',\n\n  UPSERT_ID: 'INSERT INTO $T (id, data) VALUES ($1, $2::hstore) ON CONFLICT (id) DO UPDATE SET data=$T.data||$2::hstore',\n\n  SELECT_ONE: 'SELECT id, data FROM $T WHERE data->$1=$2 LIMIT 1',\n  SELECT_ALL: 'SELECT id, data FROM $T',\n  SELECT_ALL_BY: 'SELECT id, data FROM $T WHERE data->$1=$2',\n  SELECT_ID: 'SELECT id, data FROM $T WHERE id=$1',\n\n  DELETE: 'DELETE FROM $T WHERE data->$1=$2',\n  DELETE_ID: 'DELETE FROM $T WHERE id=$1',\n};\n\nasync function configureTable(\n  pool: PgPoolT,\n  tableName: string,\n  keys: DBKeys<any> = {},\n): Promise<void> {\n  const c = await pool.connect();\n  try {\n    await c.query(withIdentifiers(STATEMENTS.CREATE_TABLE, {\n      T: tableName,\n    }));\n\n    // PostgreSQL does not support prepared statements for CREATE statements,\n    // so we must escape the values manually using quoteValue.\n    const keyEntries = Object.entries(keys);\n    for (let i = 0; i < keyEntries.length; i += 1) {\n      /* eslint-disable no-await-in-loop */ // client cannot multitask\n      const [k, v] = keyEntries[i];\n      if (v && v.unique) {\n        await c.query(withIdentifiers(STATEMENTS.DROP_INDEX, {\n          T: tableName,\n          I: `${tableName}_i${k}`,\n        }));\n        await c.query(withIdentifiers(STATEMENTS.CREATE_UNIQUE_INDEX, {\n          T: tableName,\n          I: `${tableName}_u${k}`,\n        }).replace(/\\$1/g, quoteValue(k)));\n      } else {\n        await c.query(withIdentifiers(STATEMENTS.DROP_INDEX, {\n          T: tableName,\n          I: `${tableName}_u${k}`,\n        }));\n        await c.query(withIdentifiers(STATEMENTS.CREATE_INDEX, {\n          T: tableName,\n          I: `${tableName}_i${k}`,\n        }).replace(/\\$1/g, quoteValue(k)));\n      }\n      /* eslint-enable no-await-in-loop */\n    }\n  } finally {\n    c.release();\n  }\n}\n\nfunction toHStore(record: Record<string, unknown>): string {\n  return encodeHStore(serialiseRecord(record));\n}\n\nfunction fromHStore<T>(\n  [id, data]: readonly any[],\n  fields?: readonly string[],\n): T {\n  const rawMap = decodeHStore(data);\n  rawMap.id = id;\n\n  const result: Record<string, unknown> = {};\n\n  if (!fields) {\n    Object.entries(rawMap).forEach(([k, v]) => {\n      result[k] = deserialiseValue(v);\n    });\n    return result as T;\n  }\n\n  fields.forEach((f) => {\n    result[f] = deserialiseValue(rawMap[f]);\n  });\n  return result as T;\n}\n\nexport default class PostgresCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly cachedQueries: Partial<Record<keyof typeof STATEMENTS, string>> = {};\n\n  public constructor(\n    private readonly pool: PgPoolT,\n    private readonly tableName: string,\n    keys: DBKeys<T> = {},\n    private readonly stateRef: StateRef = { closed: false },\n  ) {\n    super(keys);\n\n    this.initAsync(configureTable(pool, tableName, keys));\n  }\n\n  protected async internalAdd({ id, ...rest }: T): Promise<void> {\n    await this.runTableQuery('INSERT', serialiseValue(id), toHStore(rest));\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    await this.runTableQuery('UPSERT_ID', serialiseValue(id), toHStore(update));\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    { id, ...rest }: Partial<T>,\n  ): Promise<void> {\n    const sId = serialiseValue(searchValue);\n    const hstore = toHStore(rest);\n\n    if (searchAttribute === 'id') {\n      await this.runTableQuery('UPDATE_ID', hstore, sId);\n    } else {\n      const r = await this.runTableQuery('UPDATE', hstore, searchAttribute, sId);\n      if (id !== undefined && r.rowCount > 0 && r.rows[0][0] !== id) {\n        throw new Error('Cannot update ID');\n      }\n    }\n  }\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    let raw;\n    if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('SELECT_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('SELECT_ONE', searchAttribute, serialiseValue(searchValue));\n    }\n    if (!raw.rowCount) {\n      return null;\n    }\n    return fromHStore<T>(raw.rows[0], returnAttributes);\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    let raw;\n    if (!searchAttribute) {\n      raw = await this.runTableQuery('SELECT_ALL');\n    } else if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('SELECT_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('SELECT_ALL_BY', searchAttribute, serialiseValue(searchValue));\n    }\n    return raw.rows.map((v) => fromHStore<T>(v, returnAttributes));\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    let raw;\n    if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('DELETE_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('DELETE', searchAttribute, serialiseValue(searchValue));\n    }\n    return raw.rowCount;\n  }\n\n  private runTableQuery(\n    queryName: keyof typeof STATEMENTS,\n    ...values: any[]\n  ): Promise<PgQueryArrayResultT<any[]>> {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n\n    let cached = this.cachedQueries[queryName];\n    if (!cached) {\n      cached = withIdentifiers(STATEMENTS[queryName], { T: this.tableName });\n      this.cachedQueries[queryName] = cached;\n    }\n\n    return this.pool.query({\n      name: `${this.tableName}_${queryName}`,\n      rowMode: 'array',\n      text: cached,\n      values,\n    });\n  }\n}\n","import type { Pool as PgPoolT } from 'pg';\nimport PostgresCollection from './PostgresCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport BaseDB from '../interfaces/BaseDB';\nimport type { IDable } from '../interfaces/IDable';\n\nexport default class PostgresDb extends BaseDB {\n  private constructor(\n    private readonly pool: PgPoolT,\n  ) {\n    super((name, keys) => new PostgresCollection(pool, name, keys, this.stateRef));\n  }\n\n  public static async connect(url: string): Promise<PostgresDb> {\n    const { Pool } = await import('pg');\n    const pool = new Pool({ connectionString: url });\n    await pool.query('CREATE EXTENSION IF NOT EXISTS hstore');\n    return new PostgresDb(pool);\n  }\n\n  public getCollection<T extends IDable>(name: string, keys?: DBKeys<T>): PostgresCollection<T> {\n    return super.getCollection(name, keys) as PostgresCollection<T>;\n  }\n\n  public getConnectionPool(): PgPoolT {\n    return this.pool;\n  }\n\n  protected internalClose(): Promise<void> {\n    return this.pool.end();\n  }\n}\n","import type { IDable } from '../interfaces/IDable';\nimport type { Collection, UpdateOptions } from '../interfaces/Collection';\n\nexport type Wrapped<T extends IDable, Fields extends keyof T, FieldStorage> = {\n  [K in keyof T]: K extends 'id' ? T[K] : K extends Fields ? FieldStorage : T[K];\n};\n\nexport interface Wrapper<T extends IDable, K extends keyof T, FieldStorage, CustomData> {\n  wrap: (\n    key: K,\n    value: T[K],\n    processed: CustomData,\n  ) => Promise<FieldStorage> | FieldStorage;\n\n  unwrap: (\n    key: K,\n    value: FieldStorage,\n    processed: CustomData,\n  ) => Promise<T[K]> | T[K];\n\n  preWrap?: (\n    record: Readonly<Partial<T>>,\n  ) => Promise<CustomData> | CustomData;\n\n  preUnwrap?: (\n    record: Readonly<Partial<Wrapped<T, K, FieldStorage>>>,\n  ) => Promise<CustomData> | CustomData;\n\n  preRemove?: (\n    record: Readonly<Pick<Wrapped<T, K, FieldStorage>, 'id'>>,\n  ) => Promise<void> | void;\n}\n\nfunction hasAnyField(value: object, fields: readonly string[]): boolean {\n  return fields\n    .some((field) => Object.prototype.hasOwnProperty.call(value, field));\n}\n\nexport default class WrappedCollection<\n  T extends IDable,\n  WF extends readonly (keyof Omit<T, 'id'> & string)[],\n  FieldStorage,\n  E,\n  Inner extends Wrapped<T, WF[-1], FieldStorage> = Wrapped<T, WF[-1], FieldStorage>\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<Inner>,\n    private readonly fields: WF,\n    private readonly wrapper: Wrapper<T, WF[-1], FieldStorage, E>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(await this.wrapAll(entry));\n  }\n\n  public async get<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key: K,\n    value: T[K] & Inner[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot get by wrapped value');\n    }\n    const raw = await this.baseCollection.get(key, value, fields!);\n    return raw ? this.unwrapAll(raw, { [key]: value }) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key?: K,\n    value?: T[K] & Inner[NonNullable<K>],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (key !== undefined && this.fields.includes(key as any)) {\n      throw new Error('Cannot get by wrapped value');\n    }\n    const raw = await this.baseCollection.getAll(key!, value!, fields!);\n    const extra = (key !== undefined) ? { [key]: value } : undefined;\n    return Promise.all(raw.map((v) => this.unwrapAll(v, extra)));\n  }\n\n  public async update<K extends keyof T & keyof Inner & string>(\n    key: K,\n    value: T[K] & Inner[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot update by wrapped value');\n    }\n    const converted = await this.wrapAll(update, { [key]: value });\n    return this.baseCollection.update(key, value, converted, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K] & Inner[K],\n  ): Promise<number> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot remove by wrapped value');\n    }\n    if (!this.wrapper.preRemove) {\n      return this.baseCollection.remove(key, value);\n    }\n\n    const items = await this.baseCollection.getAll(key, value, ['id']);\n    await Promise.all(items.map(async (item) => {\n      await this.wrapper.preRemove!(item);\n      await this.baseCollection.remove('id', item.id);\n    }));\n    return items.length;\n  }\n\n  private async wrapAll(\n    v: Readonly<T>,\n    extra?: object,\n  ): Promise<Inner>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>> {\n    let processed: E;\n    if (this.wrapper.preWrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preWrap(allFields);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.wrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n\n  private async unwrapAll(\n    v: Readonly<Inner>,\n    extra?: object,\n  ): Promise<T>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>> {\n    let processed: E;\n    if (this.wrapper.preUnwrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preUnwrap(allFields as any);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.unwrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n}\n","export default class LruCache<K, V> {\n  private readonly storage = new Map<K, V>();\n\n  public constructor(\n    private readonly capacity: number,\n  ) {}\n\n  public async cachedAsync(key: K, calc: (key: K) => Promise<V>): Promise<V> {\n    const value = this.storage.get(key);\n    if (this.storage.delete(key)) {\n      this.storage.set(key, value!);\n      return value!;\n    }\n    const created = await calc(key);\n    this.storage.set(key, created);\n    this.flush();\n    return created;\n  }\n\n  public remove(key: K): void {\n    this.storage.delete(key);\n  }\n\n  private flush(): void {\n    while (this.storage.size > this.capacity) {\n      this.storage.delete(this.storage.keys().next().value);\n    }\n  }\n}\n","import crypto, { KeyObject } from 'crypto';\nimport type Encryption from './Encryption';\n\nconst ALG = 'aes-256-cbc';\nconst ALG_BUF = Buffer.from(`${ALG}:`, 'utf8');\nconst IV_LEN = 16;\n\nconst nodeEncryptionSync: Encryption<KeyObject, Buffer> = {\n  encrypt: (key: KeyObject, v: Buffer): Buffer => {\n    const iv = crypto.randomBytes(IV_LEN);\n    const cipher = crypto.createCipheriv(ALG, key, iv);\n    const part = cipher.update(v);\n    const final = cipher.final();\n    return Buffer.concat([ALG_BUF, iv, part, final]);\n  },\n\n  decrypt: (key: KeyObject, v: Buffer): Buffer => {\n    if (!v.slice(0, ALG_BUF.length).equals(ALG_BUF)) {\n      throw new Error('Unknown encryption algorithm');\n    }\n\n    const iv = v.slice(ALG_BUF.length, ALG_BUF.length + IV_LEN);\n    const encrypted = v.slice(ALG_BUF.length + IV_LEN);\n\n    const decipher = crypto.createDecipheriv(ALG, key, iv);\n    const part = decipher.update(encrypted);\n    const final = decipher.final();\n\n    return Buffer.concat([part, final]);\n  },\n\n  generateKey: (): KeyObject => crypto\n    .createSecretKey(crypto.randomBytes(32)),\n\n  serialiseKey: (key: KeyObject): Buffer => key.export(),\n\n  deserialiseKey: (data: Buffer): KeyObject => crypto.createSecretKey(data),\n};\n\nexport default nodeEncryptionSync;\n","import type { IDable, IDableBy, IDType } from '../interfaces/IDable';\nimport type { Collection } from '../interfaces/Collection';\nimport LruCache from '../helpers/LruCache';\nimport { serialiseValueBin, deserialiseValueBin } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\nimport type Encryption from './encryption/Encryption';\nimport nodeEncryptionSync from './encryption/nodeEncryptionSync';\n\nexport interface KeyRecord<ID extends IDType, KeyT> {\n  id: ID;\n  key: KeyT;\n}\n\nexport type Encrypted<T extends IDable, WF extends keyof T> = Wrapped<T, WF, Buffer>;\n\ntype EncryptableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\ntype Encrypter<ID extends IDType> = <T extends IDableBy<ID>>(\n) => <F extends EncryptableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Encrypted<T, F[-1]>>,\n) => Collection<T>;\n\n// makeEncrypter provides optional 2-tier function call due to\n// https://github.com/Microsoft/TypeScript/issues/26242\n\nfunction makeEncrypter<ID extends IDType>(\n  wrapper: <T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Encrypted<T, F[-1]>>,\n  ) => Collection<T>,\n): Encrypter<ID> {\n  return (fields?: any, baseCollection?: Collection<any>): any => {\n    if (fields && baseCollection) {\n      // non-typescript API (remove need for extra ())\n      return wrapper(fields, baseCollection) as any;\n    }\n    return wrapper;\n  };\n}\n\nexport interface EncryptionOptions<KeyT = Buffer, SerialisedKeyT = Buffer> {\n  allowRaw?: boolean;\n  encryption?: Encryption<KeyT, SerialisedKeyT>;\n}\n\nexport interface RecordEncryptionOptions {\n  cacheSize?: number;\n}\n\ninterface CustomEncryptionOptions<KeyT, SerialisedKeyT>\n  extends EncryptionOptions<KeyT, SerialisedKeyT> {\n  encryption: Encryption<KeyT, SerialisedKeyT>;\n}\n\nfunction encryptByKey(\n  sKey: Buffer,\n  options?: EncryptionOptions,\n): Encrypter<IDType>;\n\nfunction encryptByKey<KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  options: CustomEncryptionOptions<KeyT, SerialisedKeyT>,\n): Encrypter<IDType>;\n\nfunction encryptByKey<KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  {\n    encryption = nodeEncryptionSync as any,\n    allowRaw = false,\n  }: EncryptionOptions<KeyT, SerialisedKeyT> = {},\n): Encrypter<IDType> {\n  const key = encryption.deserialiseKey(sKey);\n\n  return makeEncrypter(<T extends IDable, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Encrypted<T, F[-1]>>,\n  ) => new WrappedCollection<T, F, Buffer, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<Buffer> | Buffer => encryption.encrypt(key, serialiseValueBin(v)),\n    unwrap: async (k, v): Promise<any> => {\n      if (!(v instanceof Buffer)) {\n        if (allowRaw) {\n          return v; // probably an old record before encryption was added\n        }\n        throw new Error('unencrypted data');\n      }\n      return deserialiseValueBin(await encryption.decrypt(key, v));\n    },\n  }));\n}\n\nfunction encryptByRecord<ID extends IDType>(\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  options?: EncryptionOptions & RecordEncryptionOptions,\n): Encrypter<ID>;\n\nfunction encryptByRecord<ID extends IDType, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  options: CustomEncryptionOptions<KeyT, SerialisedKeyT> & RecordEncryptionOptions,\n): Encrypter<ID>;\n\nfunction encryptByRecord<ID extends IDType, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  {\n    encryption = nodeEncryptionSync as any,\n    allowRaw = false,\n    cacheSize = 0,\n  }: EncryptionOptions<KeyT, SerialisedKeyT> & RecordEncryptionOptions = {},\n): Encrypter<ID> {\n  const cache = new LruCache<ID, KeyT>(cacheSize);\n\n  const loadKey = async (\n    generateIfNeeded: boolean,\n    record: { id?: ID },\n  ): Promise<KeyT> => {\n    const { id } = record;\n\n    if (id === undefined) {\n      throw new Error('Must provide ID for encryption');\n    }\n\n    return cache.cachedAsync(id, async () => {\n      const item = await keyCollection.get('id', id, ['key']);\n      if (item) {\n        return encryption.deserialiseKey(item.key);\n      }\n      if (!generateIfNeeded) {\n        throw new Error('No encryption key found for record');\n      }\n      const key = await encryption.generateKey();\n      await keyCollection.add({ id, key: encryption.serialiseKey(key) });\n      return key;\n    });\n  };\n\n  const removeKey = async ({ id }: { id: ID }): Promise<void> => {\n    await keyCollection.remove('id', id);\n    cache.remove(id);\n  };\n\n  // https://github.com/microsoft/TypeScript/issues/39080\n  return makeEncrypter<ID>(<T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Encrypted<T, F[-1]>>,\n  ) => new WrappedCollection<T, F, Buffer, KeyT>(baseCollection, fields, {\n    wrap: (k, v, key): Promise<Buffer> | Buffer => encryption.encrypt(key, serialiseValueBin(v)),\n    unwrap: async (k, v, key): Promise<any> => {\n      if (!(v instanceof Buffer)) {\n        if (allowRaw) {\n          return v; // probably an old record before encryption was added\n        }\n        throw new Error('unencrypted data');\n      }\n      return deserialiseValueBin(await encryption.decrypt(key, v));\n    },\n    preWrap: loadKey.bind(null, true),\n    preUnwrap: loadKey.bind(null, false),\n    preRemove: removeKey,\n  }));\n}\n\nfunction encryptByRecordWithMasterKey<ID extends IDType>(\n  sMasterKey: Buffer,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  options?: EncryptionOptions & RecordEncryptionOptions,\n): Encrypter<ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  options: CustomEncryptionOptions<KeyT, SerialisedKeyT> & RecordEncryptionOptions,\n): Encrypter<ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  options: EncryptionOptions<KeyT, SerialisedKeyT> & RecordEncryptionOptions = {},\n): Encrypter<ID> {\n  const opts = options as CustomEncryptionOptions<KeyT, SerialisedKeyT> & RecordEncryptionOptions;\n  const keyEnc = encryptByKey(sMasterKey, opts);\n  const encKeyCollection = keyEnc<KeyRecord<ID, SerialisedKeyT>>()(\n    ['key'],\n    keyCollection,\n  );\n  return encryptByRecord(encKeyCollection, opts);\n}\n\nexport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\n","import zlib from 'zlib';\nimport { promisify } from 'util';\nimport type { IDable } from '../interfaces/IDable';\nimport type { Collection } from '../interfaces/Collection';\nimport { serialiseValueBin, deserialiseValueBin } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\n\ntype CompressableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\nexport type Compressed<T extends IDable, WF extends keyof T> = Wrapped<T, WF, Buffer>;\n\nexport interface CompressOptions {\n  allowRaw?: boolean;\n  allowRawBuffer?: boolean;\n  compressionThresholdBytes?: number;\n}\n\nconst gzipCompress = promisify<Buffer, Buffer>(zlib.gzip);\nconst gzipDecompress = promisify<Buffer, Buffer>(zlib.gunzip);\n\nconst MARK_UNCOMPRESSED = Buffer.of(0);\n\nasync function compressValue(v: unknown, {\n  compressionThresholdBytes = 200,\n}: CompressOptions): Promise<Buffer> {\n  const serialised = serialiseValueBin(v);\n  if (serialised.length >= compressionThresholdBytes) {\n    const gzipped = await gzipCompress(serialised);\n    if (gzipped.length < serialised.length + 1) {\n      return gzipped;\n    }\n  }\n  return Buffer.concat([MARK_UNCOMPRESSED, serialised]);\n}\n\nasync function decompressValue(v: Buffer, {\n  allowRaw = true,\n  allowRawBuffer = false,\n}: CompressOptions): Promise<any> {\n  if (!(v instanceof Buffer)) {\n    if (allowRaw) {\n      return v; // probably an old record before compression was added\n    }\n    throw new Error('unknown compression type');\n  }\n  if (v[0] === 0x1F && v[1] === 0x8B) { // gzip \"magic number\"\n    return deserialiseValueBin(await gzipDecompress(v));\n  }\n  if (v[0] === MARK_UNCOMPRESSED[0]) {\n    return deserialiseValueBin(v.subarray(1));\n  }\n  if (allowRaw && allowRawBuffer) {\n    return v;\n  }\n  throw new Error('unknown compression type');\n}\n\nexport function compress<T extends IDable, F extends CompressableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Compressed<T, F[-1]>>,\n  options: CompressOptions = {},\n): Collection<T> {\n  return new WrappedCollection<T, F, Buffer, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<Buffer> => compressValue(v, options),\n    unwrap: (k, v): Promise<any> => decompressValue(v, options),\n  });\n}\n","import type { Collection, UpdateOptions } from '../interfaces/Collection';\nimport type { IDable } from '../interfaces/IDable';\n\ntype MigrationFuncs<T, ExtraFetchFields extends readonly (keyof T & string)[]> = {\n  [K in keyof T]?: (\n    stored: T[K] | undefined,\n    record: Readonly<Pick<T, K | ExtraFetchFields[-1]>>,\n  ) => T[K];\n};\n\nclass MigratedCollection<\n  T extends IDable,\n  ExtraFetchFields extends readonly (keyof T & string)[],\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<T>,\n    private readonly migrations: MigrationFuncs<T, ExtraFetchFields>,\n    private readonly extraFetchFields?: ExtraFetchFields,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(entry);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.baseCollection.get(\n      searchAttribute,\n      searchValue,\n      this.extendAttributes(returnAttributes)!,\n    );\n    return raw ? this.applyMigration(raw, returnAttributes) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[],\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const raws = await this.baseCollection.getAll(\n      searchAttribute!,\n      searchValue as any,\n      this.extendAttributes(returnAttributes)!,\n    );\n    return raws.map((raw) => this.applyMigration(raw, returnAttributes));\n  }\n\n  public async update<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    return this.baseCollection.update(searchAttribute, searchValue, update, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    return this.baseCollection.remove(searchAttribute, searchValue);\n  }\n\n  private extendAttributes<\n    F extends readonly (keyof T & string)[]\n  >(returnAttributes?: F): readonly (keyof T & string)[] | undefined {\n    if (returnAttributes && this.extraFetchFields) {\n      return [...returnAttributes, ...this.extraFetchFields];\n    }\n    return returnAttributes;\n  }\n\n  private applyMigration<F extends readonly (keyof T & string)[]>(\n    raw: Readonly<Pick<T, ExtraFetchFields[-1] | F[-1]>>,\n    returnAttributes?: F,\n  ): Readonly<Pick<T, F[-1]>> {\n    if (returnAttributes && !returnAttributes.some((attr) => this.migrations[attr])) {\n      return raw;\n    }\n    const result: Pick<T, F[-1]> = { ...raw };\n    const attrs = returnAttributes || Object.keys(this.migrations);\n    attrs.forEach((key: string) => {\n      const attr = key as keyof Pick<T, F[-1]>;\n      const migration = this.migrations[attr];\n      if (migration) {\n        result[attr] = migration(raw[attr], raw);\n      }\n    });\n    return result;\n  }\n}\n\nfunction migrate<T extends IDable>(\n  migrations: MigrationFuncs<T, []>,\n  baseCollection: Collection<T>,\n): Collection<T>;\n\nfunction migrate<\n  T extends IDable,\n  ExtraFetchFields extends readonly (keyof T & string)[],\n>(\n  extraFetchFields: ExtraFetchFields,\n  migrations: MigrationFuncs<T, ExtraFetchFields>,\n  baseCollection: Collection<T>,\n): Collection<T>;\n\nfunction migrate<\n  T extends IDable,\n  ExtraFetchFields extends readonly (keyof T & string)[],\n>(\n  extraFetchFields: MigrationFuncs<T, []> | ExtraFetchFields,\n  migrations: MigrationFuncs<T, ExtraFetchFields> | Collection<T>,\n  baseCollection?: Collection<T>,\n): Collection<T> {\n  if (baseCollection) {\n    return new MigratedCollection(\n      baseCollection,\n      migrations as MigrationFuncs<T, ExtraFetchFields>,\n      extraFetchFields as ExtraFetchFields,\n    );\n  }\n  return new MigratedCollection(\n    migrations as Collection<T>,\n    extraFetchFields as MigrationFuncs<T, []>,\n  );\n}\n\nexport default migrate;\n","import CollectionStorage from './CollectionStorage';\nimport WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';\nimport type Encryption from './wrappers/encryption/Encryption';\nimport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n  EncryptionOptions,\n  Encrypted,\n} from './wrappers/encrypted';\nimport { compress, Compressed, CompressOptions } from './wrappers/compressed';\nimport migrate from './wrappers/migrated';\nimport type { DB } from './interfaces/DB';\nimport type { Collection } from './interfaces/Collection';\n\nexport type {\n  DB,\n  Collection,\n  Wrapped,\n  Encryption,\n  Encrypted,\n  EncryptionOptions,\n  Compressed,\n  CompressOptions,\n};\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport { default as RedisDb } from './redis/RedisDb';\nexport { default as LruCache } from './helpers/LruCache';\nexport {\n  WrappedCollection,\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n  compress,\n  migrate,\n};\nexport {\n  default as nodeEncryptionSync,\n} from './wrappers/encryption/nodeEncryptionSync';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport RedisDb from './redis/RedisDb';\nimport PostgresDb from './postgresql/PostgresDb';\nimport type { DB } from './interfaces/DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else if (url.startsWith('redis')) {\n      dbClass = RedisDb;\n    } else if (url.startsWith('postgres')) {\n      dbClass = PostgresDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}