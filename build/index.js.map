{"version":3,"sources":["webpack://websocket-express/webpack/universalModuleDefinition","webpack://websocket-express/webpack/bootstrap","webpack://websocket-express/external \"url\"","webpack://websocket-express/external \"mongodb\"","webpack://websocket-express/./src/memory/MemoryCollection.ts","webpack://websocket-express/./src/memory/MemoryDb.ts","webpack://websocket-express/./src/mongo/MongoCollection.ts","webpack://websocket-express/./src/mongo/MongoDb.ts","webpack://websocket-express/./src/index.ts","webpack://websocket-express/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","sleep","millis","Promise","resolve","setTimeout","MemoryCollection","constructor","keys","simulatedLatency","this","data","Map","forEach","k","keyList","push","map","options","internalCheckDuplicates","set","id","JSON","stringify","internalPopulateIndices","keyName","upsert","internalGetIds","undefined","add","assign","oldValue","parse","newValue","Error","internalRemoveIndices","e","fields","all","getAll","length","ids","result","field","applyFilter","idKey","has","keyInfo","checkId","unique","v","Set","delete","size","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","getCollection","mapTables","MONGO_ID","ID","fieldNameToMongo","convertToMongo","rest","convertFromMongo","makeMongoFields","names","fieldName","MongoCollection","collection","createIndex","insertOne","updateOne","$set","findOne","projection","cursor","mFields","find","raw","MongoDb","MongoClient","client","connect","useNewUrlParser","useUnifiedTopology","CollectionStorage","dbClass","startsWith","message"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"websocket-express\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"websocket-express\"] = factory();\n\telse\n\t\troot[\"websocket-express\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"url\");","module.exports = require(\"mongodb\");","import Collection, { KeyOptions } from '../Collection';\nimport IDable from '../IDable';\nimport { DBKeys } from '../DB';\n\nfunction sleep(millis: number): Promise<void> | null {\n  if (!millis) {\n    return null;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\ntype ID = string;\n\ninterface KeyInfo<T> {\n  map: Map<T, Set<ID>>;\n  options: KeyOptions;\n}\n\nexport default class MemoryCollection<T extends IDable> implements Collection<T> {\n  private readonly data: Map<ID, string>;\n\n  private readonly keyList: (keyof T)[] = [];\n\n  private readonly keys: { [K in keyof T]?: KeyInfo<T[K]> } = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n  ) {\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      this.keyList.push(key);\n      this.keys[key] = { map: new Map(), options: keys[key]! };\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await sleep(this.simulatedLatency);\n\n    this.internalCheckDuplicates(value, true);\n    this.data.set(value.id, JSON.stringify(value));\n    this.internalPopulateIndices(value);\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    await sleep(this.simulatedLatency);\n\n    const id = this.internalGetIds(keyName, key)[0];\n    if (id === undefined) {\n      if (upsert) {\n        await this.add(Object.assign({ [keyName]: key }, value as T));\n      }\n      return;\n    }\n    const oldValue = JSON.parse(this.data.get(id)!) as T;\n    const newValue = Object.assign({}, oldValue, value);\n    if (newValue.id !== oldValue.id) {\n      throw new Error('Cannot update id');\n    }\n    this.internalRemoveIndices(oldValue);\n    try {\n      this.internalCheckDuplicates(newValue, false);\n    } catch (e) {\n      this.internalPopulateIndices(oldValue);\n      throw e;\n    }\n    this.data.set(newValue.id, JSON.stringify(newValue));\n    this.internalPopulateIndices(newValue);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.getAll(keyName, key, fields);\n    if (!all.length) {\n      return null;\n    }\n    return all[0];\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    await sleep(this.simulatedLatency);\n\n    let ids: ID[];\n    if (keyName) {\n      ids = this.internalGetIds(keyName, key!);\n    } else {\n      ids = [...this.data.keys()];\n    }\n    return ids.map((id) => applyFilter(\n      JSON.parse(this.data.get(id)!),\n      fields,\n    ));\n  }\n\n  private internalGetIds<K extends keyof T>(keyName: K, key: T[K]): ID[] {\n    if (keyName === 'id') {\n      const idKey = key as any as ID;\n      return this.data.has(idKey) ? [idKey] : [];\n    }\n    const keyInfo = this.keys[keyName];\n    if (!keyInfo) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const ids = keyInfo.map.get(key);\n    return ids ? [...ids] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(value: T, checkId: boolean): void {\n    if (checkId && this.data.has(value.id)) {\n      throw new Error('duplicate');\n    }\n    this.keyList.forEach((key) => {\n      const { map, options } = this.keys[key]!;\n      if (options.unique && map.has(value[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(value: T): void {\n    this.keyList.forEach((key) => {\n      const { map } = this.keys[key]!;\n      const v = value[key];\n      let o = map.get(v);\n      if (!o) {\n        o = new Set<ID>();\n        map.set(v, o);\n      }\n      o.add(value.id);\n    });\n  }\n\n  private internalRemoveIndices(value: T): void {\n    this.keyList.forEach((key) => {\n      const { map } = this.keys[key]!;\n      const v = value[key];\n      const o = map.get(v)!;\n      o.delete(value.id);\n      if (!o.size) {\n        map.delete(v);\n      }\n    });\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport DB, { DBKeys } from '../DB';\nimport IDable from '../IDable';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb implements DB {\n  private readonly simulatedLatency: number;\n\n  private readonly mapTables = new Map<string, MemoryCollection<any>>();\n\n  public constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MemoryCollection<T> {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n      ));\n    }\n    return this.mapTables.get(name)! as MemoryCollection<T>;\n  }\n}\n","import { Collection as MCollection, Cursor as MCursor } from 'mongodb';\nimport IDable from '../IDable';\nimport Collection from '../Collection';\nimport { DBKeys } from '../DB';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\ntype MongoT<T extends Partial<IDable>> = Omit<T, 'id'> & { _id?: T['id'] };\n\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return name;\n}\n\nfunction convertToMongo<T extends Partial<IDable>>(value: T): MongoT<T> {\n  if (!value || value[ID] === undefined) {\n    return value;\n  }\n  const { [ID]: id, ...rest } = value;\n  return { [MONGO_ID]: id, ...rest };\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: MongoT<T> | null,\n): T | null {\n  if (!value || value[MONGO_ID] === undefined) {\n    return value as T | null;\n  }\n  const { [MONGO_ID]: id, ...rest } = value;\n  return { [ID]: id, ...rest } as any;\n}\n\nfunction makeMongoFields(names?: readonly string[]): Record<string, boolean> {\n  const fields: Record<string, boolean> = {};\n  if (names) {\n    fields[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      fields[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return fields;\n}\n\nexport default class MongoCollection<T extends IDable> implements Collection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    keys: DBKeys<T> = {},\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      if (options && options.unique) {\n        collection.createIndex({ [keyName]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [keyName]: 'hashed' });\n      }\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await this.collection.insertOne(convertToMongo(value));\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    await this.collection.updateOne(\n      { [fieldNameToMongo(keyName)]: key },\n      { $set: convertToMongo(value) },\n      { upsert },\n    );\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.collection.findOne<T>(\n      { [fieldNameToMongo(keyName)]: key },\n      { projection: makeMongoFields(fields) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const result: Pick<T, F[-1]>[] = [];\n\n    let cursor: MCursor<T>;\n    const mFields = makeMongoFields(fields);\n    if (keyName) {\n      cursor = this.collection.find<T>(\n        { [fieldNameToMongo(keyName)]: key },\n        { projection: mFields },\n      );\n    } else {\n      cursor = this.collection.find<T>({}, { projection: mFields });\n    }\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n}\n","import { Db as MDb } from 'mongodb';\nimport MongoCollection from './MongoCollection';\nimport DB, { DBKeys } from '../DB';\nimport IDable from '../IDable';\n\nexport default class MongoDb implements DB {\n  private constructor(\n    private readonly db: MDb,\n  ) {}\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client.db());\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MongoCollection<T> {\n    const collection = this.db.collection(name);\n    return new MongoCollection(collection, keys);\n  }\n}\n","import CollectionStorage from './CollectionStorage';\nimport DB from './DB';\nimport Collection from './Collection';\nimport IDable from './IDable';\n\nexport type DB = DB;\nexport type Collection<T extends IDable> = Collection<T>;\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport DB from './DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}