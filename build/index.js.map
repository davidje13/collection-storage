{"version":3,"sources":["webpack://websocket-express/webpack/universalModuleDefinition","webpack://websocket-express/webpack/bootstrap","webpack://websocket-express/external \"url\"","webpack://websocket-express/external \"mongodb\"","webpack://websocket-express/./src/memory/MemoryCollection.js","webpack://websocket-express/./src/memory/MemoryDb.js","webpack://websocket-express/./src/mongo/MongoCollection.js","webpack://websocket-express/./src/mongo/MongoDb.js","webpack://websocket-express/./src/index.js","webpack://websocket-express/./src/CollectionStorage.js"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","sleep","millis","Promise","resolve","setTimeout","MemoryCollection","constructor","keys","simulatedLatency","this","data","Map","forEach","set","map","options","internalGetIds","keyName","has","keyInfo","Error","ids","internalCheckDuplicates","id","unique","internalPopulateIndices","v","Set","add","internalRemoveIndices","delete","length","[object Object]","JSON","stringify","upsert","undefined","assign","oldValue","parse","newValue","e","fields","all","getAll","result","field","applyFilter","globalDbs","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","mapTables","getCollection","MONGO_ID","ID","fieldNameToMongo","convertToMongo","rest","convertFromMongo","makeMongoFields","names","fieldName","MongoCollection","collection","createIndex","insertOne","updateOne","$set","findOne","projection","cursor","mFields","find","raw","push","MongoDb","MongoClient","then","client","connect","useNewUrlParser","__webpack_exports__","MemoryDb_MemoryDb","MongoDb_MongoDb","CollectionStorage","dbClass","startsWith","message"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"websocket-express\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"websocket-express\"] = factory();\n\telse\n\t\troot[\"websocket-express\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"url\");","module.exports = require(\"mongodb\");","function sleep(millis) {\n  if (!millis) {\n    return null;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve) => setTimeout(resolve, millis));\n}\n\nfunction applyFilter(data, fields) {\n  if (!fields) {\n    return data;\n  }\n  const result = {};\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\nexport default class MemoryCollection {\n  constructor(keys = {}, simulatedLatency = 0) {\n    this.data = new Map();\n    this.keys = new Map();\n    this.simulatedLatency = simulatedLatency;\n\n    Object.keys(keys).forEach((key) => {\n      this.keys.set(key, { map: new Map(), options: keys[key] });\n    });\n  }\n\n  internalGetIds(keyName, key) {\n    if (keyName === 'id') {\n      return this.data.has(key) ? [key] : [];\n    }\n    const keyInfo = this.keys.get(keyName);\n    if (!keyInfo) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const ids = keyInfo.map.get(key);\n    return ids ? [...ids] : []; // convert set to array\n  }\n\n  internalCheckDuplicates(value) {\n    if (this.data.has(value.id)) {\n      throw new Error('duplicate');\n    }\n    this.keys.forEach(({ map, options }, key) => {\n      if (options.unique && map.has(value[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  internalPopulateIndices(value) {\n    this.keys.forEach(({ map }, key) => {\n      const v = value[key];\n      let o = map.get(v);\n      if (!o) {\n        o = new Set();\n        map.set(v, o);\n      }\n      o.add(value.id);\n    });\n  }\n\n  internalRemoveIndices(value) {\n    this.keys.forEach(({ map }, key) => {\n      const v = value[key];\n      const o = map.get(v);\n      o.delete(value.id);\n      if (!o.length) {\n        map.delete(v);\n      }\n    });\n  }\n\n  async add(value) {\n    await sleep(this.simulatedLatency);\n\n    this.internalCheckDuplicates(value);\n    this.data.set(value.id, JSON.stringify(value));\n    this.internalPopulateIndices(value);\n  }\n\n  async update(keyName, key, value, { upsert = false } = {}) {\n    await sleep(this.simulatedLatency);\n\n    const id = this.internalGetIds(keyName, key)[0];\n    if (id === undefined) {\n      if (upsert) {\n        await this.add(Object.assign({ [keyName]: key }, value));\n      }\n      return;\n    }\n    const oldValue = JSON.parse(this.data.get(id));\n    const newValue = Object.assign({}, oldValue, value);\n    if (newValue.id !== oldValue.id) {\n      throw new Error('Cannot update id');\n    }\n    this.internalRemoveIndices(oldValue);\n    try {\n      this.internalCheckDuplicates(value);\n    } catch (e) {\n      this.internalPopulateIndices(oldValue);\n      throw e;\n    }\n    this.data.set(newValue.id, JSON.stringify(newValue));\n    this.internalPopulateIndices(newValue);\n  }\n\n  async get(keyName, key, fields = null) {\n    const all = await this.getAll(keyName, key, fields);\n    if (!all.length) {\n      return null;\n    }\n    return all[0];\n  }\n\n  async getAll(keyName, key, fields = null) {\n    await sleep(this.simulatedLatency);\n\n    let ids;\n    if (keyName) {\n      ids = this.internalGetIds(keyName, key);\n    } else {\n      ids = [...this.data.keys()];\n    }\n    return ids.map((id) => applyFilter(JSON.parse(this.data.get(id)), fields));\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\n\nconst globalNamespace = 'collectionStorageInMemory';\n\nif (!global[globalNamespace]) {\n  global[globalNamespace] = new Map();\n}\n\nconst globalDbs = global[globalNamespace];\n\nexport default class MemoryDb {\n  static connect(url) {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name);\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n    this.mapTables = new Map();\n  }\n\n  getCollection(name, keys) {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n      ));\n    }\n    return this.mapTables.get(name);\n  }\n}\n","const MONGO_ID = '_id';\nconst ID = 'id';\n\nfunction fieldNameToMongo(name) {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return name;\n}\n\nfunction convertToMongo(value) {\n  if (!value || value[ID] === undefined) {\n    return value;\n  }\n  const { [ID]: id, ...rest } = value;\n  return { [MONGO_ID]: id, ...rest };\n}\n\nfunction convertFromMongo(value) {\n  if (!value || value[MONGO_ID] === undefined) {\n    return value;\n  }\n  const { [MONGO_ID]: id, ...rest } = value;\n  return { [ID]: id, ...rest };\n}\n\nfunction makeMongoFields(names) {\n  const fields = {};\n  if (names) {\n    fields[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      fields[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return fields;\n}\n\nexport default class MongoCollection {\n  constructor(collection, keys = {}) {\n    this.collection = collection;\n\n    Object.keys(keys).forEach((keyName) => {\n      const options = keys[keyName];\n      if (options.unique) {\n        collection.createIndex({ [keyName]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [keyName]: 'hashed' });\n      }\n    });\n  }\n\n  async add(value) {\n    await this.collection.insertOne(convertToMongo(value));\n  }\n\n  async update(keyName, key, value, { upsert = false } = {}) {\n    await this.collection.updateOne(\n      { [fieldNameToMongo(keyName)]: key },\n      { $set: convertToMongo(value) },\n      { upsert },\n    );\n  }\n\n  async get(keyName, key, fields = null) {\n    const raw = await this.collection.findOne(\n      { [fieldNameToMongo(keyName)]: key },\n      { projection: makeMongoFields(fields) },\n    );\n    return convertFromMongo(raw);\n  }\n\n  async getAll(keyName, key, fields = null) {\n    const result = [];\n\n    let cursor;\n    const mFields = makeMongoFields(fields);\n    if (keyName) {\n      cursor = await this.collection.find(\n        { [fieldNameToMongo(keyName)]: key },\n        { projection: mFields },\n      );\n    } else {\n      cursor = await this.collection.find({}, { projection: mFields });\n    }\n    await cursor.forEach((raw) => result.push(convertFromMongo(raw)));\n\n    return result;\n  }\n}\n","import MongoCollection from './MongoCollection';\n\nexport default class MongoDb {\n  static async connect(url) {\n    const { MongoClient } = await import('mongodb');\n    const client = await MongoClient.connect(url, { useNewUrlParser: true });\n    return new MongoDb(client.db());\n  }\n\n  constructor(db) {\n    this.db = db;\n  }\n\n  getCollection(name, keys) {\n    const collection = this.db.collection(name);\n    return new MongoCollection(collection, keys);\n  }\n}\n","import CollectionStorage from './CollectionStorage';\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\n\nexport default class CollectionStorage {\n  static async connect(url) {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}