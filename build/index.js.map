{"version":3,"sources":["webpack://websocket-express/webpack/universalModuleDefinition","webpack://websocket-express/webpack/bootstrap","webpack://websocket-express/external \"crypto\"","webpack://websocket-express/external \"mongodb\"","webpack://websocket-express/external \"url\"","webpack://websocket-express/external \"ioredis\"","webpack://websocket-express/./src/helpers/serialiser.ts","webpack://websocket-express/./src/memory/MemoryCollection.ts","webpack://websocket-express/./src/memory/MemoryDb.ts","webpack://websocket-express/./src/mongo/MongoCollection.ts","webpack://websocket-express/./src/mongo/MongoDb.ts","webpack://websocket-express/./src/redis/helpers.ts","webpack://websocket-express/./src/redis/scripts.ts","webpack://websocket-express/./src/redis/RedisCollection.ts","webpack://websocket-express/./src/redis/RedisDb.ts","webpack://websocket-express/./src/wrappers/WrappedCollection.ts","webpack://websocket-express/./src/helpers/LruCache.ts","webpack://websocket-express/./src/wrappers/encryption/nodeEncryptionSync.ts","webpack://websocket-express/./src/wrappers/encrypted.ts","webpack://websocket-express/./src/index.ts","webpack://websocket-express/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","serialiseValue","Buffer","toString","JSON","stringify","deserialiseValue","type","data","substr","from","parse","Error","serialiseRecord","record","result","keys","forEach","k","deserialiseRecord","v","sleep","millis","Promise","resolve","setTimeout","MemoryCollection","constructor","simulatedLatency","this","Map","map","options","serialised","internalCheckDuplicates","set","id","internalPopulateIndices","keyName","upsert","undefined","sId","internalGetSerialisedIds","add","assign","oldSerialised","oldValue","newValue","newSerialised","internalRemoveIndices","e","fields","all","getAll","length","sIds","field","applyFilter","delete","sKey","has","keyInfo","serialisedValue","checkId","entries","unique","Set","size","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","getCollection","mapTables","MONGO_ID","ID","convertToMongo","converted","rest","MBinary","_bsontype","convertFromMongo","buffer","makeMongoFields","names","fieldName","fieldNameToMongo","MongoCollection","collection","createIndex","insertOne","updateOne","$set","findOne","projection","cursor","mFields","find","raw","push","deleteMany","deletedCount","MongoDb","MongoClient","client","connect","useNewUrlParser","useUnifiedTopology","minifyLuaScript","lines","argNames","combined","ln","trim","join","replace","RegExp","SCRIPT_ADD_ITEM","SCRIPT_UPDATE_ITEM","SCRIPT_REMOVE_ITEM","makeIndexKeys","partialSerialisedValue","filter","prefix","parseItem","item","f","itemHasContent","values","some","RedisCollection","keyPrefix","keyPrefixes","uniqueKeys","nonUniqueKeys","defineCommand","lua","defineAllScripts","internalAdd","patchSerialised","getAndWatchBySerialisedKey","rKey","makeKey","watch","rawByKeyKeepWatches","diff","flat","patchUniqueKeys","patchNonUniqueKeys","oldUniqueKeys","oldNonUniqueKeys","keyCount","updated","multi","update","exec","unwatch","getByKeysKeepWatches","cut","indexedKeys","items","pipeline","remove","serialisedId","checkWatch","Boolean","serialisedIds","results","async","commands","multiExec","exists","hmget","hgetall","parsed","keyAddress","smembers","RedisDb","default","RedisStatic","lazyConnect","hasAnyField","WrappedCollection","baseCollection","wrapper","entry","wrapAll","includes","unwrapAll","extra","preRemove","processed","preWrap","allFields","wrap","preUnwrap","unwrap","LruCache","capacity","storage","flush","next","ALG","ALG_BUF","nodeEncryptionSync","encrypt","iv","crypto","randomBytes","cipher","createCipheriv","part","final","concat","decrypt","slice","equals","encrypted","decipher","createDecipheriv","decrypted","generateKey","createSecretKey","serialiseKey","export","deserialiseKey","makeEncrypter","encryptByKey","cr","encryptByRecord","keyCollection","cacheSize","cache","loadKey","generateIfNeeded","cached","removeKey","encryptByRecordWithMasterKey","sMasterKey","keyEnc","CollectionStorage","dbClass","startsWith","message"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"websocket-express\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"websocket-express\"] = factory();\n\telse\n\t\troot[\"websocket-express\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"crypto\");","module.exports = require(\"mongodb\");","module.exports = require(\"url\");","module.exports = require(\"ioredis\");","export function serialiseValue(\n  value: unknown,\n): string {\n  if (value instanceof Buffer) {\n    return `B${value.toString('base64')}`;\n  }\n  return `J${JSON.stringify(value)}`;\n}\n\nexport function deserialiseValue(\n  value: string,\n): unknown {\n  const type = value[0];\n  const data = value.substr(1);\n  if (type === 'B') {\n    return Buffer.from(data, 'base64');\n  }\n  if (type === 'J') {\n    return JSON.parse(data);\n  }\n  throw new Error(`Unknown data type ${type}`);\n}\n\nexport function serialiseRecord<T>(\n  record: T,\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  Object.keys(record).forEach((k) => {\n    result[k] = serialiseValue((record as any)[k]);\n  });\n  return result;\n}\n\nexport function deserialiseRecord(\n  record: Record<string, string | null>,\n): Record<string, unknown> {\n  const result: Record<string, any> = {};\n  Object.keys(record).forEach((k) => {\n    const v = record[k];\n    if (v) {\n      result[k] = deserialiseValue(v);\n    }\n  });\n  return result;\n}\n","import Collection, { KeyOptions } from '../interfaces/Collection';\nimport IDable from '../interfaces/IDable';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\n\nfunction sleep(millis: number): Promise<void> | null {\n  if (!millis) {\n    return null;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\ninterface KeyInfo {\n  map: Map<string, Set<string>>;\n  options: KeyOptions;\n}\n\nexport default class MemoryCollection<T extends IDable> implements Collection<T> {\n  private readonly data: Map<string, Record<string, string>>;\n\n  private readonly keys: { [K in keyof T]?: KeyInfo } = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n  ) {\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      this.keys[key] = { map: new Map(), options: keys[key]! };\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await sleep(this.simulatedLatency);\n\n    const serialised = serialiseRecord(value);\n    this.internalCheckDuplicates(serialised, true);\n    this.data.set(serialised.id, serialised);\n    this.internalPopulateIndices(serialised);\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    if (upsert && keyName !== 'id' && value.id === undefined) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    await sleep(this.simulatedLatency);\n\n    const sId = this.internalGetSerialisedIds(keyName, key)[0];\n    if (sId === undefined) {\n      if (upsert) {\n        await this.add(Object.assign({ [keyName]: key }, value as T));\n      }\n      return;\n    }\n    const oldSerialised = this.data.get(sId)!;\n    const oldValue = deserialiseRecord(oldSerialised) as T;\n    const newValue = Object.assign({}, oldValue, value);\n    if (newValue.id !== oldValue.id) {\n      throw new Error('Cannot update id');\n    }\n    const newSerialised = serialiseRecord(newValue);\n    this.internalRemoveIndices(oldSerialised);\n    try {\n      this.internalCheckDuplicates(newSerialised, false);\n    } catch (e) {\n      this.internalPopulateIndices(oldSerialised);\n      throw e;\n    }\n    this.data.set(newSerialised.id, newSerialised);\n    this.internalPopulateIndices(newSerialised);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.getAll(keyName, key, fields);\n    if (!all.length) {\n      return null;\n    }\n    return all[0];\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    await sleep(this.simulatedLatency);\n\n    let sIds: string[];\n    if (keyName) {\n      sIds = this.internalGetSerialisedIds(keyName, key!);\n    } else {\n      sIds = [...this.data.keys()];\n    }\n    return sIds.map((sId) => applyFilter(\n      deserialiseRecord(this.data.get(sId)!) as T,\n      fields,\n    ));\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    await sleep(this.simulatedLatency);\n\n    const sIds = this.internalGetSerialisedIds(key, value);\n    sIds.forEach((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      this.internalRemoveIndices(oldSerialised);\n      this.data.delete(sId);\n    });\n\n    return sIds.length;\n  }\n\n  private internalGetSerialisedIds<K extends keyof T>(\n    keyName: K,\n    key: T[K],\n  ): string[] {\n    const sKey = serialiseValue(key);\n    if (keyName === 'id') {\n      return this.data.has(sKey) ? [sKey] : [];\n    }\n    const keyInfo = this.keys[keyName];\n    if (!keyInfo) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const sIds = keyInfo.map.get(sKey);\n    return sIds ? [...sIds] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(\n    serialisedValue: Record<string, string>,\n    checkId: boolean,\n  ): void {\n    if (checkId && this.data.has(serialisedValue.id)) {\n      throw new Error('duplicate');\n    }\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map, options } = keyInfo!;\n      if (options.unique && map.has(serialisedValue[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map } = keyInfo!;\n      const v = serialisedValue[key];\n      let o = map.get(v);\n      if (!o) {\n        o = new Set<string>();\n        map.set(v, o);\n      }\n      o.add(serialisedValue.id);\n    });\n  }\n\n  private internalRemoveIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map } = keyInfo!;\n      const v = serialisedValue[key];\n      const o = map.get(v)!;\n      o.delete(serialisedValue.id);\n      if (!o.size) {\n        map.delete(v);\n      }\n    });\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb implements DB {\n  private readonly simulatedLatency: number;\n\n  private readonly mapTables = new Map<string, MemoryCollection<any>>();\n\n  public constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MemoryCollection<T> {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n      ));\n    }\n    return this.mapTables.get(name)! as MemoryCollection<T>;\n  }\n}\n","import {\n  Collection as MCollection,\n  Cursor as MCursor,\n  Binary as MBinary,\n} from 'mongodb';\nimport IDable from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\ntype MongoT<T extends Partial<IDable>> = Omit<T, 'id'> & { _id?: T['id'] };\n\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return name;\n}\n\nfunction convertToMongo<T extends Partial<IDable>>(value: T): MongoT<T> {\n  let converted: MongoT<T>;\n  // keys\n  if (value[ID] === undefined) {\n    converted = Object.assign({}, value);\n  } else {\n    const { [ID]: id, ...rest } = value;\n    converted = { [MONGO_ID]: id, ...rest };\n  }\n  // values\n  Object.keys(converted).forEach((k) => {\n    const v = (converted as any)[k];\n    if (v instanceof Buffer) {\n      (converted as any)[k] = new MBinary(v);\n    }\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype) {\n      throw new Error('Must use Buffer to provide binary data');\n    }\n  });\n  return converted;\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: MongoT<T> | null,\n): T | null {\n  if (!value) {\n    return null;\n  }\n  let converted: T;\n  // keys\n  if (value[MONGO_ID] === undefined) {\n    converted = Object.assign({}, value) as T;\n  } else {\n    const { [MONGO_ID]: id, ...rest } = value;\n    converted = { [ID]: id, ...rest } as any;\n  }\n  // values\n  Object.keys(converted).forEach((k) => {\n    const v = (converted as any)[k];\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype === 'Binary') {\n      (converted as any)[k] = v.buffer;\n    }\n  });\n  return converted;\n}\n\nfunction makeMongoFields(names?: readonly string[]): Record<string, boolean> {\n  const fields: Record<string, boolean> = {};\n  if (names) {\n    fields[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      fields[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return fields;\n}\n\nexport default class MongoCollection<T extends IDable> implements Collection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    keys: DBKeys<T> = {},\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      if (options && options.unique) {\n        collection.createIndex({ [keyName]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [keyName]: 'hashed' });\n      }\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await this.collection.insertOne(convertToMongo(value));\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    if (upsert && keyName !== 'id' && value.id === undefined) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    await this.collection.updateOne(\n      convertToMongo({ [keyName]: key }),\n      { $set: convertToMongo(value) },\n      { upsert },\n    );\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.collection.findOne<T>(\n      convertToMongo({ [keyName]: key }),\n      { projection: makeMongoFields(fields) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const result: Pick<T, F[-1]>[] = [];\n\n    let cursor: MCursor<T>;\n    const mFields = makeMongoFields(fields);\n    if (keyName) {\n      cursor = this.collection.find<T>(\n        convertToMongo({ [keyName]: key }),\n        { projection: mFields },\n      );\n    } else {\n      cursor = this.collection.find<T>({}, { projection: mFields });\n    }\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    const result = await this.collection.deleteMany(\n      convertToMongo({ [key]: value }),\n    );\n    return result.deletedCount || 0;\n  }\n}\n","import { Db as MDb } from 'mongodb';\nimport MongoCollection from './MongoCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nexport default class MongoDb implements DB {\n  private constructor(\n    private readonly db: MDb,\n  ) {}\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client.db());\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MongoCollection<T> {\n    const collection = this.db.collection(name);\n    return new MongoCollection(collection, keys);\n  }\n}\n","import { Redis, Pipeline, MultiOptions } from 'ioredis';\n\n// Thanks, https://stackoverflow.com/a/50014868/1180785\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U: never;\n\ntype PipelineVersions<I> = {\n  [K in keyof I]: (...args: ArgumentTypes<I[K]>) => Pipeline & PipelineVersions<I>;\n};\n\ninterface RedisWithExtendedPipeline<I> extends Redis {\n  multi(commands?: string[][], options?: MultiOptions): Pipeline & PipelineVersions<I>;\n  multi(options: { pipeline: false }): Promise<string>;\n}\n\nexport type ExtendedRedis<I> = I & RedisWithExtendedPipeline<I>;\n\nexport async function multiExec(\n  client: Redis,\n  commands: string[][],\n): Promise<[unknown, any][] | null> {\n  if (!commands.length) {\n    return [];\n  }\n  return client.multi(commands).exec();\n}\n\nexport function minifyLuaScript(\n  lines: string[],\n  ...argNames: string[]\n): string {\n  let combined = lines.map((ln) => ln.trim()).join(' ');\n  argNames.forEach((name, i) => {\n    combined = combined.replace(new RegExp(`\\\\$${name}\\\\b`, 'g'), `ARGV[${i + 1}]`);\n  });\n  return combined;\n}\n","import { Redis } from 'ioredis';\nimport { minifyLuaScript, ExtendedRedis } from './helpers';\n\nexport interface ScriptExtensions {\n  add(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  update(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  remove(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n}\n\n// KEYS = [id, ...uniqueKeys, ...nonUniqueKeys]\nconst SCRIPT_ADD_ITEM = minifyLuaScript([\n  'if redis.call(\"exists\",KEYS[1])==1 then',\n  '  return 0',\n  'end',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 2))',\n  'for k=2,#KEYS do',\n  '  redis.call(\"sadd\",KEYS[k],ARGV[3])',\n  'end',\n  'return 1',\n], 'uniqueKeyCount');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE_ITEM = minifyLuaScript([\n  'local tkc=tonumber($totalKeyCount)',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 4))',\n  'for k=1,tkc do',\n  '  redis.call(\"smove\",KEYS[1+tkc+k],KEYS[1+k],$id)',\n  'end',\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...keys]\nconst SCRIPT_REMOVE_ITEM = minifyLuaScript([\n  'redis.call(\"del\",KEYS[1])',\n  'for k=2,#KEYS do',\n  '  redis.call(\"srem\",KEYS[k],$id)',\n  'end',\n], 'id');\n\nexport default function defineAllScripts(\n  client: Redis,\n): ExtendedRedis<ScriptExtensions> {\n  client.defineCommand('add', { lua: SCRIPT_ADD_ITEM });\n  client.defineCommand('update', { lua: SCRIPT_UPDATE_ITEM });\n  client.defineCommand('remove', { lua: SCRIPT_REMOVE_ITEM });\n\n  return client as ExtendedRedis<ScriptExtensions>;\n}\n","import { Redis } from 'ioredis';\nimport IDable from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\nimport { multiExec, ExtendedRedis } from './helpers';\nimport defineAllScripts, { ScriptExtensions } from './scripts';\n\ninterface Key<T> {\n  key: keyof T & string;\n  prefix: string;\n}\n\nfunction makeIndexKeys(\n  keys: Key<any>[],\n  partialSerialisedValue: Record<string, string | null>,\n): string[] {\n  return keys\n    .filter(({ key }) => partialSerialisedValue[key])\n    .map(({ key, prefix }) => `${prefix}:${partialSerialisedValue[key]}`);\n}\n\nfunction parseItem(\n  item: (string | null)[] | Record<string, string | null>,\n  fields?: readonly string[],\n): Record<string, string | null> {\n  if (!fields) {\n    return item as any;\n  }\n  const result: Record<string, string | null> = {};\n  for (let f = 0; f < fields.length; f += 1) {\n    result[fields[f]] = (item as any)[f];\n  }\n  return result;\n}\n\nfunction itemHasContent(item: Record<string, string | null>): boolean {\n  return Object.values(item).some((v) => (v !== null));\n}\n\nexport default class RedisCollection<T extends IDable> implements Collection<T> {\n  private readonly client: ExtendedRedis<ScriptExtensions>;\n\n  private readonly keyPrefixes: { [K in keyof T]?: string } = {};\n\n  private readonly keys: Key<T>[] = [];\n\n  private readonly uniqueKeys: Key<T>[] = [];\n\n  private readonly nonUniqueKeys: Key<T>[] = [];\n\n  public constructor(\n    client: Redis,\n    private readonly prefix: string,\n    keys: DBKeys<T> = {},\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      const keyPrefix = `${prefix}-${key}`;\n      this.keyPrefixes[key] = keyPrefix;\n      const keyInfo = { key, prefix: keyPrefix };\n      this.keys.push(keyInfo);\n      if (keys[key]!.unique) {\n        this.uniqueKeys.push(keyInfo);\n      } else {\n        this.nonUniqueKeys.push(keyInfo);\n      }\n    });\n\n    this.client = defineAllScripts(client);\n  }\n\n  public async add(value: T): Promise<void> {\n    const added = await this.internalAdd(serialiseRecord(value), false);\n    if (!added) {\n      throw new Error('duplicate');\n    }\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    const { id, ...patchSerialised } = serialiseRecord(value);\n    const sKey = serialiseValue(key);\n    if (upsert && keyName !== 'id' && !id) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    try {\n      const sId = (await this.getAndWatchBySerialisedKey(keyName, sKey))[0];\n      if (sId) {\n        if (id && id !== sId) {\n          throw new Error('Cannot update id');\n        }\n      } else if (!upsert) {\n        return;\n      }\n      const rKey = this.makeKey(sId || id);\n      await this.client.watch(rKey);\n      const oldSerialised = sId && await this.rawByKeyKeepWatches(\n        sId,\n        this.keys.map((k) => k.key).filter((k) => patchSerialised[k]),\n      );\n      if (!oldSerialised) {\n        if (upsert) {\n          await this.internalAdd(\n            { id, [keyName]: sKey, ...patchSerialised },\n            true,\n          );\n        }\n        return;\n      }\n      Object.keys(patchSerialised).forEach((k) => {\n        if (oldSerialised[k] === patchSerialised[k]) {\n          delete patchSerialised[k];\n          delete oldSerialised[k];\n        }\n      });\n      const diff = Object.entries(patchSerialised).flat();\n      if (!diff.length) {\n        return; // nothing changed\n      }\n      const patchUniqueKeys = makeIndexKeys(this.uniqueKeys, patchSerialised);\n      const patchNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, patchSerialised);\n      const oldUniqueKeys = makeIndexKeys(this.uniqueKeys, oldSerialised);\n      const oldNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, oldSerialised);\n      if (\n        oldUniqueKeys.length !== patchUniqueKeys.length ||\n        oldNonUniqueKeys.length !== patchNonUniqueKeys.length\n      ) {\n        throw new Error('unexpected key mismatch with old value');\n      }\n      const keyCount = 1 + (patchUniqueKeys.length + patchNonUniqueKeys.length) * 2;\n      const params = [\n        rKey,\n        ...patchUniqueKeys,\n        ...patchNonUniqueKeys,\n        ...oldUniqueKeys,\n        ...oldNonUniqueKeys,\n        patchUniqueKeys.length,\n        patchUniqueKeys.length + patchNonUniqueKeys.length,\n        sId,\n        ...diff,\n      ];\n      const updated = await this.client\n        .multi()\n        .update(keyCount, params)\n        .exec();\n      if (!updated) {\n        throw new Error('rollback');\n      }\n      if (!updated[0][1]) {\n        throw new Error('duplicate');\n      }\n    } finally {\n      await this.client.unwatch();\n    }\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const sKey = serialiseValue(key);\n    try {\n      const sId = (await this.getAndWatchBySerialisedKey(keyName, sKey))[0];\n      if (sId === undefined) {\n        return null;\n      }\n      const results = await this.getByKeysKeepWatches([sId], fields);\n      return results[0] || null;\n    } finally {\n      await this.client.unwatch();\n    }\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    try {\n      let sIds: string[];\n      if (keyName) {\n        const sKey = serialiseValue(key);\n        sIds = await this.getAndWatchBySerialisedKey(keyName, sKey);\n      } else {\n        sIds = await this.client.keys(this.makeKey('*'));\n        const cut = this.prefix.length + 1;\n        sIds = sIds.map((v) => v.substr(cut));\n      }\n      return await this.getByKeysKeepWatches(sIds, fields);\n    } finally {\n      await this.client.unwatch();\n    }\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    const sKey = serialiseValue(value);\n    const indexedKeys = this.keys.map((k) => k.key);\n    indexedKeys.push('id');\n\n    try {\n      const sIds = await this.getAndWatchBySerialisedKey(key, sKey);\n      const items = (await Promise.all(\n        sIds.map((sId) => this.rawByKeyKeepWatches(sId, indexedKeys)),\n      )).filter(<T>(item?: T): item is T => (item !== undefined));\n\n      if (items.length === 0) {\n        return 0;\n      }\n\n      const pipeline = this.client.multi();\n      items.forEach((item) => {\n        const keys = makeIndexKeys(this.keys, item);\n        pipeline.remove(\n          1 + keys.length,\n          this.makeKey(item.id!),\n          ...keys,\n          item.id!,\n        );\n      });\n      await pipeline.exec();\n      return items.length;\n    } finally {\n      await this.client.unwatch();\n    }\n  }\n\n  private makeKey(serialisedId: string): string {\n    return `${this.prefix}:${serialisedId}`;\n  }\n\n  private async internalAdd(\n    { id, ...serialised }: Record<string, string>,\n    checkWatch: boolean,\n  ): Promise<boolean> {\n    const uniqueKeys = makeIndexKeys(this.uniqueKeys, serialised);\n    const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, serialised);\n\n    const keyCount = 1 + uniqueKeys.length + nonUniqueKeys.length;\n    const params = [\n      this.makeKey(id),\n      ...uniqueKeys,\n      ...nonUniqueKeys,\n      uniqueKeys.length,\n      'id', // ID is always first in flattened key/value pairs\n      id,\n      ...Object.entries(serialised).flat(),\n    ];\n\n    if (!checkWatch) {\n      return Boolean(await this.client.add(keyCount, ...params));\n    }\n\n    const result = await this.client\n      .multi()\n      .add(keyCount, ...params)\n      .exec();\n    if (!result) {\n      throw new Error('rollback');\n    }\n    return Boolean(result[0][1]);\n  }\n\n  private async getByKeysKeepWatches<F extends readonly (keyof T & string)[]>(\n    serialisedIds: string[],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const results = await multiExec(\n      this.client,\n      serialisedIds\n        .map((sId) => this.makeKey(sId))\n        .map((k) => (fields ? ['hmget', k, ...fields] : ['hgetall', k])),\n    );\n    if (!results) {\n      throw new Error('rollback');\n    }\n    return results\n      .map(([, item]: [unknown, any]) => parseItem(item, fields))\n      .filter(itemHasContent)\n      .map(deserialiseRecord) as T[];\n  }\n\n  private async rawByKeyKeepWatches(\n    serialisedId: string,\n    fields?: readonly (keyof T & string)[],\n  ): Promise<Record<string, string | null> | undefined> {\n    const key = this.makeKey(serialisedId);\n    let item;\n    if (fields) {\n      if (!fields.length) {\n        // just check existence\n        const exists = await this.client.exists(key);\n        return exists ? {} : undefined;\n      }\n      item = await this.client.hmget(key, ...fields);\n    } else {\n      item = await this.client.hgetall(key);\n    }\n    const parsed = parseItem(item, fields);\n    return itemHasContent(parsed) ? parsed : undefined;\n  }\n\n  private async getAndWatchBySerialisedKey(\n    keyName: keyof T,\n    serialisedValue: string,\n  ): Promise<string[]> {\n    if (keyName === 'id') {\n      return [serialisedValue];\n    }\n    const keyPrefix = this.keyPrefixes[keyName];\n    if (!keyPrefix) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const keyAddress = `${keyPrefix}:${serialisedValue}`;\n    await this.client.watch(keyAddress);\n    return this.client.smembers(keyAddress);\n  }\n}\n","import { Redis } from 'ioredis';\nimport RedisCollection from './RedisCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nexport default class RedisDb implements DB {\n  private constructor(\n    private readonly client: Redis,\n  ) {}\n\n  public static async connect(url: string): Promise<RedisDb> {\n    const { default: RedisStatic } = await import('ioredis');\n    const client = new RedisStatic(url, { lazyConnect: true });\n    await client.connect();\n    return new RedisDb(client);\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): RedisCollection<T> {\n    return new RedisCollection(this.client, name, keys);\n  }\n}\n","import IDable from '../interfaces/IDable';\nimport Collection, { UpdateOptions } from '../interfaces/Collection';\n\nexport type Wrapped<T extends IDable, WF extends keyof T, W> = {\n  [K in keyof T]: K extends 'id' ? T[K] : K extends WF ? W : T[K];\n};\n\nexport interface Wrapper<T extends IDable, K extends keyof T, W, E> {\n  wrap: (\n    key: K,\n    value: T[K],\n    processed: E,\n  ) => Promise<W> | W;\n\n  unwrap: (\n    key: K,\n    value: W,\n    processed: E,\n  ) => Promise<T[K]> | T[K];\n\n  preWrap?: (\n    record: Readonly<Partial<T>>,\n  ) => Promise<E> | E;\n\n  preUnwrap?: (\n    record: Readonly<Partial<Wrapped<T, K, W>>>,\n  ) => Promise<E> | E;\n\n  preRemove?: (\n    record: Readonly<Pick<Wrapped<T, K, W>, 'id'>>,\n  ) => Promise<void> | void;\n}\n\nfunction hasAnyField(value: object, fields: readonly string[]): boolean {\n  return fields\n    .some((field) => Object.prototype.hasOwnProperty.call(value, field));\n}\n\nexport default class WrappedCollection<\n  T extends IDable,\n  WF extends readonly (keyof Omit<T, 'id'> & string)[],\n  W,\n  E,\n  Inner extends Wrapped<T, WF[-1], W> = Wrapped<T, WF[-1], W>\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<Inner>,\n    private readonly fields: WF,\n    private readonly wrapper: Wrapper<T, WF[-1], W, E>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(await this.wrapAll(entry));\n  }\n\n  public async get<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key: K,\n    value: T[K] & Inner[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.get(key, value, fields!);\n    return raw ? this.unwrapAll(raw, { [key]: value }) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key?: K,\n    value?: T[K] & Inner[NonNullable<K>],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (key !== undefined && this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.getAll(key!, value!, fields!);\n    const extra = (key !== undefined) ? { [key]: value } : undefined;\n    return Promise.all(raw.map((v) => this.unwrapAll(v, extra)));\n  }\n\n  public async update<K extends keyof T & keyof Inner & string>(\n    key: K,\n    value: T[K] & Inner[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot update by encrypted value');\n    }\n    const converted = await this.wrapAll(update, { [key]: value });\n    return this.baseCollection.update(key, value, converted, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K] & Inner[K],\n  ): Promise<number> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot remove by encrypted value');\n    }\n    if (!this.wrapper.preRemove) {\n      return this.baseCollection.remove(key, value);\n    }\n\n    const items = await this.baseCollection.getAll(key, value, ['id']);\n    await Promise.all(items.map(async (item) => {\n      await this.wrapper.preRemove!(item);\n      await this.baseCollection.remove('id', item.id);\n    }));\n    return items.length;\n  }\n\n  private async wrapAll(\n    v: Readonly<T>,\n    extra?: object,\n  ): Promise<Inner>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>> {\n    let processed: E;\n    if (this.wrapper.preWrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? Object.assign({}, extra, v) : v;\n      processed = await this.wrapper.preWrap(allFields);\n    }\n    const converted = Object.assign({}, v) as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.wrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n\n  private async unwrapAll(\n    v: Readonly<Inner>,\n    extra?: object,\n  ): Promise<T>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>> {\n    let processed: E;\n    if (this.wrapper.preUnwrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? Object.assign({}, extra, v) : v;\n      processed = await this.wrapper.preUnwrap(allFields as any);\n    }\n    const converted = Object.assign({}, v) as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.unwrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n}\n","export default class LruCache<K, V> {\n  private readonly storage = new Map<K, V>();\n\n  public constructor(\n    private readonly capacity: number,\n  ) {}\n\n  public set(key: K, value: V): void {\n    this.storage.delete(key);\n    this.storage.set(key, value);\n    this.flush();\n  }\n\n  public get(key: K): V | undefined {\n    const value = this.storage.get(key);\n    if (this.storage.delete(key)) {\n      this.storage.set(key, value!);\n    }\n    return value;\n  }\n\n  public remove(key: K): void {\n    this.storage.delete(key);\n  }\n\n  private flush(): void {\n    while (this.storage.size > this.capacity) {\n      this.storage.delete(this.storage.keys().next().value);\n    }\n  }\n}\n","import crypto, { KeyObject } from 'crypto';\nimport Encryption from './Encryption';\n\nconst ALG = 'aes-256-cbc';\nconst ALG_BUF = Buffer.from(`${ALG}:`, 'utf8');\nconst IV_LEN = 16;\n\nconst nodeEncryptionSync: Encryption<Buffer, KeyObject, Buffer> = {\n  encrypt: (key: KeyObject, v: string): Buffer => {\n    const iv = crypto.randomBytes(IV_LEN);\n    const cipher = crypto.createCipheriv(ALG, key, iv);\n    const part = cipher.update(v, 'utf8');\n    const final = cipher.final();\n    return Buffer.concat([ALG_BUF, iv, part, final]);\n  },\n\n  decrypt: (key: KeyObject, v: Buffer): string => {\n    if (!v.slice(0, ALG_BUF.length).equals(ALG_BUF)) {\n      throw new Error('Unknown encryption algorithm');\n    }\n\n    const iv = v.slice(ALG_BUF.length, ALG_BUF.length + IV_LEN);\n    const encrypted = v.slice(ALG_BUF.length + IV_LEN);\n\n    const decipher = crypto.createDecipheriv(ALG, key as any, iv);\n    let decrypted = decipher.update(encrypted, undefined, 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  },\n\n  generateKey: (): KeyObject => crypto\n    .createSecretKey(crypto.randomBytes(32)),\n\n  serialiseKey: (key: KeyObject): Buffer => key.export(),\n\n  deserialiseKey: (data: Buffer): KeyObject => crypto.createSecretKey(data),\n};\n\nexport default nodeEncryptionSync;\n","import IDable, { IDableBy, IDType } from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport LruCache from '../helpers/LruCache';\nimport { serialiseValue, deserialiseValue } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\nimport Encryption from './encryption/Encryption';\nimport nodeEncryptionSync from './encryption/nodeEncryptionSync';\n\nexport interface KeyRecord<ID extends IDType, KeyT> {\n  id: ID;\n  key: KeyT;\n}\n\ntype EncryptableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\ntype Encrypter<EncT, ID extends IDType> = <T extends IDableBy<ID>>(\n) => <F extends EncryptableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n) => Collection<T>;\n\n// makeEncrypter provides optional 2-tier function call due to\n// https://github.com/Microsoft/TypeScript/issues/26242\n\nfunction makeEncrypter<EncT, ID extends IDType>(\n  wrapper: <T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => Collection<T>,\n): Encrypter<EncT, ID> {\n  return (fields?: any, baseCollection?: Collection<any>): any => {\n    if (fields && baseCollection) {\n      // non-typescript API (remove need for extra ())\n      return wrapper(fields, baseCollection) as any;\n    }\n    return wrapper;\n  };\n}\n\nfunction encryptByKey(sKey: Buffer): Encrypter<Buffer, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, IDType> {\n  const key = cr.deserialiseKey(sKey);\n\n  return makeEncrypter(<T extends IDable, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<EncT> | EncT => cr.encrypt(key, serialiseValue(v)),\n    unwrap: async (k, v): Promise<any> => deserialiseValue(await cr.decrypt(key, v)),\n  }));\n}\n\nfunction encryptByRecord<ID extends IDType>(\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const cache = new LruCache<ID, KeyT>(cacheSize);\n\n  const loadKey = async (\n    generateIfNeeded: boolean,\n    record: { id?: ID },\n  ): Promise<KeyT> => {\n    const { id } = record;\n\n    if (id === undefined) {\n      throw new Error('Must provide ID for encryption');\n    }\n\n    const cached = cache.get(id);\n    if (cached) {\n      return cached;\n    }\n    let key: KeyT;\n    const item = await keyCollection.get('id', id, ['key']);\n    if (item) {\n      key = cr.deserialiseKey(item.key);\n    } else {\n      if (!generateIfNeeded) {\n        throw new Error('No encryption key found for record');\n      }\n      key = await cr.generateKey();\n      await keyCollection.add({ id, key: cr.serialiseKey(key) });\n    }\n    cache.set(id, key);\n    return key;\n  };\n\n  const removeKey = async ({ id }: { id: ID }): Promise<void> => {\n    await keyCollection.remove('id', id);\n    cache.remove(id);\n  };\n\n  return makeEncrypter(<T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, KeyT>(baseCollection, fields, {\n    wrap: (k, v, key): Promise<EncT> | EncT => cr.encrypt(key, JSON.stringify(v)),\n    unwrap: async (k, v, key): Promise<any> => JSON.parse(await cr.decrypt(key, v)),\n    preWrap: loadKey.bind(null, true),\n    preUnwrap: loadKey.bind(null, false),\n    preRemove: removeKey,\n  }));\n}\n\nfunction encryptByRecordWithMasterKey<ID extends IDType>(\n  sMasterKey: Buffer,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const keyEnc = encryptByKey(sMasterKey, cr);\n  const encKeyCollection = keyEnc<KeyRecord<ID, SerialisedKeyT>>()(\n    ['key'],\n    keyCollection,\n  );\n  return encryptByRecord(encKeyCollection, cacheSize, cr);\n}\n\nexport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\n","import CollectionStorage from './CollectionStorage';\nimport WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';\nimport Encryption from './wrappers/encryption/Encryption';\nimport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n} from './wrappers/encrypted';\nimport DB from './interfaces/DB';\nimport Collection from './interfaces/Collection';\nimport IDable from './interfaces/IDable';\n\nexport type DB = DB;\nexport type Collection<T extends IDable> = Collection<T>;\nexport type Wrapped<T extends IDable, WF extends keyof T, W> =\n  Wrapped<T, WF, W>;\nexport type Encrypted<T extends IDable, WF extends keyof T> =\n  Wrapped<T, WF, Buffer>;\nexport type Encryption<EncT, KeyT, SerialisedKeyT> =\n  Encryption<EncT, KeyT, SerialisedKeyT>;\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport { default as RedisDb } from './redis/RedisDb';\nexport { default as LruCache } from './helpers/LruCache';\nexport {\n  WrappedCollection,\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\nexport {\n  default as nodeEncryptionSync,\n} from './wrappers/encryption/nodeEncryptionSync';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport RedisDb from './redis/RedisDb';\nimport DB from './interfaces/DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else if (url.startsWith('redis')) {\n      dbClass = RedisDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}