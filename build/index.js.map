{"version":3,"sources":["webpack://collection-storage/webpack/universalModuleDefinition","webpack://collection-storage/webpack/bootstrap","webpack://collection-storage/./src/interfaces/BaseCollection.ts","webpack://collection-storage/external \"crypto\"","webpack://collection-storage/./src/helpers/retry.ts","webpack://collection-storage/external \"mongodb\"","webpack://collection-storage/external \"url\"","webpack://collection-storage/./src/mongo/MongoCollection.ts","webpack://collection-storage/external \"ioredis\"","webpack://collection-storage/external \"pg\"","webpack://collection-storage/./src/helpers/serialiser.ts","webpack://collection-storage/./src/memory/MemoryCollection.ts","webpack://collection-storage/./src/memory/MemoryDb.ts","webpack://collection-storage/./src/mongo/MongoDb.ts","webpack://collection-storage/./src/redis/helpers.ts","webpack://collection-storage/./src/redis/RedisCollection.ts","webpack://collection-storage/./src/redis/scripts.ts","webpack://collection-storage/./src/redis/RedisConnectionPool.ts","webpack://collection-storage/./src/redis/RedisDb.ts","webpack://collection-storage/./src/postgresql/hstore.ts","webpack://collection-storage/./src/postgresql/sql.ts","webpack://collection-storage/./src/postgresql/PostgresCollection.ts","webpack://collection-storage/./src/postgresql/PostgresDb.ts","webpack://collection-storage/./src/wrappers/WrappedCollection.ts","webpack://collection-storage/./src/helpers/LruCache.ts","webpack://collection-storage/./src/wrappers/encryption/nodeEncryptionSync.ts","webpack://collection-storage/./src/wrappers/encrypted.ts","webpack://collection-storage/./src/wrappers/migrated.ts","webpack://collection-storage/./src/index.ts","webpack://collection-storage/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BaseCollection","constructor","keys","entry","this","preAct","internalAdd","searchAttribute","searchValue","returnAttributes","isIndexed","Error","internalGet","internalGetAll","update","options","undefined","id","upsert","withoutId","internalUpsert","isIndexUnique","some","k","internalUpdate","internalRemove","attribute","keyOptions","Boolean","unique","require","sleep","millis","Promise","resolve","setTimeout","shouldRetry","maxAttempts","baseDelayMillis","attemptDelayMillis","randomDelayMillis","async","attempt","fn","e","message","Math","random","DOT_REG","fieldNameToMongo","encodeURIComponent","replace","withUpsertRetry","retry","includes","convertToMongo","converted","forEach","v","Buffer","MBinary","_bsontype","convertFromMongo","buffer","decodeURIComponent","makeMongoProjection","names","projection","fieldName","MongoCollection","collection","stateRef","closed","super","keyName","mongoKey","createIndex","getCollection","insertOne","updateOne","$set","query","mongoUpdate","updateMany","findOne","cursor","find","result","raw","push","deleteMany","deletedCount","serialiseValue","toString","JSON","stringify","deserialiseValue","type","data","substr","from","parse","serialiseRecord","record","deserialiseRecord","MemoryCollection","simulatedLatency","Map","indices","serialised","internalCheckDuplicates","set","internalPopulateIndices","has","updates","internalGetSerialisedIds","map","sId","oldSerialised","oldValue","newValue","newSerialised","internalRemoveIndices","sIds","fields","field","applyFilter","delete","length","sKey","index","serialisedValue","checkId","Set","add","size","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","mapTables","close","MongoDb","client","MongoClient","default","connect","useNewUrlParser","useUnifiedTopology","escapeName","getDb","minifyLuaScript","lines","argNames","combined","ln","trim","join","RegExp","notUndefined","item","makeIndexKeys","partialSerialisedValue","filter","prefix","parseItem","f","itemHasContent","values","unwatchAll","unwatch","mapAwaitSync","RedisCollection","pool","keyPrefix","keyPrefixes","keyInfo","uniqueKeys","nonUniqueKeys","withConnection","runAdd","patchSerialised","retryWithConnection","patch","getUpdatePatch","runUpdates","insertValue","getAndWatchBySerialisedKey","patches","getByKeysKeepWatches","makeKey","cut","indexedKeys","items","rawByKeyKeepWatches","pipeline","multi","remove","exec","serialisedId","checkWatch","keyCount","entries","flat","watch","argsList","makeUpdateArgs","results","updateArgs","checkUpdate","chain","updateWithoutCheck","diff","patchUniqueKeys","patchNonUniqueKeys","oldUniqueKeys","oldNonUniqueKeys","serialisedIds","commands","multiExec","exists","hmget","hgetall","parsed","keyAddress","smembers","SCRIPT_ADD","FRAG_CHECK_UPDATE","FRAG_UPDATE","SCRIPT_CHECK_UPDATE","SCRIPT_UPDATE_WITHOUT_CHECK","SCRIPT_UPDATE","SCRIPT_REMOVE","withRetry","RedisConnectionPool","RedisStatic","maxConnections","teardown","getConnection","returnConnection","inUse","doClose","closingFn","connections","disconnect","pop","defineCommand","lua","defineAllScripts","queue","q","shift","RedisDb","lazyConnect","getConnectionPool","quoteHValue","DQUOTE_REG","SQUOTE_REG","quoteValue","msg","ID_REG","withIdentifiers","base","identifiers","STATEMENTS","CREATE_TABLE","CREATE_INDEX","CREATE_UNIQUE_INDEX","DROP_INDEX","INSERT","UPDATE","UPDATE_ID","UPSERT_ID","SELECT_ONE","SELECT_ALL","SELECT_ALL_BY","SELECT_ID","DELETE","DELETE_ID","toHStore","encodeHStore","fromHStore","rawMap","hstore","current","currentKey","quote","decodeHStore","PostgresCollection","tableName","T","keyEntries","I","release","configureTable","then","pending","catch","process","stderr","write","rest","runTableQuery","rowCount","rows","queryName","cached","cachedQueries","rowMode","text","PostgresDb","Pool","connectionString","end","hasAnyField","WrappedCollection","baseCollection","wrapper","wrapAll","unwrapAll","getAll","extra","all","preRemove","processed","preWrap","allFields","wrap","preUnwrap","unwrap","LruCache","capacity","storage","flush","next","ALG","ALG_BUF","nodeEncryptionSync","encrypt","iv","crypto","randomBytes","cipher","createCipheriv","part","final","concat","decrypt","slice","equals","encrypted","decipher","createDecipheriv","decrypted","generateKey","createSecretKey","serialiseKey","export","deserialiseKey","makeEncrypter","encryptByKey","cr","encryptByRecord","keyCollection","cacheSize","cache","loadKey","generateIfNeeded","removeKey","encryptByRecordWithMasterKey","sMasterKey","keyEnc","MigratedCollection","migrations","extraFetchFields","extendAttributes","applyMigration","attr","migration","migrate","CollectionStorage","dbClass","startsWith"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,qBAAsB,GAAIH,GACP,iBAAZC,QACdA,QAAQ,sBAAwBD,IAEhCD,EAAK,sBAAwBC,IAR/B,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,uZC9EtC,MAAeC,EAClBC,YACWC,GACnB,KADmBA,OAGrB,UAAiBC,GAEf,aADMC,KAAKC,SACJD,KAAKE,YAAYH,GAG1B,UAIEI,EACAC,EACAC,GAEA,IAAKL,KAAKM,UAAUH,GAClB,MAAM,IAAII,MAAO,gBAAeJ,GAGlC,aADMH,KAAKC,SACJD,KAAKQ,YAAYL,EAAiBC,EAAaC,GAGxD,aAIEF,EACAC,EACAC,GAEA,GAAIF,IAAoBH,KAAKM,UAAUH,GACrC,MAAM,IAAII,MAAO,gBAAeJ,GAGlC,aADMH,KAAKC,SACJD,KAAKS,eAAeN,EAAiBC,EAAaC,GAG3D,aACEF,EACAC,EACAM,EACAC,EAAyB,IAEzB,GAAwB,OAApBR,QAA0CS,IAAdF,EAAOG,IAAoBH,EAAOG,KAAOT,EACvE,MAAM,IAAIG,MAAM,oBAElB,GAAII,EAAQG,OAAQ,CAClB,GAAwB,OAApBX,EACF,MAAM,IAAII,MAAO,8BAA6BJ,GAEhD,IAAIY,EAAYL,EAMhB,OALIpC,OAAOkB,UAAUC,eAAe1B,KAAK2C,EAAQ,QAC/CK,E,+VAAY,CAAH,GAAQL,UACVK,EAAUF,UAEbb,KAAKC,SACJD,KAAKgB,eAAeZ,EAAwBW,EAAWJ,GAEhE,IAAKX,KAAKM,UAAUH,GAClB,MAAM,IAAII,MAAO,gBAAeJ,GAElC,IACGH,KAAKiB,cAAcd,IACpB7B,OAAOwB,KAAKY,GAAQQ,KAAMC,GAAMnB,KAAKiB,cAAcE,IAEnD,MAAM,IAAIZ,MAAM,aAIlB,aADMP,KAAKC,SACJD,KAAKoB,eAAejB,EAAiBC,EAAaM,EAAQC,GAGnE,aACER,EACAC,GAEA,IAAKJ,KAAKM,UAAUH,GAClB,MAAM,IAAII,MAAO,gBAAeJ,GAGlC,aADMH,KAAKC,SACJD,KAAKqB,eAAelB,EAAiBC,GAGpCE,UAAUgB,GAClB,MACgB,OAAdA,QAC4CV,IAA5CZ,KAAKF,KAAKwB,GAIJL,cAAcK,GACtB,MAAMC,EAAavB,KAAKF,KAAKwB,GAC7B,MACgB,OAAdA,GACAE,QAAQD,GAAcA,EAAWE,QAK3BxB,UAEV,kBAIEE,EACAC,EACAC,GAC0C,MAE1C,wBADkBL,KAAKS,eAAeN,EAAiBC,EAAaC,IACzD,UAAX,QAAiB,KAGTW,eACRH,EACAH,EACAC,GAEA,OAAOX,KAAKoB,eAAe,KAAMP,EAAIH,EAAQC,M,cC7HjDtD,EAAOD,QAAUsE,QAAQ,W,6BCAzB,SAASC,EAAMC,GACb,OAAO,IAAIC,QAASC,GAAiBC,WAAWD,EAASF,IAG5C,KACbI,EACAC,EAAc,EACdC,EAAkB,GAClBC,EAAqB,IACrBC,EAAoB,MACjBC,UACH,IAAK,IAAIC,EAAU,GAAKA,GAAW,EAAG,CACpC,IAEE,aAAaC,IACb,MAAOC,GACP,IAAKR,EAAYQ,GACf,MAAMA,EAER,GAAIF,GAAWL,EAEb,MADAO,EAAEC,SAAY,eAAcH,WACtBE,QAIJb,EACJO,EACAI,EAAUH,EACVO,KAAKC,SAAWP,M,cC5BtB/E,EAAOD,QAAUsE,QAAQ,Y,cCAzBrE,EAAOD,QAAUsE,QAAQ,Q,6DCAzB,wEASA,MAOMkB,EAAU,MAChB,SAASC,EAAiB1E,GACxB,MARS,OAQLA,EATW,MAYR2E,mBAAmB3E,GAAM4E,QAAQH,EAAS,OAUnD,MAAMI,EAAkBC,YAAOT,GAChB,iBAANA,GACPA,EAAEC,QAAQS,SAAS,WAGrB,SAASC,EACPtE,GAEA,MAAMuE,EAAqC,GAW3C,OAVA9E,OAAOwB,KAAKjB,GAAOwE,QAASlC,IAC1B,IAAImC,EAAKzE,EAAcsC,GACvB,GAAImC,aAAaC,OACfD,EAAI,IAAIE,SAAQF,QAEX,GAAiB,iBAANA,GAAkBA,EAAEG,UACpC,MAAM,IAAIlD,MAAM,0CAElB6C,EAAUP,EAAiB1B,IAAMmC,IAE5BF,EAGT,SAASM,EACP7E,GAEA,IAAKA,EACH,OAAO,KAET,MAAMuE,EAAe,GASrB,OARA9E,OAAOwB,KAAKjB,GAAOwE,QAASlC,IAC1B,IAAImC,EAAKzE,EAAcsC,GArC3B,IAA4BhD,EAuCP,iBAANmF,GAAkC,WAAhBA,EAAEG,YAC7BH,EAAIA,EAAEK,QAEPP,GA1CuBjF,EA0CcgD,EAzDzB,QAgBXhD,EAfK,KAkBFyF,mBAAmBzF,KAsCoBmF,IAEvCF,EAGT,SAASS,EACPC,GAEA,MAAMC,EAAsC,GAO5C,OANID,IACFC,EAAU,KAAa,EACvBD,EAAMT,QAASW,IACbD,EAAWlB,EAAiBmB,KAAc,KAGvCD,EAGM,MAAME,UAA0CrE,IACtDC,YACYqE,EACjBpE,EAAkB,GACDqE,EAAkB,CAAEC,QAAQ,IAE7CC,MAAMvE,GADN,KAHiBoE,aAGjB,KADiBC,WAGjB7F,OAAOwB,KAAKA,GAAMuD,QAASlC,IACzB,MAAMmD,EAAUnD,EACVR,EAAUb,EAAKwE,GACfC,EAAW1B,EAAiByB,IAC9B3D,aAAJ,EAAIA,EAASc,QACXyC,EAAWM,YAAY,CAAE,CAACD,GAAW,GAAK,CAAE9C,QAAQ,IAEpDyC,EAAWM,YAAY,CAAE,CAACD,GAAW,aAK3C,kBAA4B1F,SACpBmB,KAAKyE,gBAAgBC,UAAUvB,EAAetE,IAGtD,qBACEgC,EACAH,SAEMsC,EAAgB,IAAMhD,KAAKyE,gBAAgBE,UAC/CxB,EAAe,CAAEtC,OACjB,CAAE+D,KAAMzB,EAAezC,IACvB,CAAEI,QAAQ,KAId,qBACEX,EACAC,EACAM,GAEA,MAAMmE,EAAQ1B,EAAe,CAAE,CAAChD,GAAkBC,IAC5C0E,EAAc,CAAEF,KAAMzB,EAAezC,IACvCV,KAAKiB,cAAcd,SACfH,KAAKyE,gBAAgBE,UAAUE,EAAOC,SAEtC9E,KAAKyE,gBAAgBM,WAAWF,EAAOC,GAIjD,kBAIE3E,EACAC,EACAC,GAMA,OAAOqD,QAJW1D,KAAKyE,gBAAgBO,QACrC7B,EAAe,CAAE,CAAChD,GAAkBC,IACpC,CAAE2D,WAAYF,EAAoBxD,MAKtC,qBAIEF,EACAC,EACAC,GAEA,MAAM4E,EAASjF,KAAKyE,gBAAgBS,KAClC/E,EAAkBgD,EAAe,CAAE,CAAChD,GAAkBC,IAAiB,GACvE,CAAE2D,WAAYF,EAAoBxD,KAG9B8E,EAA2B,GAGjC,aAFMF,EAAO5B,QAAS+B,GAAQD,EAAOE,KAAK3B,EAAoB0B,KAEvDD,EAGT,qBACEhF,EACAC,GAKA,aAHqBJ,KAAKyE,gBAAgBa,WACxCnC,EAAe,CAAE,CAAChD,GAAkBC,MAExBmF,cAAgB,EAGxBd,gBACN,GAAIzE,KAAKmE,SAASC,OAChB,MAAM,IAAI7D,MAAM,qBAElB,OAAOP,KAAKkE,c,cCpLhB7G,EAAOD,QAAUsE,QAAQ,Y,cCAzBrE,EAAOD,QAAUsE,QAAQ,O,sgBCAlB,SAAS8D,EACd3G,GAEA,OAAIA,aAAiB0E,OACX,IAAG1E,EAAM4G,SAAS,UAEpB,IAAGC,KAAKC,UAAU9G,GAGrB,SAAS+G,EACd/G,GAEA,MAAMgH,EAAOhH,EAAM,GACbiH,EAAOjH,EAAMkH,OAAO,GAC1B,GAAa,MAATF,EACF,OAAOtC,OAAOyC,KAAKF,EAAM,UAE3B,GAAa,MAATD,EACF,OAAOH,KAAKO,MAAMH,GAEpB,MAAM,IAAIvF,MAAO,qBAAoBsF,GAGhC,SAASK,EACdC,GAEA,MAAMhB,EAAiC,GAIvC,OAHA7G,OAAOwB,KAAKqG,GAAQ9C,QAASlC,IAC3BgE,EAAOhE,GAAKqE,EAAgBW,EAAehF,MAEtCgE,EAGF,SAASiB,EACdD,GAEA,MAAMhB,EAA8B,GAOpC,OANA7G,OAAOwB,KAAKqG,GAAQ9C,QAASlC,IAC3B,MAAMmC,EAAI6C,EAAOhF,GACbmC,IACF6B,EAAOhE,GAAKyE,EAAiBtC,MAG1B6B,E,urBCPM,MAAMkB,UAA2CzG,IAKvDC,YACLC,EAAkB,GACDwG,EAAmB,EACnBnC,EAAkB,CAAEC,QAAQ,IAE7CC,MAAMvE,GADN,KAFiBwG,mBAEjB,KADiBnC,WACjB,uCAN6E,IAS7EnE,KAAK8F,KAAO,IAAIS,IAEhBjI,OAAOwB,KAAKA,GAAMuD,QAASlC,IACzBnB,KAAKwG,QAAQrF,GAAgB,IAAIoF,MAI3BtG,SACR,GAAID,KAAKmE,SAASC,OAChB,MAAM,IAAI7D,MAAM,qBAElB,OAlDJ,SAAeqB,GACb,GAAKA,EAKL,OAAO,IAAIC,QAASC,GAAiBC,WAAWD,EAASF,IA4ChDD,CAAM3B,KAAKsG,kBAGpB,kBAA4BzH,GAC1B,MAAM4H,EAAaP,EAAgBrH,GACnCmB,KAAK0G,wBAAwBD,GAAY,GACzCzG,KAAK8F,KAAKa,IAAIF,EAAW5F,GAAI4F,GAC7BzG,KAAK4G,wBAAwBH,GAG/B,qBACE5F,EACAH,GAEIV,KAAK8F,KAAKe,IAAIrB,EAAe3E,UACzBb,KAAKoB,eAAe,KAAMP,EAAIH,SAE9BV,KAAKE,YAAL,GAAmBW,MAAOH,IAIpC,qBACEP,EACAC,EACAM,GAEA,MAEMoG,EAFO9G,KAAK+G,yBAAyB5G,EAAiBC,GAEvC4G,IAAKC,IACxB,MAAMC,EAAgBlH,KAAK8F,KAAKrH,IAAIwI,GAC9BE,EAAWf,EAAkBc,GAC7BE,EAAW,EAAH,KAAQD,GAAazG,GACnC,GAAI0G,EAASvG,KAAOsG,EAAStG,GAC3B,MAAM,IAAIN,MAAM,oBAGlB,MAAO,CAAE2G,gBAAeG,cADFnB,EAAgBkB,MAIxCN,EAAQzD,QAAQ,EAAG6D,mBAAoBlH,KAAKsH,sBAAsBJ,IAClE,IACEJ,EAAQzD,QAAQ,EAAGgE,mBAAoBrH,KAAK0G,wBAAwBW,GAAe,IACnF,MAAO7E,GAEP,MADAsE,EAAQzD,QAAQ,EAAG6D,mBAAoBlH,KAAK4G,wBAAwBM,IAC9D1E,EAERsE,EAAQzD,QAAQ,EAAGgE,oBACjBrH,KAAK8F,KAAKa,IAAIU,EAAcxG,GAAIwG,GAChCrH,KAAK4G,wBAAwBS,KAIjC,qBAIElH,EACAC,EACAC,GAEA,IAAIkH,EAMJ,OAJEA,EADEpH,EACKH,KAAK+G,yBAAyB5G,EAAiBC,GAE/C,IAAIJ,KAAK8F,KAAKhG,QAEhByH,EAAKP,IAAKC,GA3GrB,SACEnB,EACA0B,GAEA,IAAKA,EACH,OAAO1B,EAET,MAAMX,EAAyB,GAI/B,OAHAqC,EAAOnE,QAASoE,IACdtC,EAAOsC,GAAS3B,EAAK2B,KAEhBtC,EAgGoBuC,CACvBtB,EAAkBpG,KAAK8F,KAAKrH,IAAIwI,IAChC5G,IAIJ,qBACEF,EACAC,GAEA,MAAMmH,EAAOvH,KAAK+G,yBAAyB5G,EAAiBC,GAO5D,OANAmH,EAAKlE,QAAS4D,IACZ,MAAMC,EAAgBlH,KAAK8F,KAAKrH,IAAIwI,GACpCjH,KAAKsH,sBAAsBJ,GAC3BlH,KAAK8F,KAAK6B,OAAOV,KAGZM,EAAKK,OAGNb,yBACN5G,EACAC,GAEA,MAAMyH,EAAOrC,EAAepF,GAC5B,GAAwB,OAApBD,EACF,OAAOH,KAAK8F,KAAKe,IAAIgB,GAAQ,CAACA,GAAQ,GAExC,MAAMC,EAAQ9H,KAAKwG,QAAQrG,GAC3B,IAAK2H,EACH,MAAM,IAAIvH,MAAO,iBAAgBJ,iBAEnC,MAAMoH,EAAOO,EAAMrJ,IAAIoJ,GACvB,OAAON,EAAO,IAAIA,GAAQ,GAGpBb,wBACNqB,EACAC,GAEA,GAAIA,GAAWhI,KAAK8F,KAAKe,IAAIkB,EAAgBlH,IAC3C,MAAM,IAAIN,MAAM,aAElBjC,OAAOwB,KAAKE,KAAKF,MAAMuD,QAASlE,IAC9B,MAAM2I,EAAQ9H,KAAKwG,QAAQrH,GAC3B,GAAIa,KAAKiB,cAAc9B,IAAQ2I,EAAMjB,IAAIkB,EAAgB5I,IACvD,MAAM,IAAIoB,MAAM,eAKdqG,wBACNmB,GAEAzJ,OAAOwB,KAAKE,KAAKF,MAAMuD,QAASlE,IAC9B,MAAM2I,EAAQ9H,KAAKwG,QAAQrH,GACrBmE,EAAIyE,EAAgB5I,GAC1B,IAAId,EAAIyJ,EAAMrJ,IAAI6E,GACbjF,IACHA,EAAI,IAAI4J,IACRH,EAAMnB,IAAIrD,EAAGjF,IAEfA,EAAE6J,IAAIH,EAAgBlH,MAIlByG,sBACNS,GAEAzJ,OAAOwB,KAAKE,KAAKF,MAAMuD,QAASlE,IAC9B,MAAM2I,EAAQ9H,KAAKwG,QAAQrH,GACrBmE,EAAIyE,EAAgB5I,GACpBd,EAAIyJ,EAAMrJ,IAAI6E,GACpBjF,EAAEsJ,OAAOI,EAAgBlH,IACpBxC,EAAE8J,MACLL,EAAMH,OAAOrE,M,wHCzLrB,MAAM8E,EAVN,SAAsBjK,EAAckK,GAClC,MAAMC,EAAY9K,OAAeW,GACjC,OAAImK,IAIH9K,OAAeW,GAAQkK,EACjBA,GAGSE,CAChB,4BACA,IAAIhC,KAGS,MAAMiC,EAOZ3I,aAAY,iBAAEyG,EAAmB,GAAM,IAAI,qDAJrB,IAAIC,KAIiB,kBAFtB,CAAEnC,QAAQ,IAGpCpE,KAAKsG,iBAAmBA,EAG1B,eAAsBmC,GACpB,MAAMC,EAAY,IAAIC,MAAIF,GACpBtK,EAAOuK,EAAUE,SACvB,GAAIzK,GAAQiK,EAAUvB,IAAI1I,GACxB,OAAOiK,EAAU3J,IAAIN,GAEvB,MAAM0K,EAASH,EAAUI,aACnBxC,EAAmByC,OAAOF,EAAOpK,IAAI,qBACrCuK,EAAK,IAAIR,EAAS,CAAElC,qBAI1B,OAHInI,GACFiK,EAAUzB,IAAIxI,EAAM6K,GAEfA,EAGFvE,cACLtG,EACA2B,GASA,OAPKE,KAAKiJ,UAAUpC,IAAI1I,IACtB6B,KAAKiJ,UAAUtC,IAAIxI,EAAM,IAAIkI,EAC3BvG,EACAE,KAAKsG,iBACLtG,KAAKmE,WAGFnE,KAAKiJ,UAAUxK,IAAIN,GAGrB+K,QACLlJ,KAAKmE,SAASC,QAAS,GCpDZ,MAAM+E,EAGXtJ,YACWuJ,EACAnF,G,UACjB,KAFiBmF,SAEjB,KADiBnF,kB,EAJS,CAAEG,QAAQ,I,EAKpC,c,EAAA,M,sFAEF,qBAA4BqE,GAC1B,MAAM,YAAEY,SAAsB,QAAN,qBAAa,KAEnCC,QAASrF,SACD,QAAN,qBAAwC,IACtCmF,QAAeC,EAAYE,QAAQd,EAAK,CAC5Ce,iBAAiB,EACjBC,oBAAoB,IAEtB,OAAO,IAAIN,EAAQC,EAAQnF,GAGtBQ,cACLtG,EACA2B,GAEA,MAAMoE,EAAalE,KAAKoJ,OAAOJ,KAAK9E,WA5BxC,SAAoB/F,GAClB,OAAO2E,mBAAmB3E,GA2BuBuL,CAAWvL,IAC1D,OAAO,IAAI6B,KAAKiE,gBAAgBC,EAAYpE,EAAME,KAAKmE,UAGzD,cAEE,OADAnE,KAAKmE,SAASC,QAAS,EAChBpE,KAAKoJ,OAAOF,QAGdS,QACL,OAAO3J,KAAKoJ,OAAOJ,MCZhB,SAASY,EACdC,KACGC,GAEH,IAAIC,EAAWF,EAAM7C,IAAKgD,GAAOA,EAAGC,QAAQC,KAAK,KAIjD,OAHAJ,EAASzG,QAAQ,CAAClF,EAAMP,KACtBmM,EAAWA,EAAShH,QAAQ,IAAIoH,OAAQ,MAAKhM,OAAW,KAAO,QAAOP,EAAI,QAErEmM,E,2iCCfT,MAAMK,EAAmBC,QAAkCzJ,IAATyJ,EAElD,SAASC,EACPxK,EACAyK,GAEA,OAAOzK,EACJ0K,OAAO,EAAGrL,SAAUoL,EAAuBpL,IAC3C6H,IAAI,EAAG7H,MAAKsL,YAAc,GAAEA,KAAUF,EAAuBpL,MAGlE,SAASuL,EACPL,EACA7C,GAEA,IAAKA,EACH,OAAO6C,EAET,MAAMlF,EAAwC,GAC9C,IAAK,IAAIwF,EAAI,EAAGA,EAAInD,EAAOI,OAAQ+C,GAAK,EACtCxF,EAAOqC,EAAOmD,IAAON,EAAaM,GAEpC,OAAOxF,EAGT,SAASyF,EAAeP,GACtB,OAAO/L,OAAOuM,OAAOR,GAAMnJ,KAAMoC,GAAa,OAANA,GAG1CjB,eAAeyI,EAAW1B,SAClBA,EAAO2B,UAGf1I,eAAe2I,EACbH,EACAtI,GAEA,MAAM4C,EAAc,GACpB,IAAK,IAAIvH,EAAI,EAAGA,EAAIiN,EAAOjD,OAAQhK,GAAK,EAEtCuH,EAAOE,WAAW9C,EAAGsI,EAAOjN,KAE9B,OAAOuH,EAGM,MAAM8F,UAA0CrL,IAOtDC,YACYqL,EACAT,EACjB3K,EAAkB,IAElBuE,MAAMvE,GADN,KAHiBoL,OAGjB,KAFiBT,SAEjB,qBAV0D,IAU1D,oBARsC,IAQtC,uBANyC,IASzCnM,OAAOwB,KAAKA,GAAMuD,QAASlC,IACzB,MAAMhC,EAAMgC,EACNgK,EAAa,GAAEV,KAAUtL,IAC/Ba,KAAKoL,YAAYjM,GAAOgM,EACxB,MAAME,EAAU,CAAElM,MAAKsL,OAAQU,GAC3BrL,EAAKX,GAAMsC,OACbzB,KAAKsL,WAAWjG,KAAKgG,GAErBrL,KAAKuL,cAAclG,KAAKgG,KAKpBnL,YAAYrB,GACpB,MAAM4H,EAAaP,EAAgBrH,GACnC,OAAOmB,KAAKkL,KAAKM,eAAenJ,UAE9B,UADoBrC,KAAKyL,OAAOrC,EAAQ3C,GAAY,GAElD,MAAM,IAAIlG,MAAM,eAKZa,eACRjB,EACAC,EACAM,GACA,OAAEI,IAEF,MAAM4K,EAAkBxF,EAAgBxF,GAClCmH,EAAOrC,EAAepF,GAE5B,MAAwB,OAApBD,EACKH,KAAKkL,KAAKS,oBAAoBtJ,UACnC,MAAMuJ,QAAc5L,KAAK6L,eAAezC,EAAQvB,EAAM6D,GACtD,GAAIE,QACI5L,KAAK8L,WAAW1C,EAAQ,CAACwC,SAC1B,GAAI9K,EAAQ,CACjB,MAAMiL,EAAc,OAAKL,GAAR,IAAyB7K,GAAIgH,IAC9C,UAAW7H,KAAKyL,OAAOrC,EAAQ2C,GAAa,GAC1C,MAAM,IAAIxL,MAAM,eAGnBuK,GAGE9K,KAAKkL,KAAKS,oBAAoBtJ,UACnC,MAAMkF,QAAavH,KAAKgM,2BAA2B5C,EAAQjJ,EAAiB0H,GACtEoE,SAAiBjB,EACrBzD,EACCN,GAAQjH,KAAK6L,eAAezC,EAAQnC,EAAKyE,KACzClB,OAAOJ,SACJpK,KAAK8L,WAAW1C,EAAQ6C,IAC7BnB,GAGKtK,YAIRL,EACAC,EACAC,GAEA,MAAMwH,EAAOrC,EAAepF,GAC5B,OAAOJ,KAAKkL,KAAKS,oBAAoBtJ,UAAkB,MACrD,MAAM4E,SAAajH,KAAKgM,2BAA2B5C,EAAQjJ,EAAiB0H,IAAO,GACnF,QAAYjH,IAARqG,EACF,OAAO,KAGT,wBADsBjH,KAAKkM,qBAAqB9C,EAAQ,CAACnC,GAAM5G,IAChD,UAAf,QAAqB,MACpByK,GAGKrK,eAIRN,EACAC,EACAC,GAEA,OAAOL,KAAKkL,KAAKS,oBAAoBtJ,UACnC,IAAIkF,EACJ,GAAIpH,EAAiB,CACnB,MAAM0H,EAAOrC,EAAepF,GAC5BmH,QAAavH,KAAKgM,2BAA2B5C,EAAQjJ,EAAiB0H,OACjE,CACLN,QAAa6B,EAAOtJ,KAAKE,KAAKmM,QAAQ,MACtC,MAAMC,EAAMpM,KAAKyK,OAAO7C,OAAS,EACjCL,EAAOA,EAAKP,IAAK1D,GAAMA,EAAEyC,OAAOqG,IAElC,OAAOpM,KAAKkM,qBAAqB9C,EAAQ7B,EAAMlH,IAC9CyK,GAGKzJ,eACRlB,EACAC,GAEA,MAAMyH,EAAOrC,EAAepF,GACtBiM,EAAc/N,OAAOwB,KAAKE,KAAKF,MAGrC,OAFAuM,EAAYhH,KAAK,MAEVrF,KAAKkL,KAAKS,oBAAoBtJ,UACnC,MAAMkF,QAAavH,KAAKgM,2BAA2B5C,EAAQjJ,EAAiB0H,GACtEyE,SAAetB,EACnBzD,EACCN,GAAQjH,KAAKuM,oBAAoBnD,EAAQnC,EAAKoF,KAC9C7B,OAAOJ,GAEV,GAAqB,IAAjBkC,EAAM1E,OACR,OAAO,EAGT,MAAM4E,EAAWpD,EAAOqD,QAaxB,OAZAH,EAAMjJ,QAASgH,IACb,MAAMiB,EAAahB,EAActK,KAAKsL,WAAYjB,GAC5CkB,EAAgBjB,EAActK,KAAKuL,cAAelB,GACxDmC,EAASE,OACP,EAAIpB,EAAW1D,OAAS2D,EAAc3D,OACtC5H,KAAKmM,QAAQ9B,EAAKxJ,OACfyK,KACAC,EACHlB,EAAKxJ,YAGH2L,EAASG,OACRL,EAAM1E,QACZkD,GAGGqB,QAAQS,GACd,MAAQ,GAAE5M,KAAKyK,UAAUmC,IAG3B,aACExD,EADF,EAGEyD,GACkB,IAFlB,GAAEhM,GAEgB,EAFT4F,EAES,YAClB,MAAM6E,EAAahB,EAActK,KAAKsL,WAAY7E,GAC5C8E,EAAgBjB,EAActK,KAAKuL,cAAe9E,GAElDqG,EAAW,EAAIxB,EAAW1D,OAAS2D,EAAc3D,OACjDiB,EAAS,CACb7I,KAAKmM,QAAQtL,MACVyK,KACAC,EACHD,EAAW1D,OACX,KACA/G,KACGvC,OAAOyO,QAAQtG,GAAYuG,QAGhC,IAAKH,EACH,OAAOrL,cAAc4H,EAAOlB,IAAI4E,KAAajE,IAG/C,MAAM1D,QAAeiE,EAClBqD,QACAvE,IAAI4E,KAAajE,GACjB8D,OACH,IAAKxH,EACH,MAAM,IAAI5E,MAAM,mBAElB,OAAOiB,QAAQ2D,EAAO,GAAG,IAG3B,qBACEiE,EACAnC,EACAyE,SAEMtC,EAAO6D,MAAMjN,KAAKmM,QAAQlF,IAChC,MAAMC,QAAsBlH,KAAKuM,oBAC/BnD,EACAnC,EACA3I,OAAOwB,KAAKE,KAAKF,MAAM0K,OAAQrJ,GAAMuK,EAAgBvK,KAEvD,IAAK+F,EACH,OAEF,MAAMG,EAAgB,KAAKqE,GAO3B,OANApN,OAAOwB,KAAKuH,GAAehE,QAASlC,IAC9B+F,EAAc/F,KAAOkG,EAAclG,YAC9BkG,EAAclG,UACd+F,EAAc/F,MAGlB,CAAE8F,MAAKI,gBAAeH,iBAG/B,iBACEkC,EACA6C,GAEA,MAAMiB,EAAWjB,EACdjF,IAAK4E,GAAU5L,KAAKmN,eAAevB,IACnCpB,OAAOJ,GAEV,IAAK8C,EAAStF,OACZ,OAGF,GAAwB,IAApBsF,EAAStF,OAAc,CACzB,MAAMwF,QAAgBhE,EAAOqD,QAC1B/L,OAAOwM,EAAS,GAAG,GAAIA,EAAS,GAAG,IACnCP,OAEH,IAAKS,EACH,MAAM,IAAI7M,MAAM,mBAElB,IAAK6M,EAAQ,GAAG,GACd,MAAM,IAAI7M,MAAM,aAElB,OAOF,UAJiCyK,EAC/BkC,EACCG,GAAejE,EAAOkE,YAAYD,EAAW,GAAIA,EAAW,MAExCnM,KAAMxC,IAAOA,GAClC,MAAM,IAAI6B,MAAM,aAGlB,IAAIgN,EAAQnE,EAAOqD,QACnBS,EAAS7J,QAASgK,IAChBE,EAAQA,EAAMC,mBAAmBH,EAAW,GAAIA,EAAW,MAI7D,UAFsBE,EAAMZ,OAG1B,MAAM,IAAIpM,MAAM,mBAIZ4M,gBACN,IAAElG,EAAF,cAAOC,EAAP,cAAsBG,IAEtB,MAAMoG,EAAOnP,OAAOyO,QAAQ1F,GAAe2F,OAC3C,IAAKS,EAAK7F,OACR,OAEF,MAAM8F,EAAkBpD,EAActK,KAAKsL,WAAYjE,GACjDsG,EAAqBrD,EAActK,KAAKuL,cAAelE,GACvDuG,EAAgBtD,EAActK,KAAKsL,WAAYpE,GAC/C2G,EAAmBvD,EAActK,KAAKuL,cAAerE,GAC3D,GACE0G,EAAchG,SAAW8F,EAAgB9F,QACzCiG,EAAiBjG,SAAW+F,EAAmB/F,OAE/C,MAAM,IAAIrH,MAAM,0CAclB,MAAO,CAZU,EAA2D,GAAtDmN,EAAgB9F,OAAS+F,EAAmB/F,QACnD,CACb5H,KAAKmM,QAAQlF,MACVyG,KACAC,KACAC,KACAC,EACHH,EAAgB9F,OAChB8F,EAAgB9F,OAAS+F,EAAmB/F,OAC5CX,KACGwG,IAKP,2BACErE,EACA0E,EACAtG,GAEA,MAAM4F,QDlVH/K,eACL+G,EACA2E,GAEA,OAAKA,EAASnG,OAGPwB,EAAOqD,MAAMsB,GAAUpB,OAFrB,GC6UeqB,CACpB5E,EACA0E,EACG9G,IAAKC,GAAQjH,KAAKmM,QAAQlF,IAC1BD,IAAK7F,GAAOqG,EAAS,CAAC,QAASrG,KAAMqG,GAAU,CAAC,UAAWrG,KAEhE,IAAKiM,EACH,MAAM,IAAI7M,MAAM,mBAElB,OAAO6M,EACJpG,IAAI,EAAE,CAAEqD,KAA0BK,EAAUL,EAAM7C,IAClDgD,OAAOI,GACP5D,IAAIZ,GAGT,0BACEgD,EACAwD,EACApF,GAEA,MAAMrI,EAAMa,KAAKmM,QAAQS,GACzB,IAAIvC,EACJ,GAAI7C,EAAQ,CACV,IAAKA,EAAOI,OAAQ,CAGlB,aADqBwB,EAAO6E,OAAO9O,GACnB,QAAKyB,EAEvByJ,QAAajB,EAAO8E,MAAM/O,KAAQqI,QAElC6C,QAAajB,EAAO+E,QAAQhP,GAE9B,MAAMiP,EAAS1D,EAAUL,EAAM7C,GAC/B,OAAOoD,EAAewD,GAAUA,OAASxN,EAG3C,iCACEwI,EACA9E,EACAyD,GAEA,GAAgB,OAAZzD,EACF,MAAO,CAACyD,GAEV,MAAMoD,EAAYnL,KAAKoL,YAAY9G,GACnC,IAAK6G,EACH,MAAM,IAAI5K,MAAO,iBAAgB+D,iBAEnC,MAAM+J,EAAc,GAAElD,KAAapD,IAEnC,aADMqB,EAAO6D,MAAMoB,GACZjF,EAAOkF,SAASD,IC3Y3B,MAAME,EAAa3E,EAAgB,CACjC,0CACA,aACA,MACA,yCACA,4CACA,eACA,QACA,MACA,6CACA,mBACA,uCACA,MACA,YACC,kBAEG4E,EAAoB,CACxB,yCACA,4CACA,eACA,QACA,OAGIC,EAAc,CAClB,qCACA,6CACA,iBACA,oDACA,OAIIC,EAAsB9E,EAAgB,IACvC4E,EACH,YACC,iBAAkB,gBAAiB,MAGhCG,EAA8B/E,EAAgB,IAC/C6E,GACF,iBAAkB,gBAAiB,MAGhCG,EAAgBhF,EAAgB,IACjC4E,KACAC,EACH,YACC,iBAAkB,gBAAiB,MAGhCI,EAAgBjF,EAAgB,CACpC,4BACA,mBACA,mCACA,OACC,M,mIChEH,MAAMkF,EAAY7L,YAAOT,GACV,iBAANA,GACO,oBAAdA,EAAEC,SAGW,MAAMsM,EAWZlP,YACYmP,EACAvG,EACA9H,EACAsO,GACjB,KAJiBD,cAIjB,KAHiBvG,MAGjB,KAFiB9H,UAEjB,KADiBsO,iBACjB,qBAfuC,IAevC,eAbc,GAad,eAX4C,IAW5C,4CAPe,GASjB,qBACE1M,EACA2M,GAEA,MAAMjR,QAAU+B,KAAKmP,gBACrB,IACE,aAAa5M,EAAGtE,GADlB,cAGQiR,aAAN,EAAMA,EAAWjR,IACjB+B,KAAKoP,iBAAiBnR,IAI1B,0BACEsE,EACA2M,GAEA,OAAOJ,EAAU,IAAM9O,KAAKwL,eAAejJ,EAAI2M,IAG1ChG,QACL,OAAIlJ,KAAKoE,OACAvC,QAAQC,WAGjB9B,KAAKoE,QAAS,EACK,IAAfpE,KAAKqP,OACPrP,KAAKsP,UACEzN,QAAQC,WAGV,IAAID,QAASC,IAClB9B,KAAKuP,UAAY,KACfvP,KAAKsP,UACLxN,QAKEwN,UACNtP,KAAKwP,YAAYnM,QAASpF,GAAMA,EAAEwR,cAClCzP,KAAKwP,YAAY5H,OAAS,EAG5B,sBACE,GAAI5H,KAAKoE,OACP,MAAM,IAAI7D,MAAM,qBAGlB,MAAM7B,EAAIsB,KAAKwP,YAAYE,MAC3B,GAAIhR,EAEF,OADAsB,KAAKqP,OAAS,EACP3Q,EAET,GAAIsB,KAAKqP,MAAQrP,KAAKiP,eAAgB,CACpCjP,KAAKqP,OAAS,EACd,MAAMjG,EAAS,IAAIpJ,KAAKgP,YAAYhP,KAAKyI,IAAKzI,KAAKW,SAEnD,aADMyI,EAAOG,UDdJ,SAA0BH,GAOvC,OANAA,EAAOuG,cAAc,MAAO,CAAEC,IAAKrB,IACnCnF,EAAOuG,cAAc,SAAU,CAAEC,IAAKhB,IACtCxF,EAAOuG,cAAc,cAAe,CAAEC,IAAKlB,IAC3CtF,EAAOuG,cAAc,qBAAsB,CAAEC,IAAKjB,IAClDvF,EAAOuG,cAAc,SAAU,CAAEC,IAAKf,IAE/BzF,ECQIyG,CAAiBzG,GAE1B,OAAO,IAAIvH,QAASC,IAClB9B,KAAK8P,MAAMzK,KAAKvD,KAIZsN,iBAAiBnR,GACvB,MAAM8R,EAAI/P,KAAK8P,MAAME,QAMG,MALpBD,EACFA,EAAE9R,IAEF+B,KAAKqP,OAAS,EACdrP,KAAKwP,YAAYnK,KAAKpH,GACH,IAAf+B,KAAKqP,QACP,UAAArP,KAAKuP,iBAAL,cAAAvP,SCjGO,MAAMiQ,EACXpQ,YACWqL,GACjB,KADiBA,OAGnB,qBAA4BzC,GAC1B,MAAQa,QAAS0F,SAAsB,QAAN,qBAAa,IAE9C,OAAO,IAAIiB,EAAQ,IAAIlB,EACrBC,EACAvG,EACA,CAAEyH,aAAa,GAJU,IAStBzL,cACLtG,EACA2B,GAEA,OAAO,IAAImL,EAAgBjL,KAAKkL,KAAM/M,EAAM2B,GAGvCoJ,QACL,OAAOlJ,KAAKkL,KAAKhC,QAGZiH,oBACL,OAAOnQ,KAAKkL,MCjCT,SAASkF,EAAY9M,GAC1B,MAAQ,IAAGA,EAAEP,QAAQ,WAAY,WCDnC,MAAMsN,EAAa,KAKnB,MAAMC,EAAa,KACZ,SAASC,EAAWC,GAGzB,MAAQ,IAAGA,EAAIzN,QAAQuN,EAAY,SAGrC,MAAMG,EAAS,WACR,SAASC,EACdC,EACAC,GAEA,OAAOD,EAAK5N,QACV0N,EACCnN,GAjBK,IAiBiBsN,EAAYtN,EAAEyC,OAAO,IAjB/BhD,QAAQsN,EAAY,U,4eCMrC,MAAMQ,EAAa,CACjBC,aAAc,CACZ,kCACA,gCACA,uBACA,KACA5G,KAAK,IAEP6G,aAAc,8DACdC,oBAAqB,0DACrBC,WAAY,0BAEZC,OAAQ,oDAERC,OAAQ,qEACRC,UAAW,kDAEXC,UAAW,4GAEXC,WAAY,oDACZC,WAAY,0BACZC,cAAe,4CACfC,UAAW,sCAEXC,OAAQ,mCACRC,UAAW,8BAkDb,SAASC,EAASzL,GAChB,OFhFK,SAAsBA,GAC3B,MAAMhB,EAAmB,GAIzB,OAHA7G,OAAOwB,KAAKqG,GAAQ9C,QAASlC,IAC3BgE,EAAOE,KAAM,GAAE+K,EAAYjP,OAAOiP,EAAYjK,EAAOhF,SAEhDgE,EAAO+E,KAAK,KE2EZ2H,CAAa3L,EAAgBC,IAGtC,SAAS2L,GACNjR,EAAIiF,GACL0B,GAEA,MAAMuK,EF/ED,SAAsBC,GAC3B,MAAM7M,EAAiC,GACvC,IAAI8M,EAAU,GACVC,EAAa,GACbC,GAAQ,EACZ,IAAK,IAAIzS,EAAI,EAAGA,EAAIsS,EAAOpK,QAAS,CAClC,MAAM3J,EAAI+T,EAAOtS,GACjB,OAAQzB,GACN,IAAK,IACL,IAAK,KACL,IAAK,KACL,IAAK,KACCkU,IACFF,GAAWhU,GAEb,MACF,IAAK,KACHgU,GAAWD,EAAOtS,EAAI,GACtBA,GAAK,EACL,MACF,IAAK,IACHyS,GAASA,EACT,MACF,IAAK,IACCA,EACFF,GAAWhU,EACgB,MAAlB+T,EAAOtS,EAAI,KACpBwS,EAAaD,EACbA,EAAU,GACVvS,GAAK,GAEP,MACF,IAAK,IACCyS,EACFF,GAAWhU,GAEXkH,EAAO+M,GAAcD,EACrBC,EAAa,GACbD,EAAU,IAEZ,MACF,QACEA,GAAWhU,EAGfyB,GAAK,EAKP,OAHIwS,IACF/M,EAAO+M,GAAcD,GAEhB9M,EE6BQiN,CAAatM,GAC5BiM,EAAOlR,GAAKA,EAEZ,MAAMsE,EAAkC,GAExC,OAAKqC,GAOLA,EAAOnE,QAASsH,IACdxF,EAAOwF,GAAK/E,EAAiBmM,EAAOpH,MAE/BxF,IATL7G,OAAOyO,QAAQgF,GAAQ1O,QAAQ,EAAElC,EAAGmC,MAClC6B,EAAOhE,GAAKyE,EAAiBtC,KAExB6B,GASI,MAAMkN,UAA6CzS,IAOzDC,YACYqL,EACjB/M,EACA2B,EAAkB,GACDqE,EAAkB,CAAEC,QAAQ,IAE7CC,MAAMvE,GADN,KAJiBoL,OAIjB,KADiB/G,WACjB,kDATiF,IASjF,iBAPiC,IAUjCnE,KAAKsS,UAAYnU,EApFrBkE,eACE6I,EACAoH,EACAxS,EAAoB,IAEpB,MAAM7B,QAAUiN,EAAK3B,UACrB,UACQtL,EAAE4G,MAAM6L,EAAgBG,EAAWC,aAAc,CACrDyB,EAAGD,KAKL,MAAME,EAAalU,OAAOyO,QAAQjN,GAClC,IAAK,IAAIlC,EAAI,EAAGA,EAAI4U,EAAW5K,OAAQhK,GAAK,EAAG,CAE7C,MAAOuD,EAAGmC,GAAKkP,EAAW5U,GACtB0F,GAAKA,EAAE7B,cACHxD,EAAE4G,MAAM6L,EAAgBG,EAAWI,WAAY,CACnDsB,EAAGD,EACHG,EAAI,GAAEH,MAAcnR,aAEhBlD,EAAE4G,MAAM6L,EAAgBG,EAAWG,oBAAqB,CAC5DuB,EAAGD,EACHG,EAAI,GAAEH,MAAcnR,MACnB4B,QAAQ,OAAQwN,EAAWpP,aAExBlD,EAAE4G,MAAM6L,EAAgBG,EAAWI,WAAY,CACnDsB,EAAGD,EACHG,EAAI,GAAEH,MAAcnR,aAEhBlD,EAAE4G,MAAM6L,EAAgBG,EAAWE,aAAc,CACrDwB,EAAGD,EACHG,EAAI,GAAEH,MAAcnR,MACnB4B,QAAQ,OAAQwN,EAAWpP,OA5BpC,QAiCElD,EAAEyU,WA8CFC,CAAezH,EAAMlL,KAAKsS,UAAWxS,GAClC8S,KAAK,KACA5S,KAAK6S,UACP7S,KAAK6S,QAAQxP,QAASsH,GAAMA,KAC5B3K,KAAK6S,aAAUjS,KAGlBkS,MAAOtQ,IACNuQ,QAAQC,OAAOC,MAAO,2BAA0B9U,MAASqE,OAIrDvC,SACR,GAAID,KAAKmE,SAASC,OAChB,MAAM,IAAI7D,MAAM,qBAIpB,qBAA+D,IAAnC,GAAEM,GAAiC,EAA1BqS,EAA0B,kBACvDlT,KAAKmT,cAAc,SAAU3N,EAAe3E,GAAK+Q,EAASsB,IAGlE,qBACErS,EACAH,SAEMV,KAAKmT,cAAc,YAAa3N,EAAe3E,GAAK+Q,EAASlR,IAGrE,qBACEP,EACAC,EAFF,GAIiB,IADf,GAAES,GACa,EADNqS,EACM,YACf,MAAMjM,EAAMzB,EAAepF,GACrB4R,EAASJ,EAASsB,GAExB,GAAwB,OAApB/S,QACIH,KAAKmT,cAAc,YAAanB,EAAQ/K,OACzC,CACL,MAAMvI,QAAUsB,KAAKmT,cAAc,SAAUnB,EAAQ7R,EAAiB8G,GACtE,QAAWrG,IAAPC,GAAoBnC,EAAE0U,SAAW,GAAK1U,EAAE2U,KAAK,GAAG,KAAOxS,EACzD,MAAM,IAAIN,MAAM,qBAKtB,kBAIEJ,EACAC,EACAC,GAEA,IAAI+E,EAMJ,OAJEA,EADsB,OAApBjF,QACUH,KAAKmT,cAAc,YAAa3N,EAAepF,UAE/CJ,KAAKmT,cAAc,aAAchT,EAAiBqF,EAAepF,IAE1EgF,EAAIgO,SAGFtB,EAAc1M,EAAIiO,KAAK,GAAIhT,GAFzB,KAKX,qBAIEF,EACAC,EACAC,GAEA,IAAI+E,EAQJ,OAJEA,EAHGjF,EAE0B,OAApBA,QACGH,KAAKmT,cAAc,YAAa3N,EAAepF,UAE/CJ,KAAKmT,cAAc,gBAAiBhT,EAAiBqF,EAAepF,UAJpEJ,KAAKmT,cAAc,cAM1B/N,EAAIiO,KAAKrM,IAAK1D,GAAMwO,EAAcxO,EAAGjD,IAG9C,qBACEF,EACAC,GAEA,IAAIgF,EAMJ,OAJEA,EADsB,OAApBjF,QACUH,KAAKmT,cAAc,YAAa3N,EAAepF,UAE/CJ,KAAKmT,cAAc,SAAUhT,EAAiBqF,EAAepF,IAEpEgF,EAAIgO,SAGb,oBACEE,KACGzI,GAEC7K,KAAK6S,eACD,IAAIhR,QAASC,IACjB9B,KAAK6S,QAASxN,KAAKvD,KAIvB,IAAIyR,EAASvT,KAAKwT,cAAcF,GAMhC,OALKC,IACHA,EAAS7C,EAAgBG,EAAWyC,GAAY,CAAEf,EAAGvS,KAAKsS,YAC1DtS,KAAKwT,cAAcF,GAAaC,GAG3BvT,KAAKkL,KAAKrG,MAAM,CACrB1G,KAAO,GAAE6B,KAAKsS,aAAagB,IAC3BG,QAAS,QACTC,KAAMH,EACN1I,YC/OS,MAAM8I,EAGX9T,YACWqL,G,UACjB,KADiBA,O,EAHS,CAAE9G,QAAQ,I,EAIpC,c,EAAA,M,sFAEF,qBAA4BqE,GAC1B,MAAM,KAAEmL,SAAe,QAAN,qBAAa,IACxB1I,EAAO,IAAI0I,EAAK,CAAEC,iBAAkBpL,IAE1C,aADMyC,EAAKrG,MAAM,yCACV,IAAI8O,EAAWzI,GAGjBzG,cACLtG,EACA2B,GAEA,OAAO,IAAIuS,EAAmBrS,KAAKkL,KAAM/M,EAAM2B,EAAME,KAAKmE,UAGrD+E,QACL,OAAIlJ,KAAKmE,SAASC,OACTvC,QAAQC,WAEjB9B,KAAKmE,SAASC,QAAS,EAChBpE,KAAKkL,KAAK4I,OAGZ3D,oBACL,OAAOnQ,KAAKkL,M,6rBCFhB,SAAS6I,GAAYlV,EAAe2I,GAClC,OAAOA,EACJtG,KAAMuG,GAAUnJ,OAAOkB,UAAUC,eAAe1B,KAAKc,EAAO4I,IAGlD,MAAMuM,GAOZnU,YACYoU,EACAzM,EACA0M,GACjB,KAHiBD,iBAGjB,KAFiBzM,SAEjB,KADiB0M,UAGnB,UAAiBnU,GACf,OAAOC,KAAKiU,eAAe/L,UAAUlI,KAAKmU,QAAQpU,IAGpD,UAIEZ,EACAN,EACA2I,GAEA,GAAIxH,KAAKwH,OAAOtE,SAAS/D,GACvB,MAAM,IAAIoB,MAAM,+BAElB,MAAM6E,QAAYpF,KAAKiU,eAAexV,IAAIU,EAAKN,EAAO2I,GACtD,OAAOpC,EAAMpF,KAAKoU,UAAUhP,EAAK,CAAE,CAACjG,GAAMN,IAAW,KAGvD,aAIEM,EACAN,EACA2I,GAEA,QAAY5G,IAARzB,GAAqBa,KAAKwH,OAAOtE,SAAS/D,GAC5C,MAAM,IAAIoB,MAAM,+BAElB,MAAM6E,QAAYpF,KAAKiU,eAAeI,OAAOlV,EAAMN,EAAQ2I,GACrD8M,OAAiB1T,IAARzB,EAAqB,CAAE,CAACA,GAAMN,QAAU+B,EACvD,OAAOiB,QAAQ0S,IAAInP,EAAI4B,IAAK1D,GAAMtD,KAAKoU,UAAU9Q,EAAGgR,KAGtD,aACEnV,EACAN,EACA6B,EACAC,GAEA,GAAIX,KAAKwH,OAAOtE,SAAS/D,GACvB,MAAM,IAAIoB,MAAM,kCAElB,MAAM6C,QAAkBpD,KAAKmU,QAAQzT,EAAQ,CAAE,CAACvB,GAAMN,IACtD,OAAOmB,KAAKiU,eAAevT,OAAOvB,EAAKN,EAAOuE,EAAWzC,GAG3D,aACExB,EACAN,GAEA,GAAImB,KAAKwH,OAAOtE,SAAS/D,GACvB,MAAM,IAAIoB,MAAM,kCAElB,IAAKP,KAAKkU,QAAQM,UAChB,OAAOxU,KAAKiU,eAAevH,OAAOvN,EAAKN,GAGzC,MAAMyN,QAActM,KAAKiU,eAAeI,OAAOlV,EAAKN,EAAO,CAAC,OAK5D,aAJMgD,QAAQ0S,IAAIjI,EAAMtF,IAAI3E,gBACpBrC,KAAKkU,QAAQM,UAAWnK,SACxBrK,KAAKiU,eAAevH,OAAO,KAAMrC,EAAKxJ,OAEvCyL,EAAM1E,OAaf,cACEtE,EACAgR,GAEA,IAAIG,EACJ,GAAIzU,KAAKkU,QAAQQ,SAAWX,GAAYzQ,EAAGtD,KAAKwH,QAAS,CACvD,MAAMmN,EAAYL,EAAQ,SAAKA,GAAUhR,GAAMA,EAC/CmR,QAAkBzU,KAAKkU,QAAQQ,QAAQC,GAEzC,MAAMvR,EAAY,MAAKE,GAMvB,aALMzB,QAAQ0S,IAAIvU,KAAKwH,OAAOR,IAAI3E,UAC5B/D,OAAOkB,UAAUC,eAAe1B,KAAKuF,EAAGnC,KAC1CiC,EAAUjC,SAAWnB,KAAKkU,QAAQU,KAAKzT,EAAImC,EAAUnC,GAAIsT,OAGtDrR,EAaT,gBACEE,EACAgR,GAEA,IAAIG,EACJ,GAAIzU,KAAKkU,QAAQW,WAAad,GAAYzQ,EAAGtD,KAAKwH,QAAS,CACzD,MAAMmN,EAAYL,EAAQ,SAAKA,GAAUhR,GAAMA,EAC/CmR,QAAkBzU,KAAKkU,QAAQW,UAAUF,GAE3C,MAAMvR,EAAY,MAAKE,GAMvB,aALMzB,QAAQ0S,IAAIvU,KAAKwH,OAAOR,IAAI3E,UAC5B/D,OAAOkB,UAAUC,eAAe1B,KAAKuF,EAAGnC,KAC1CiC,EAAUjC,SAAWnB,KAAKkU,QAAQY,OAAO3T,EAAImC,EAAUnC,GAAIsT,OAGxDrR,GC3KI,MAAM2R,GAGZlV,YACYmV,G,UACjB,KADiBA,W,EACjB,K,EAAA,U,EAJyB,IAAIzO,I,6FAMxBI,IAAIxH,EAAQN,GACjBmB,KAAKiV,QAAQtN,OAAOxI,GACpBa,KAAKiV,QAAQtO,IAAIxH,EAAKN,GACtBmB,KAAKkV,QAGAzW,IAAIU,GACT,MAAMN,EAAQmB,KAAKiV,QAAQxW,IAAIU,GAI/B,OAHIa,KAAKiV,QAAQtN,OAAOxI,IACtBa,KAAKiV,QAAQtO,IAAIxH,EAAKN,GAEjBA,EAGF6N,OAAOvN,GACZa,KAAKiV,QAAQtN,OAAOxI,GAGd+V,QACN,KAAOlV,KAAKiV,QAAQ9M,KAAOnI,KAAKgV,UAC9BhV,KAAKiV,QAAQtN,OAAO3H,KAAKiV,QAAQnV,OAAOqV,OAAOtW,Q,uBCxBrD,MAAMuW,GAAM,cACNC,GAAU9R,OAAOyC,KAAQoP,GAAF,IAAU,QAmCxBE,OAhCmD,CAChEC,QAAS,CAACpW,EAAgBmE,KACxB,MAAMkS,EAAKC,KAAOC,YAJP,IAKLC,EAASF,KAAOG,eAAeR,GAAKjW,EAAKqW,GACzCK,EAAOF,EAAOjV,OAAO4C,EAAG,QACxBwS,EAAQH,EAAOG,QACrB,OAAOvS,OAAOwS,OAAO,CAACV,GAASG,EAAIK,EAAMC,KAG3CE,QAAS,CAAC7W,EAAgBmE,KACxB,IAAKA,EAAE2S,MAAM,EAAGZ,GAAQzN,QAAQsO,OAAOb,IACrC,MAAM,IAAI9U,MAAM,gCAGlB,MAAMiV,EAAKlS,EAAE2S,MAAMZ,GAAQzN,OAAQyN,GAAQzN,OAhBhC,IAiBLuO,EAAY7S,EAAE2S,MAAMZ,GAAQzN,OAjBvB,IAmBLwO,EAAWX,KAAOY,iBAAiBjB,GAAKjW,EAAKqW,GACnD,IAAIc,EAAYF,EAAS1V,OAAOyV,OAAWvV,EAAW,QAGtD,OAFA0V,GAAaF,EAASN,MAAM,QAErBQ,GAGTC,YAAa,IAAiBd,KAC3Be,gBAAgBf,KAAOC,YAAY,KAEtCe,aAAetX,GAA2BA,EAAIuX,SAE9CC,eAAiB7Q,GAA4B2P,KAAOe,gBAAgB1Q,ICZtE,SAAS8Q,GACP1C,GAKA,MAAO,CAAC1M,EAAcyM,IAChBzM,GAAUyM,EAELC,EAAQ1M,EAAQyM,GAElBC,EAWX,SAAS2C,GACPhP,EACAiP,EAA6CxB,IAE7C,MAAMnW,EAAM2X,EAAGH,eAAe9O,GAE9B,OAAO+O,GAAc,CACnBpP,EACAyM,IACG,IAAID,GAAqCC,EAAgBzM,EAAQ,CACpEoN,KAAM,CAACzT,EAAGmC,IAA4BwT,EAAGvB,QAAQpW,EAAKqG,EAAelC,IACrEwR,OAAQzS,MAAOlB,EAAGmC,IAAoBsC,QAAuBkR,EAAGd,QAAQ7W,EAAKmE,OAejF,SAASyT,GACPC,EACAC,EAAY,EACZH,EAA6CxB,IAE7C,MAAM4B,EAAQ,IAAInC,GAAmBkC,GAE/BE,EAAU9U,MACd+U,EACAjR,KAEA,MAAM,GAAEtF,GAAOsF,EAEf,QAAWvF,IAAPC,EACF,MAAM,IAAIN,MAAM,kCAGlB,MAAMgT,EAAS2D,EAAMzY,IAAIoC,GACzB,GAAI0S,EACF,OAAOA,EAET,IAAIpU,EACJ,MAAMkL,QAAa2M,EAAcvY,IAAI,KAAMoC,EAAI,CAAC,QAChD,GAAIwJ,EACFlL,EAAM2X,EAAGH,eAAetM,EAAKlL,SACxB,CACL,IAAKiY,EACH,MAAM,IAAI7W,MAAM,sCAElBpB,QAAY2X,EAAGP,oBACTS,EAAc9O,IAAI,CAAErH,KAAI1B,IAAK2X,EAAGL,aAAatX,KAGrD,OADA+X,EAAMvQ,IAAI9F,EAAI1B,GACPA,GAGHkY,EAAYhV,OAASxB,eACnBmW,EAActK,OAAO,KAAM7L,GACjCqW,EAAMxK,OAAO7L,IAGf,OAAO+V,GAAc,CACnBpP,EACAyM,IACG,IAAID,GAAoCC,EAAgBzM,EAAQ,CACnEoN,KAAM,CAACzT,EAAGmC,EAAGnE,IAA8B2X,EAAGvB,QAAQpW,EAAKuG,KAAKC,UAAUrC,IAC1EwR,OAAQzS,MAAOlB,EAAGmC,EAAGnE,IAAsBuG,KAAKO,YAAY6Q,EAAGd,QAAQ7W,EAAKmE,IAC5EoR,QAASyC,EAAQ/X,KAAK,MAAM,GAC5ByV,UAAWsC,EAAQ/X,KAAK,MAAM,GAC9BoV,UAAW6C,KAiBf,SAASC,GACPC,EACAP,EACAC,EAAY,EACZH,EAA6CxB,IAO7C,OAAOyB,GALQF,GAAaU,EAAYT,EACfU,GACvB,CAAC,OACDR,GAEuCC,EAAWH,G,wVC3ItD,MAAMW,GAIG5X,YACYoU,EACAyD,EACAC,GACjB,KAHiB1D,iBAGjB,KAFiByD,aAEjB,KADiBC,mBAGnB,UAAiB5X,GACf,OAAOC,KAAKiU,eAAe/L,IAAInI,GAGjC,UAIEI,EACAC,EACAC,GAEA,MAAM+E,QAAYpF,KAAKiU,eAAexV,IACpC0B,EACAC,EACAJ,KAAK4X,iBAAiBvX,IAExB,OAAO+E,EAAMpF,KAAK6X,eAAezS,EAAK/E,GAAoB,KAG5D,aAIEF,EACAC,EACAC,GAOA,aALmBL,KAAKiU,eAAeI,OACrClU,EACAC,EACAJ,KAAK4X,iBAAiBvX,KAEZ2G,IAAK5B,GAAQpF,KAAK6X,eAAezS,EAAK/E,IAGpD,aACEF,EACAC,EACAM,EACAC,GAEA,OAAOX,KAAKiU,eAAevT,OAAOP,EAAiBC,EAAaM,EAAQC,GAG1E,aACER,EACAC,GAEA,OAAOJ,KAAKiU,eAAevH,OAAOvM,EAAiBC,GAG7CwX,iBAENvX,GACA,OAAIA,GAAoBL,KAAK2X,iBACpB,IAAItX,KAAqBL,KAAK2X,kBAEhCtX,EAGDwX,eACNzS,EACA/E,GAEA,GAAIA,IAAqBA,EAAiBa,KAAM4W,GAAS9X,KAAK0X,WAAWI,IACvE,OAAO1S,EAET,MAAMD,E,kWAAyB,IAAKC,GASpC,OARc/E,GAAoB/B,OAAOwB,KAAKE,KAAK0X,aAC7CrU,QAASlE,IACb,MAAM2Y,EAAO3Y,EACP4Y,EAAY/X,KAAK0X,WAAWI,GAC9BC,IACF5S,EAAO2S,GAAQC,EAAU3S,EAAI0S,GAAO1S,MAGjCD,GAuCI6S,OArBf,SAIEL,EACAD,EACAzD,GAEA,OAAIA,EACK,IAAIwD,GACTxD,EACAyD,EACAC,GAGG,IAAIF,GACTC,EACAC,ICnGWM,UC3BA,MACb,qBAA4BxP,GAC1B,IAAIyP,EACJ,GAAIzP,EAAI0P,WAAW,UACjBD,EAAU1P,OACL,GAAIC,EAAI0P,WAAW,WACxBD,EAAU/O,OACL,GAAIV,EAAI0P,WAAW,SACxBD,EAAUjI,MACL,KAAIxH,EAAI0P,WAAW,YAGxB,MAAM,IAAI5X,MAAO,2CAA0CkI,GAF3DyP,EAAUvE,EAKZ,IACE,aAAauE,EAAQ3O,QAAQd,GAC7B,MAAOjG,GACP,MAAM,IAAIjC,MAAO,kCAAiCkI,OAASjG,EAAEC","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"collection-storage\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"collection-storage\"] = factory();\n\telse\n\t\troot[\"collection-storage\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import type { Collection, UpdateOptions } from './Collection';\nimport type { IDable } from './IDable';\nimport type { DBKeys } from './DB';\n\nexport default abstract class BaseCollection<T extends IDable> implements Collection<T> {\n  protected constructor(\n    protected readonly keys: DBKeys<T>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    await this.preAct();\n    return this.internalAdd(entry);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.preAct();\n    return this.internalGet(searchAttribute, searchValue, returnAttributes);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (searchAttribute && !this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.preAct();\n    return this.internalGetAll(searchAttribute, searchValue, returnAttributes);\n  }\n\n  public async update<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options: UpdateOptions = {},\n  ): Promise<void> {\n    if (searchAttribute === 'id' && update.id !== undefined && update.id !== searchValue) {\n      throw new Error('Cannot update ID');\n    }\n    if (options.upsert) {\n      if (searchAttribute !== 'id') {\n        throw new Error(`Can only upsert by ID, not ${searchAttribute}`);\n      }\n      let withoutId = update;\n      if (Object.prototype.hasOwnProperty.call(update, 'id')) {\n        withoutId = { ...update };\n        delete withoutId.id;\n      }\n      await this.preAct();\n      return this.internalUpsert(searchValue as T['id'], withoutId, options);\n    }\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    if (\n      !this.isIndexUnique(searchAttribute) &&\n      Object.keys(update).some((k) => this.isIndexUnique(k))\n    ) {\n      throw new Error('duplicate');\n    }\n\n    await this.preAct();\n    return this.internalUpdate(searchAttribute, searchValue, update, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.preAct();\n    return this.internalRemove(searchAttribute, searchValue);\n  }\n\n  protected isIndexed(attribute: string): boolean {\n    return (\n      attribute === 'id' ||\n      this.keys[attribute as keyof DBKeys<T>] !== undefined\n    );\n  }\n\n  protected isIndexUnique(attribute: string): boolean {\n    const keyOptions = this.keys[attribute as keyof DBKeys<T>];\n    return (\n      attribute === 'id' ||\n      Boolean(keyOptions && keyOptions.unique)\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  protected preAct(): Promise<void> | void {}\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.internalGetAll(searchAttribute, searchValue, returnAttributes);\n    return all[0] ?? null;\n  }\n\n  protected internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n    options: UpdateOptions,\n  ): Promise<void> {\n    return this.internalUpdate('id', id, update, options);\n  }\n\n  protected abstract internalAdd(entry: T): Promise<void>;\n\n  protected abstract internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]>;\n\n  protected abstract internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options: UpdateOptions,\n  ): Promise<void>;\n\n  protected abstract internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number>;\n}\n","module.exports = require(\"crypto\");","function sleep(millis: number): Promise<void> | null {\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nexport default (\n  shouldRetry: (e: any) => boolean,\n  maxAttempts = 5,\n  baseDelayMillis = 20,\n  attemptDelayMillis = 200,\n  randomDelayMillis = 200,\n) => async <T>(fn: () => Promise<T> | T): Promise<T> => {\n  for (let attempt = 1; ; attempt += 1) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      return await fn();\n    } catch (e) {\n      if (!shouldRetry(e)) {\n        throw e;\n      }\n      if (attempt >= maxAttempts) {\n        e.message += ` (attempted ${attempt} times)`;\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(\n      baseDelayMillis +\n      attempt * attemptDelayMillis +\n      Math.random() * randomDelayMillis,\n    );\n  }\n};\n","module.exports = require(\"mongodb\");","module.exports = require(\"url\");","import {\n  Collection as MCollection,\n  Binary as MBinary,\n} from 'mongodb';\nimport type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport retry from '../helpers/retry';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\ninterface State {\n  closed: boolean;\n}\n\nconst DOT_REG = /\\./g;\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return encodeURIComponent(name).replace(DOT_REG, '%2E');\n}\n\nfunction fieldNameFromMongo(name: string): string {\n  if (name === MONGO_ID) {\n    return ID;\n  }\n  return decodeURIComponent(name);\n}\n\nconst withUpsertRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message.includes('E11000')\n));\n\nfunction convertToMongo<T extends Partial<IDable>>(\n  value: T,\n): Record<string, unknown> {\n  const converted: Record<string, unknown> = {};\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    if (v instanceof Buffer) {\n      v = new MBinary(v);\n      // eslint-disable-next-line no-underscore-dangle\n    } else if (typeof v === 'object' && v._bsontype) {\n      throw new Error('Must use Buffer to provide binary data');\n    }\n    converted[fieldNameToMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: Record<string, unknown> | null,\n): T | null {\n  if (!value) {\n    return null;\n  }\n  const converted: T = {} as any;\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype === 'Binary') {\n      v = v.buffer;\n    }\n    (converted as any)[fieldNameFromMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction makeMongoProjection(\n  names?: readonly string[],\n): Record<string, boolean> {\n  const projection: Record<string, boolean> = {};\n  if (names) {\n    projection[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      projection[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return projection;\n}\n\nexport default class MongoCollection<T extends IDable> extends BaseCollection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    keys: DBKeys<T> = {},\n    private readonly stateRef: State = { closed: false },\n  ) {\n    super(keys);\n    Object.keys(keys).forEach((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      const mongoKey = fieldNameToMongo(keyName);\n      if (options?.unique) {\n        collection.createIndex({ [mongoKey]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [mongoKey]: 'hashed' });\n      }\n    });\n  }\n\n  protected async internalAdd(value: T): Promise<void> {\n    await this.getCollection().insertOne(convertToMongo(value));\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    await withUpsertRetry(() => this.getCollection().updateOne(\n      convertToMongo({ id }),\n      { $set: convertToMongo(update) },\n      { upsert: true },\n    ));\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n  ): Promise<void> {\n    const query = convertToMongo({ [searchAttribute]: searchValue });\n    const mongoUpdate = { $set: convertToMongo(update) };\n    if (this.isIndexUnique(searchAttribute)) {\n      await this.getCollection().updateOne(query, mongoUpdate);\n    } else {\n      await this.getCollection().updateMany(query, mongoUpdate);\n    }\n  }\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.getCollection().findOne(\n      convertToMongo({ [searchAttribute]: searchValue }),\n      { projection: makeMongoProjection(returnAttributes) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const cursor = this.getCollection().find(\n      searchAttribute ? convertToMongo({ [searchAttribute]: searchValue }) : {},\n      { projection: makeMongoProjection(returnAttributes) },\n    );\n\n    const result: Pick<T, F[-1]>[] = [];\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const result = await this.getCollection().deleteMany(\n      convertToMongo({ [searchAttribute]: searchValue }),\n    );\n    return result.deletedCount || 0;\n  }\n\n  private getCollection(): MCollection {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    return this.collection;\n  }\n}\n","module.exports = require(\"ioredis\");","module.exports = require(\"pg\");","export function serialiseValue(\n  value: unknown,\n): string {\n  if (value instanceof Buffer) {\n    return `B${value.toString('base64')}`;\n  }\n  return `J${JSON.stringify(value)}`;\n}\n\nexport function deserialiseValue(\n  value: string,\n): unknown {\n  const type = value[0];\n  const data = value.substr(1);\n  if (type === 'B') {\n    return Buffer.from(data, 'base64');\n  }\n  if (type === 'J') {\n    return JSON.parse(data);\n  }\n  throw new Error(`Unknown data type ${type}`);\n}\n\nexport function serialiseRecord<T>(\n  record: T,\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  Object.keys(record).forEach((k) => {\n    result[k] = serialiseValue((record as any)[k]);\n  });\n  return result;\n}\n\nexport function deserialiseRecord(\n  record: Record<string, string | null>,\n): Record<string, unknown> {\n  const result: Record<string, any> = {};\n  Object.keys(record).forEach((k) => {\n    const v = record[k];\n    if (v) {\n      result[k] = deserialiseValue(v);\n    }\n  });\n  return result;\n}\n","import type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\n\nfunction sleep(millis: number): Promise<void> | void {\n  if (!millis) {\n    return undefined;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\ninterface State {\n  closed: boolean;\n}\n\nexport default class MemoryCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly data: Map<string, Record<string, string>>;\n\n  private readonly indices: Partial<Record<keyof T, Map<string, Set<string>>>> = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n    private readonly stateRef: State = { closed: false },\n  ) {\n    super(keys);\n\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      this.indices[k as keyof T] = new Map();\n    });\n  }\n\n  protected preAct(): Promise<void> | void {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    return sleep(this.simulatedLatency);\n  }\n\n  protected async internalAdd(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    this.internalCheckDuplicates(serialised, true);\n    this.data.set(serialised.id, serialised);\n    this.internalPopulateIndices(serialised);\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    if (this.data.has(serialiseValue(id))) {\n      await this.internalUpdate('id', id, update);\n    } else {\n      await this.internalAdd({ id, ...update } as T);\n    }\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n  ): Promise<void> {\n    const sIds = this.internalGetSerialisedIds(searchAttribute, searchValue);\n\n    const updates = sIds.map((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      const oldValue = deserialiseRecord(oldSerialised) as T;\n      const newValue = { ...oldValue, ...update };\n      if (newValue.id !== oldValue.id) {\n        throw new Error('Cannot update ID');\n      }\n      const newSerialised = serialiseRecord(newValue);\n      return { oldSerialised, newSerialised };\n    });\n\n    updates.forEach(({ oldSerialised }) => this.internalRemoveIndices(oldSerialised));\n    try {\n      updates.forEach(({ newSerialised }) => this.internalCheckDuplicates(newSerialised, false));\n    } catch (e) {\n      updates.forEach(({ oldSerialised }) => this.internalPopulateIndices(oldSerialised));\n      throw e;\n    }\n    updates.forEach(({ newSerialised }) => {\n      this.data.set(newSerialised.id, newSerialised);\n      this.internalPopulateIndices(newSerialised);\n    });\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    let sIds: string[];\n    if (searchAttribute) {\n      sIds = this.internalGetSerialisedIds(searchAttribute, searchValue!);\n    } else {\n      sIds = [...this.data.keys()];\n    }\n    return sIds.map((sId) => applyFilter(\n      deserialiseRecord(this.data.get(sId)!) as T,\n      returnAttributes,\n    ));\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const sIds = this.internalGetSerialisedIds(searchAttribute, searchValue);\n    sIds.forEach((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      this.internalRemoveIndices(oldSerialised);\n      this.data.delete(sId);\n    });\n\n    return sIds.length;\n  }\n\n  private internalGetSerialisedIds<K extends keyof T>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): string[] {\n    const sKey = serialiseValue(searchValue);\n    if (searchAttribute === 'id') {\n      return this.data.has(sKey) ? [sKey] : [];\n    }\n    const index = this.indices[searchAttribute];\n    if (!index) {\n      throw new Error(`Requested key ${searchAttribute} not indexed`);\n    }\n    const sIds = index.get(sKey);\n    return sIds ? [...sIds] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(\n    serialisedValue: Record<string, string>,\n    checkId: boolean,\n  ): void {\n    if (checkId && this.data.has(serialisedValue.id)) {\n      throw new Error('duplicate');\n    }\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      if (this.isIndexUnique(key) && index.has(serialisedValue[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      const v = serialisedValue[key];\n      let o = index.get(v);\n      if (!o) {\n        o = new Set<string>();\n        index.set(v, o);\n      }\n      o.add(serialisedValue.id);\n    });\n  }\n\n  private internalRemoveIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      const v = serialisedValue[key];\n      const o = index.get(v)!;\n      o.delete(serialisedValue.id);\n      if (!o.size) {\n        index.delete(v);\n      }\n    });\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport type { DB, DBKeys } from '../interfaces/DB';\nimport type { IDable } from '../interfaces/IDable';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb implements DB {\n  private readonly simulatedLatency: number;\n\n  private readonly mapTables = new Map<string, MemoryCollection<any>>();\n\n  private readonly stateRef = { closed: false };\n\n  public constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MemoryCollection<T> {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n        this.stateRef,\n      ));\n    }\n    return this.mapTables.get(name)! as MemoryCollection<T>;\n  }\n\n  public close(): void {\n    this.stateRef.closed = true;\n  }\n}\n","import type { Db as MongoDbT, MongoClient as MongoClientT } from 'mongodb';\nimport type { DB, DBKeys } from '../interfaces/DB';\nimport type { IDable } from '../interfaces/IDable';\nimport type MongoCollectionT from './MongoCollection';\n\nfunction escapeName(name: string): string {\n  return encodeURIComponent(name);\n}\n\nexport default class MongoDb implements DB {\n  private readonly stateRef = { closed: false };\n\n  private constructor(\n    private readonly client: MongoClientT,\n    private readonly MongoCollection: typeof MongoCollectionT,\n  ) {}\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const {\n      default: MongoCollection,\n    } = await import(/* webpackMode: \"eager\" */ './MongoCollection');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client, MongoCollection);\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MongoCollectionT<T> {\n    const collection = this.client.db().collection(escapeName(name));\n    return new this.MongoCollection(collection, keys, this.stateRef);\n  }\n\n  public async close(): Promise<void> {\n    this.stateRef.closed = true;\n    return this.client.close();\n  }\n\n  public getDb(): MongoDbT {\n    return this.client.db();\n  }\n}\n","import type {\n  Redis,\n  Pipeline,\n  MultiOptions,\n  Ok,\n} from 'ioredis';\n\n// Thanks, https://stackoverflow.com/a/50014868/1180785\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U : never;\n\ntype PipelineVersions<I> = {\n  [K in keyof I]: (...args: ArgumentTypes<I[K]>) => Pipeline & PipelineVersions<I>;\n};\n\ninterface RedisWithExtendedPipeline<I> extends Redis {\n  multi(commands?: string[][], options?: MultiOptions): Pipeline & PipelineVersions<I>;\n  multi(options: { pipeline: false }): Promise<Ok>;\n}\n\nexport type ExtendedRedis<I> = I & RedisWithExtendedPipeline<I>;\n\nexport async function multiExec(\n  client: Redis,\n  commands: string[][],\n): Promise<[unknown, any][] | null> {\n  if (!commands.length) {\n    return [];\n  }\n  return client.multi(commands).exec();\n}\n\nexport function minifyLuaScript(\n  lines: string[],\n  ...argNames: string[]\n): string {\n  let combined = lines.map((ln) => ln.trim()).join(' ');\n  argNames.forEach((name, i) => {\n    combined = combined.replace(new RegExp(`\\\\$${name}\\\\b`, 'g'), `ARGV[${i + 1}]`);\n  });\n  return combined;\n}\n","import type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { UpdateOptions } from '../interfaces/Collection';\nimport type { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\nimport type RedisConnectionPool from './RedisConnectionPool';\nimport { multiExec } from './helpers';\nimport type { ERedis } from './scripts';\n\ninterface Key<T> {\n  key: keyof T & string;\n  prefix: string;\n}\n\ninterface InternalPatch {\n  sId: string;\n  oldSerialised: Record<string, string | null>;\n  newSerialised: Record<string, string>;\n}\n\nconst notUndefined = <T>(item?: T): item is T => (item !== undefined);\n\nfunction makeIndexKeys(\n  keys: Key<any>[],\n  partialSerialisedValue: Record<string, string | null>,\n): string[] {\n  return keys\n    .filter(({ key }) => partialSerialisedValue[key])\n    .map(({ key, prefix }) => `${prefix}:${partialSerialisedValue[key]}`);\n}\n\nfunction parseItem(\n  item: (string | null)[] | Record<string, string | null>,\n  fields?: readonly string[],\n): Record<string, string | null> {\n  if (!fields) {\n    return item as any;\n  }\n  const result: Record<string, string | null> = {};\n  for (let f = 0; f < fields.length; f += 1) {\n    result[fields[f]] = (item as any)[f];\n  }\n  return result;\n}\n\nfunction itemHasContent(item: Record<string, string | null>): boolean {\n  return Object.values(item).some((v) => (v !== null));\n}\n\nasync function unwatchAll(client: ERedis): Promise<void> {\n  await client.unwatch();\n}\n\nasync function mapAwaitSync<T, O>(\n  values: T[],\n  fn: (value: T) => Promise<O>,\n): Promise<O[]> {\n  const result: O[] = [];\n  for (let i = 0; i < values.length; i += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    result.push(await fn(values[i]));\n  }\n  return result;\n}\n\nexport default class RedisCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly keyPrefixes: { [K in keyof T]?: string } = {};\n\n  private readonly uniqueKeys: Key<T>[] = [];\n\n  private readonly nonUniqueKeys: Key<T>[] = [];\n\n  public constructor(\n    private readonly pool: RedisConnectionPool,\n    private readonly prefix: string,\n    keys: DBKeys<T> = {},\n  ) {\n    super(keys);\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      const keyPrefix = `${prefix}-${key}`;\n      this.keyPrefixes[key] = keyPrefix;\n      const keyInfo = { key, prefix: keyPrefix };\n      if (keys[key]!.unique) {\n        this.uniqueKeys.push(keyInfo);\n      } else {\n        this.nonUniqueKeys.push(keyInfo);\n      }\n    });\n  }\n\n  protected internalAdd(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    return this.pool.withConnection(async (client) => {\n      const added = await this.runAdd(client, serialised, false);\n      if (!added) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  protected internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    { upsert }: UpdateOptions,\n  ): Promise<void> {\n    const patchSerialised = serialiseRecord(update);\n    const sKey = serialiseValue(searchValue);\n\n    if (searchAttribute === 'id') {\n      return this.pool.retryWithConnection(async (client) => {\n        const patch = await this.getUpdatePatch(client, sKey, patchSerialised);\n        if (patch) {\n          await this.runUpdates(client, [patch]);\n        } else if (upsert) {\n          const insertValue = { ...patchSerialised, id: sKey };\n          if (!await this.runAdd(client, insertValue, true)) {\n            throw new Error('duplicate');\n          }\n        }\n      }, unwatchAll);\n    }\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      const patches = (await mapAwaitSync(\n        sIds,\n        (sId) => this.getUpdatePatch(client, sId, patchSerialised),\n      )).filter(notUndefined);\n      await this.runUpdates(client, patches);\n    }, unwatchAll);\n  }\n\n  protected internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const sKey = serialiseValue(searchValue);\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey))[0];\n      if (sId === undefined) {\n        return null;\n      }\n      const results = await this.getByKeysKeepWatches(client, [sId], returnAttributes);\n      return results[0] ?? null;\n    }, unwatchAll);\n  }\n\n  protected internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    return this.pool.retryWithConnection(async (client) => {\n      let sIds: string[];\n      if (searchAttribute) {\n        const sKey = serialiseValue(searchValue);\n        sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      } else {\n        sIds = await client.keys(this.makeKey('*'));\n        const cut = this.prefix.length + 1;\n        sIds = sIds.map((v) => v.substr(cut));\n      }\n      return this.getByKeysKeepWatches(client, sIds, returnAttributes);\n    }, unwatchAll);\n  }\n\n  protected internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const sKey = serialiseValue(searchValue);\n    const indexedKeys = Object.keys(this.keys);\n    indexedKeys.push('id');\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      const items = (await mapAwaitSync(\n        sIds,\n        (sId) => this.rawByKeyKeepWatches(client, sId, indexedKeys),\n      )).filter(notUndefined);\n\n      if (items.length === 0) {\n        return 0;\n      }\n\n      const pipeline = client.multi();\n      items.forEach((item) => {\n        const uniqueKeys = makeIndexKeys(this.uniqueKeys, item);\n        const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, item);\n        pipeline.remove(\n          1 + uniqueKeys.length + nonUniqueKeys.length,\n          this.makeKey(item.id!),\n          ...uniqueKeys,\n          ...nonUniqueKeys,\n          item.id!,\n        );\n      });\n      await pipeline.exec();\n      return items.length;\n    }, unwatchAll);\n  }\n\n  private makeKey(serialisedId: string): string {\n    return `${this.prefix}:${serialisedId}`;\n  }\n\n  private async runAdd(\n    client: ERedis,\n    { id, ...serialised }: Record<string, string>,\n    checkWatch: boolean,\n  ): Promise<boolean> {\n    const uniqueKeys = makeIndexKeys(this.uniqueKeys, serialised);\n    const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, serialised);\n\n    const keyCount = 1 + uniqueKeys.length + nonUniqueKeys.length;\n    const params = [\n      this.makeKey(id),\n      ...uniqueKeys,\n      ...nonUniqueKeys,\n      uniqueKeys.length,\n      'id', // ID is always first in flattened key/value pairs\n      id,\n      ...Object.entries(serialised).flat(),\n    ];\n\n    if (!checkWatch) {\n      return Boolean(await client.add(keyCount, ...params));\n    }\n\n    const result = await client\n      .multi()\n      .add(keyCount, ...params)\n      .exec();\n    if (!result) {\n      throw new Error('transient error');\n    }\n    return Boolean(result[0][1]);\n  }\n\n  private async getUpdatePatch(\n    client: ERedis,\n    sId: string,\n    patchSerialised: Record<string, string>,\n  ): Promise<InternalPatch | undefined> {\n    await client.watch(this.makeKey(sId));\n    const oldSerialised = await this.rawByKeyKeepWatches(\n      client,\n      sId,\n      Object.keys(this.keys).filter((k) => patchSerialised[k]),\n    );\n    if (!oldSerialised) {\n      return undefined;\n    }\n    const newSerialised = { ...patchSerialised };\n    Object.keys(newSerialised).forEach((k) => {\n      if (oldSerialised[k] === newSerialised[k]) {\n        delete newSerialised[k];\n        delete oldSerialised[k];\n      }\n    });\n    return { sId, newSerialised, oldSerialised };\n  }\n\n  private async runUpdates(\n    client: ERedis,\n    patches: InternalPatch[],\n  ): Promise<void> {\n    const argsList = patches\n      .map((patch) => this.makeUpdateArgs(patch))\n      .filter(notUndefined);\n\n    if (!argsList.length) {\n      return;\n    }\n\n    if (argsList.length === 1) {\n      const results = await client.multi()\n        .update(argsList[0][0], argsList[0][1])\n        .exec();\n\n      if (!results) {\n        throw new Error('transient error');\n      }\n      if (!results[0][1]) {\n        throw new Error('duplicate');\n      }\n      return;\n    }\n\n    const updateCheckResults = await mapAwaitSync(\n      argsList,\n      (updateArgs) => client.checkUpdate(updateArgs[0], updateArgs[1]),\n    );\n    if (updateCheckResults.some((r) => !r)) {\n      throw new Error('duplicate');\n    }\n\n    let chain = client.multi();\n    argsList.forEach((updateArgs) => {\n      chain = chain.updateWithoutCheck(updateArgs[0], updateArgs[1]);\n    });\n    const results = await chain.exec();\n\n    if (!results) {\n      throw new Error('transient error');\n    }\n  }\n\n  private makeUpdateArgs(\n    { sId, oldSerialised, newSerialised }: InternalPatch,\n  ): [number, any[]] | undefined {\n    const diff = Object.entries(newSerialised).flat();\n    if (!diff.length) {\n      return undefined; // nothing changed\n    }\n    const patchUniqueKeys = makeIndexKeys(this.uniqueKeys, newSerialised);\n    const patchNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, newSerialised);\n    const oldUniqueKeys = makeIndexKeys(this.uniqueKeys, oldSerialised);\n    const oldNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, oldSerialised);\n    if (\n      oldUniqueKeys.length !== patchUniqueKeys.length ||\n      oldNonUniqueKeys.length !== patchNonUniqueKeys.length\n    ) {\n      throw new Error('unexpected key mismatch with old value');\n    }\n    const keyCount = 1 + (patchUniqueKeys.length + patchNonUniqueKeys.length) * 2;\n    const params = [\n      this.makeKey(sId),\n      ...patchUniqueKeys,\n      ...patchNonUniqueKeys,\n      ...oldUniqueKeys,\n      ...oldNonUniqueKeys,\n      patchUniqueKeys.length,\n      patchUniqueKeys.length + patchNonUniqueKeys.length,\n      sId,\n      ...diff,\n    ];\n    return [keyCount, params];\n  }\n\n  private async getByKeysKeepWatches<F extends readonly (keyof T & string)[]>(\n    client: ERedis,\n    serialisedIds: string[],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const results = await multiExec(\n      client,\n      serialisedIds\n        .map((sId) => this.makeKey(sId))\n        .map((k) => (fields ? ['hmget', k, ...fields] : ['hgetall', k])),\n    );\n    if (!results) {\n      throw new Error('transient error');\n    }\n    return results\n      .map(([, item]: [unknown, any]) => parseItem(item, fields))\n      .filter(itemHasContent)\n      .map(deserialiseRecord) as T[];\n  }\n\n  private async rawByKeyKeepWatches(\n    client: ERedis,\n    serialisedId: string,\n    fields?: readonly string[],\n  ): Promise<Record<string, string | null> | undefined> {\n    const key = this.makeKey(serialisedId);\n    let item;\n    if (fields) {\n      if (!fields.length) {\n        // just check existence\n        const exists = await client.exists(key);\n        return exists ? {} : undefined;\n      }\n      item = await client.hmget(key, ...fields);\n    } else {\n      item = await client.hgetall(key);\n    }\n    const parsed = parseItem(item, fields);\n    return itemHasContent(parsed) ? parsed : undefined;\n  }\n\n  private async getAndWatchBySerialisedKey(\n    client: ERedis,\n    keyName: keyof T,\n    serialisedValue: string,\n  ): Promise<string[]> {\n    if (keyName === 'id') {\n      return [serialisedValue];\n    }\n    const keyPrefix = this.keyPrefixes[keyName];\n    if (!keyPrefix) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const keyAddress = `${keyPrefix}:${serialisedValue}`;\n    await client.watch(keyAddress);\n    return client.smembers(keyAddress);\n  }\n}\n","import type { Redis as RedisT } from 'ioredis';\nimport { minifyLuaScript, ExtendedRedis } from './helpers';\n\nexport interface ScriptExtensions {\n  add(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  update(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  checkUpdate(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  updateWithoutCheck(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n  remove(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n}\n\nexport type ERedis = ExtendedRedis<ScriptExtensions>;\n\n// KEYS = [id, ...uniqueKeys, ...nonUniqueKeys]\nconst SCRIPT_ADD = minifyLuaScript([\n  'if redis.call(\"exists\",KEYS[1])==1 then',\n  '  return 0',\n  'end',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 2))',\n  'for k=2,#KEYS do',\n  '  redis.call(\"sadd\",KEYS[k],ARGV[3])',\n  'end',\n  'return 1',\n], 'uniqueKeyCount');\n\nconst FRAG_CHECK_UPDATE = [\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n];\n\nconst FRAG_UPDATE = [\n  'local tkc=tonumber($totalKeyCount)',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 4))',\n  'for k=1,tkc do',\n  '  redis.call(\"smove\",KEYS[1+tkc+k],KEYS[1+k],$id)',\n  'end',\n];\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_CHECK_UPDATE = minifyLuaScript([\n  ...FRAG_CHECK_UPDATE,\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE_WITHOUT_CHECK = minifyLuaScript([\n  ...FRAG_UPDATE,\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE = minifyLuaScript([\n  ...FRAG_CHECK_UPDATE,\n  ...FRAG_UPDATE,\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...keys]\nconst SCRIPT_REMOVE = minifyLuaScript([\n  'redis.call(\"del\",KEYS[1])',\n  'for k=2,#KEYS do',\n  '  redis.call(\"srem\",KEYS[k],$id)',\n  'end',\n], 'id');\n\nexport default function defineAllScripts(client: RedisT): ERedis {\n  client.defineCommand('add', { lua: SCRIPT_ADD });\n  client.defineCommand('update', { lua: SCRIPT_UPDATE });\n  client.defineCommand('checkUpdate', { lua: SCRIPT_CHECK_UPDATE });\n  client.defineCommand('updateWithoutCheck', { lua: SCRIPT_UPDATE_WITHOUT_CHECK });\n  client.defineCommand('remove', { lua: SCRIPT_REMOVE });\n\n  return client as ERedis;\n}\n","import type { Redis as RedisT, RedisOptions as RedisOptionsT } from 'ioredis';\nimport defineAllScripts, { ERedis } from './scripts';\nimport retry from '../helpers/retry';\n\ntype RS = new(host?: string, options?: RedisOptionsT) => RedisT;\n\nconst withRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message === 'transient error'\n));\n\nexport default class RedisConnectionPool {\n  private readonly connections: ERedis[] = [];\n\n  private inUse = 0;\n\n  private queue: ((client: ERedis) => void)[] = [];\n\n  private closingFn?: () => void;\n\n  private closed = false;\n\n  public constructor(\n    private readonly RedisStatic: RS,\n    private readonly url: string,\n    private readonly options: RedisOptionsT,\n    private readonly maxConnections: number,\n  ) {}\n\n  public async withConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    const c = await this.getConnection();\n    try {\n      return await fn(c);\n    } finally {\n      await teardown?.(c);\n      this.returnConnection(c);\n    }\n  }\n\n  public async retryWithConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    return withRetry(() => this.withConnection(fn, teardown));\n  }\n\n  public close(): Promise<void> {\n    if (this.closed) {\n      return Promise.resolve();\n    }\n\n    this.closed = true;\n    if (this.inUse === 0) {\n      this.doClose();\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve): void => {\n      this.closingFn = (): void => {\n        this.doClose();\n        resolve();\n      };\n    });\n  }\n\n  private doClose(): void {\n    this.connections.forEach((c) => c.disconnect());\n    this.connections.length = 0;\n  }\n\n  private async getConnection(): Promise<ERedis> {\n    if (this.closed) {\n      throw new Error('Connection closed');\n    }\n\n    const r = this.connections.pop();\n    if (r) {\n      this.inUse += 1;\n      return r;\n    }\n    if (this.inUse < this.maxConnections) {\n      this.inUse += 1;\n      const client = new this.RedisStatic(this.url, this.options);\n      await client.connect();\n      return defineAllScripts(client);\n    }\n    return new Promise((resolve): void => {\n      this.queue.push(resolve);\n    });\n  }\n\n  private returnConnection(c: ERedis): void {\n    const q = this.queue.shift();\n    if (q) {\n      q(c);\n    } else {\n      this.inUse -= 1;\n      this.connections.push(c);\n      if (this.inUse === 0) {\n        this.closingFn?.();\n      }\n    }\n  }\n}\n","import RedisCollection from './RedisCollection';\nimport type { DB, DBKeys } from '../interfaces/DB';\nimport type { IDable } from '../interfaces/IDable';\nimport RedisConnectionPool from './RedisConnectionPool';\n\nexport default class RedisDb implements DB {\n  private constructor(\n    private readonly pool: RedisConnectionPool,\n  ) {}\n\n  public static async connect(url: string): Promise<RedisDb> {\n    const { default: RedisStatic } = await import('ioredis');\n    const connectionPoolSize = 5;\n    return new RedisDb(new RedisConnectionPool(\n      RedisStatic,\n      url,\n      { lazyConnect: true },\n      connectionPoolSize,\n    ));\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): RedisCollection<T> {\n    return new RedisCollection(this.pool, name, keys);\n  }\n\n  public close(): Promise<void> {\n    return this.pool.close();\n  }\n\n  public getConnectionPool(): RedisConnectionPool {\n    return this.pool;\n  }\n}\n","export function quoteHValue(v: string): string {\n  return `\"${v.replace(/([\"\\\\])/g, '\\\\$1')}\"`;\n}\n\nexport function encodeHStore(record: Record<string, string>): string {\n  const result: string[] = [];\n  Object.keys(record).forEach((k) => {\n    result.push(`${quoteHValue(k)}=>${quoteHValue(record[k])}`);\n  });\n  return result.join(',');\n}\n\nexport function decodeHStore(hstore: string): Record<string, string> {\n  const result: Record<string, string> = {};\n  let current = '';\n  let currentKey = '';\n  let quote = false;\n  for (let p = 0; p < hstore.length;) {\n    const c = hstore[p];\n    switch (c) {\n      case ' ':\n      case '\\r':\n      case '\\n':\n      case '\\t':\n        if (quote) {\n          current += c;\n        }\n        break;\n      case '\\\\':\n        current += hstore[p + 1];\n        p += 1;\n        break;\n      case '\"':\n        quote = !quote;\n        break;\n      case '=':\n        if (quote) {\n          current += c;\n        } else if (hstore[p + 1] === '>') {\n          currentKey = current;\n          current = '';\n          p += 1;\n        }\n        break;\n      case ',':\n        if (quote) {\n          current += c;\n        } else {\n          result[currentKey] = current;\n          currentKey = '';\n          current = '';\n        }\n        break;\n      default:\n        current += c;\n        break;\n    }\n    p += 1;\n  }\n  if (currentKey) {\n    result[currentKey] = current;\n  }\n  return result;\n}\n","const DQUOTE_REG = /\"/g;\nexport function quoteIdentifier(msg: string): string {\n  return `\"${msg.replace(DQUOTE_REG, '\"\"')}\"`;\n}\n\nconst SQUOTE_REG = /'/g;\nexport function quoteValue(msg: string): string {\n  // only used for creating indices,\n  // because prepared statements do not support CREATE\n  return `'${msg.replace(SQUOTE_REG, '\\'\\'')}'`;\n}\n\nconst ID_REG = /\\$[A-Z]/g;\nexport function withIdentifiers(\n  base: string,\n  identifiers: Record<string, string>,\n): string {\n  return base.replace(\n    ID_REG,\n    (v) => quoteIdentifier(identifiers[v.substr(1)]),\n  );\n}\n","import type { Pool as PgPoolT, QueryArrayResult as PgQueryArrayResultT } from 'pg';\nimport type { IDable } from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport type { DBKeys } from '../interfaces/DB';\nimport { serialiseValue, deserialiseValue, serialiseRecord } from '../helpers/serialiser';\nimport { encodeHStore, decodeHStore } from './hstore';\nimport { withIdentifiers, quoteValue } from './sql';\n\nconst STATEMENTS = {\n  CREATE_TABLE: [\n    'CREATE TABLE IF NOT EXISTS $T (',\n    'id TEXT NOT NULL PRIMARY KEY,',\n    'data HSTORE NOT NULL',\n    ')',\n  ].join(''),\n\n  CREATE_INDEX: 'CREATE INDEX IF NOT EXISTS $I ON $T USING HASH ((data->$1))',\n  CREATE_UNIQUE_INDEX: 'CREATE UNIQUE INDEX IF NOT EXISTS $I ON $T ((data->$1))',\n  DROP_INDEX: 'DROP INDEX IF EXISTS $I',\n\n  INSERT: 'INSERT INTO $T (id, data) VALUES ($1, $2::hstore)',\n\n  UPDATE: 'UPDATE $T SET data=data||$1::hstore WHERE data->$2=$3 RETURNING id',\n  UPDATE_ID: 'UPDATE $T SET data=data||$1::hstore WHERE id=$2',\n\n  UPSERT_ID: 'INSERT INTO $T (id, data) VALUES ($1, $2::hstore) ON CONFLICT (id) DO UPDATE SET data=$T.data||$2::hstore',\n\n  SELECT_ONE: 'SELECT id, data FROM $T WHERE data->$1=$2 LIMIT 1',\n  SELECT_ALL: 'SELECT id, data FROM $T',\n  SELECT_ALL_BY: 'SELECT id, data FROM $T WHERE data->$1=$2',\n  SELECT_ID: 'SELECT id, data FROM $T WHERE id=$1',\n\n  DELETE: 'DELETE FROM $T WHERE data->$1=$2',\n  DELETE_ID: 'DELETE FROM $T WHERE id=$1',\n};\n\ninterface State {\n  closed: boolean;\n}\n\nasync function configureTable(\n  pool: PgPoolT,\n  tableName: string,\n  keys: DBKeys<any> = {},\n): Promise<void> {\n  const c = await pool.connect();\n  try {\n    await c.query(withIdentifiers(STATEMENTS.CREATE_TABLE, {\n      T: tableName,\n    }));\n\n    // PostgreSQL does not support prepared statements for CREATE statements,\n    // so we must escape the values manually using quoteValue.\n    const keyEntries = Object.entries(keys);\n    for (let i = 0; i < keyEntries.length; i += 1) {\n      /* eslint-disable no-await-in-loop */ // client cannot multitask\n      const [k, v] = keyEntries[i];\n      if (v && v.unique) {\n        await c.query(withIdentifiers(STATEMENTS.DROP_INDEX, {\n          T: tableName,\n          I: `${tableName}_i${k}`,\n        }));\n        await c.query(withIdentifiers(STATEMENTS.CREATE_UNIQUE_INDEX, {\n          T: tableName,\n          I: `${tableName}_u${k}`,\n        }).replace(/\\$1/g, quoteValue(k)));\n      } else {\n        await c.query(withIdentifiers(STATEMENTS.DROP_INDEX, {\n          T: tableName,\n          I: `${tableName}_u${k}`,\n        }));\n        await c.query(withIdentifiers(STATEMENTS.CREATE_INDEX, {\n          T: tableName,\n          I: `${tableName}_i${k}`,\n        }).replace(/\\$1/g, quoteValue(k)));\n      }\n      /* eslint-enable no-await-in-loop */\n    }\n  } finally {\n    c.release();\n  }\n}\n\nfunction toHStore(record: Record<string, unknown>): string {\n  return encodeHStore(serialiseRecord(record));\n}\n\nfunction fromHStore<T>(\n  [id, data]: readonly any[],\n  fields?: readonly string[],\n): T {\n  const rawMap = decodeHStore(data);\n  rawMap.id = id;\n\n  const result: Record<string, unknown> = {};\n\n  if (!fields) {\n    Object.entries(rawMap).forEach(([k, v]) => {\n      result[k] = deserialiseValue(v);\n    });\n    return result as T;\n  }\n\n  fields.forEach((f) => {\n    result[f] = deserialiseValue(rawMap[f]);\n  });\n  return result as T;\n}\n\nexport default class PostgresCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly tableName: string;\n\n  private readonly cachedQueries: Partial<Record<keyof typeof STATEMENTS, string>> = {};\n\n  private pending?: (() => void)[] = [];\n\n  public constructor(\n    private readonly pool: PgPoolT,\n    name: string,\n    keys: DBKeys<T> = {},\n    private readonly stateRef: State = { closed: false },\n  ) {\n    super(keys);\n\n    this.tableName = name;\n    configureTable(pool, this.tableName, keys)\n      .then(() => {\n        if (this.pending) {\n          this.pending.forEach((f) => f());\n          this.pending = undefined;\n        }\n      })\n      .catch((e) => {\n        process.stderr.write(`Failed to prepare table ${name}: ${e}`);\n      });\n  }\n\n  protected preAct(): void {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n  }\n\n  protected async internalAdd({ id, ...rest }: T): Promise<void> {\n    await this.runTableQuery('INSERT', serialiseValue(id), toHStore(rest));\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    await this.runTableQuery('UPSERT_ID', serialiseValue(id), toHStore(update));\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    { id, ...rest }: Partial<T>,\n  ): Promise<void> {\n    const sId = serialiseValue(searchValue);\n    const hstore = toHStore(rest);\n\n    if (searchAttribute === 'id') {\n      await this.runTableQuery('UPDATE_ID', hstore, sId);\n    } else {\n      const r = await this.runTableQuery('UPDATE', hstore, searchAttribute, sId);\n      if (id !== undefined && r.rowCount > 0 && r.rows[0][0] !== id) {\n        throw new Error('Cannot update ID');\n      }\n    }\n  }\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    let raw;\n    if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('SELECT_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('SELECT_ONE', searchAttribute, serialiseValue(searchValue));\n    }\n    if (!raw.rowCount) {\n      return null;\n    }\n    return fromHStore<T>(raw.rows[0], returnAttributes);\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    let raw;\n    if (!searchAttribute) {\n      raw = await this.runTableQuery('SELECT_ALL');\n    } else if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('SELECT_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('SELECT_ALL_BY', searchAttribute, serialiseValue(searchValue));\n    }\n    return raw.rows.map((v) => fromHStore<T>(v, returnAttributes));\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    let raw;\n    if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('DELETE_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('DELETE', searchAttribute, serialiseValue(searchValue));\n    }\n    return raw.rowCount;\n  }\n\n  private async runTableQuery(\n    queryName: keyof typeof STATEMENTS,\n    ...values: any[]\n  ): Promise<PgQueryArrayResultT<any[]>> {\n    if (this.pending) {\n      await new Promise((resolve): void => {\n        this.pending!.push(resolve);\n      });\n    }\n\n    let cached = this.cachedQueries[queryName];\n    if (!cached) {\n      cached = withIdentifiers(STATEMENTS[queryName], { T: this.tableName });\n      this.cachedQueries[queryName] = cached;\n    }\n\n    return this.pool.query({\n      name: `${this.tableName}_${queryName}`,\n      rowMode: 'array',\n      text: cached,\n      values,\n    });\n  }\n}\n","import type { Pool as PgPoolT } from 'pg';\nimport PostgresCollection from './PostgresCollection';\nimport type { DB, DBKeys } from '../interfaces/DB';\nimport type { IDable } from '../interfaces/IDable';\n\nexport default class PostgresDb implements DB {\n  private readonly stateRef = { closed: false };\n\n  private constructor(\n    private readonly pool: PgPoolT,\n  ) {}\n\n  public static async connect(url: string): Promise<PostgresDb> {\n    const { Pool } = await import('pg');\n    const pool = new Pool({ connectionString: url });\n    await pool.query('CREATE EXTENSION IF NOT EXISTS hstore');\n    return new PostgresDb(pool);\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): PostgresCollection<T> {\n    return new PostgresCollection(this.pool, name, keys, this.stateRef);\n  }\n\n  public close(): Promise<void> {\n    if (this.stateRef.closed) {\n      return Promise.resolve();\n    }\n    this.stateRef.closed = true;\n    return this.pool.end();\n  }\n\n  public getConnectionPool(): PgPoolT {\n    return this.pool;\n  }\n}\n","import type { IDable } from '../interfaces/IDable';\nimport type { Collection, UpdateOptions } from '../interfaces/Collection';\n\nexport type Wrapped<T extends IDable, Fields extends keyof T, FieldStorage> = {\n  [K in keyof T]: K extends 'id' ? T[K] : K extends Fields ? FieldStorage : T[K];\n};\n\nexport interface Wrapper<T extends IDable, K extends keyof T, FieldStorage, CustomData> {\n  wrap: (\n    key: K,\n    value: T[K],\n    processed: CustomData,\n  ) => Promise<FieldStorage> | FieldStorage;\n\n  unwrap: (\n    key: K,\n    value: FieldStorage,\n    processed: CustomData,\n  ) => Promise<T[K]> | T[K];\n\n  preWrap?: (\n    record: Readonly<Partial<T>>,\n  ) => Promise<CustomData> | CustomData;\n\n  preUnwrap?: (\n    record: Readonly<Partial<Wrapped<T, K, FieldStorage>>>,\n  ) => Promise<CustomData> | CustomData;\n\n  preRemove?: (\n    record: Readonly<Pick<Wrapped<T, K, FieldStorage>, 'id'>>,\n  ) => Promise<void> | void;\n}\n\nfunction hasAnyField(value: object, fields: readonly string[]): boolean {\n  return fields\n    .some((field) => Object.prototype.hasOwnProperty.call(value, field));\n}\n\nexport default class WrappedCollection<\n  T extends IDable,\n  WF extends readonly (keyof Omit<T, 'id'> & string)[],\n  FieldStorage,\n  E,\n  Inner extends Wrapped<T, WF[-1], FieldStorage> = Wrapped<T, WF[-1], FieldStorage>\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<Inner>,\n    private readonly fields: WF,\n    private readonly wrapper: Wrapper<T, WF[-1], FieldStorage, E>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(await this.wrapAll(entry));\n  }\n\n  public async get<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key: K,\n    value: T[K] & Inner[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot get by wrapped value');\n    }\n    const raw = await this.baseCollection.get(key, value, fields!);\n    return raw ? this.unwrapAll(raw, { [key]: value }) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key?: K,\n    value?: T[K] & Inner[NonNullable<K>],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (key !== undefined && this.fields.includes(key as any)) {\n      throw new Error('Cannot get by wrapped value');\n    }\n    const raw = await this.baseCollection.getAll(key!, value!, fields!);\n    const extra = (key !== undefined) ? { [key]: value } : undefined;\n    return Promise.all(raw.map((v) => this.unwrapAll(v, extra)));\n  }\n\n  public async update<K extends keyof T & keyof Inner & string>(\n    key: K,\n    value: T[K] & Inner[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot update by wrapped value');\n    }\n    const converted = await this.wrapAll(update, { [key]: value });\n    return this.baseCollection.update(key, value, converted, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K] & Inner[K],\n  ): Promise<number> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot remove by wrapped value');\n    }\n    if (!this.wrapper.preRemove) {\n      return this.baseCollection.remove(key, value);\n    }\n\n    const items = await this.baseCollection.getAll(key, value, ['id']);\n    await Promise.all(items.map(async (item) => {\n      await this.wrapper.preRemove!(item);\n      await this.baseCollection.remove('id', item.id);\n    }));\n    return items.length;\n  }\n\n  private async wrapAll(\n    v: Readonly<T>,\n    extra?: object,\n  ): Promise<Inner>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>> {\n    let processed: E;\n    if (this.wrapper.preWrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preWrap(allFields);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.wrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n\n  private async unwrapAll(\n    v: Readonly<Inner>,\n    extra?: object,\n  ): Promise<T>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>> {\n    let processed: E;\n    if (this.wrapper.preUnwrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preUnwrap(allFields as any);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.unwrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n}\n","export default class LruCache<K, V> {\n  private readonly storage = new Map<K, V>();\n\n  public constructor(\n    private readonly capacity: number,\n  ) {}\n\n  public set(key: K, value: V): void {\n    this.storage.delete(key);\n    this.storage.set(key, value);\n    this.flush();\n  }\n\n  public get(key: K): V | undefined {\n    const value = this.storage.get(key);\n    if (this.storage.delete(key)) {\n      this.storage.set(key, value!);\n    }\n    return value;\n  }\n\n  public remove(key: K): void {\n    this.storage.delete(key);\n  }\n\n  private flush(): void {\n    while (this.storage.size > this.capacity) {\n      this.storage.delete(this.storage.keys().next().value);\n    }\n  }\n}\n","import crypto, { KeyObject } from 'crypto';\nimport type Encryption from './Encryption';\n\nconst ALG = 'aes-256-cbc';\nconst ALG_BUF = Buffer.from(`${ALG}:`, 'utf8');\nconst IV_LEN = 16;\n\nconst nodeEncryptionSync: Encryption<Buffer, KeyObject, Buffer> = {\n  encrypt: (key: KeyObject, v: string): Buffer => {\n    const iv = crypto.randomBytes(IV_LEN);\n    const cipher = crypto.createCipheriv(ALG, key, iv);\n    const part = cipher.update(v, 'utf8');\n    const final = cipher.final();\n    return Buffer.concat([ALG_BUF, iv, part, final]);\n  },\n\n  decrypt: (key: KeyObject, v: Buffer): string => {\n    if (!v.slice(0, ALG_BUF.length).equals(ALG_BUF)) {\n      throw new Error('Unknown encryption algorithm');\n    }\n\n    const iv = v.slice(ALG_BUF.length, ALG_BUF.length + IV_LEN);\n    const encrypted = v.slice(ALG_BUF.length + IV_LEN);\n\n    const decipher = crypto.createDecipheriv(ALG, key, iv);\n    let decrypted = decipher.update(encrypted, undefined, 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  },\n\n  generateKey: (): KeyObject => crypto\n    .createSecretKey(crypto.randomBytes(32)),\n\n  serialiseKey: (key: KeyObject): Buffer => key.export(),\n\n  deserialiseKey: (data: Buffer): KeyObject => crypto.createSecretKey(data),\n};\n\nexport default nodeEncryptionSync;\n","import type { IDable, IDableBy, IDType } from '../interfaces/IDable';\nimport type { Collection } from '../interfaces/Collection';\nimport LruCache from '../helpers/LruCache';\nimport { serialiseValue, deserialiseValue } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\nimport type Encryption from './encryption/Encryption';\nimport nodeEncryptionSync from './encryption/nodeEncryptionSync';\n\nexport interface KeyRecord<ID extends IDType, KeyT> {\n  id: ID;\n  key: KeyT;\n}\n\ntype EncryptableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\ntype Encrypter<EncT, ID extends IDType> = <T extends IDableBy<ID>>(\n) => <F extends EncryptableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n) => Collection<T>;\n\n// makeEncrypter provides optional 2-tier function call due to\n// https://github.com/Microsoft/TypeScript/issues/26242\n\nfunction makeEncrypter<EncT, ID extends IDType>(\n  wrapper: <T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => Collection<T>,\n): Encrypter<EncT, ID> {\n  return (fields?: any, baseCollection?: Collection<any>): any => {\n    if (fields && baseCollection) {\n      // non-typescript API (remove need for extra ())\n      return wrapper(fields, baseCollection) as any;\n    }\n    return wrapper;\n  };\n}\n\nfunction encryptByKey(sKey: Buffer): Encrypter<Buffer, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, IDType> {\n  const key = cr.deserialiseKey(sKey);\n\n  return makeEncrypter(<T extends IDable, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<EncT> | EncT => cr.encrypt(key, serialiseValue(v)),\n    unwrap: async (k, v): Promise<any> => deserialiseValue(await cr.decrypt(key, v)),\n  }));\n}\n\nfunction encryptByRecord<ID extends IDType>(\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const cache = new LruCache<ID, KeyT>(cacheSize);\n\n  const loadKey = async (\n    generateIfNeeded: boolean,\n    record: { id?: ID },\n  ): Promise<KeyT> => {\n    const { id } = record;\n\n    if (id === undefined) {\n      throw new Error('Must provide ID for encryption');\n    }\n\n    const cached = cache.get(id);\n    if (cached) {\n      return cached;\n    }\n    let key: KeyT;\n    const item = await keyCollection.get('id', id, ['key']);\n    if (item) {\n      key = cr.deserialiseKey(item.key);\n    } else {\n      if (!generateIfNeeded) {\n        throw new Error('No encryption key found for record');\n      }\n      key = await cr.generateKey();\n      await keyCollection.add({ id, key: cr.serialiseKey(key) });\n    }\n    cache.set(id, key);\n    return key;\n  };\n\n  const removeKey = async ({ id }: { id: ID }): Promise<void> => {\n    await keyCollection.remove('id', id);\n    cache.remove(id);\n  };\n\n  return makeEncrypter(<T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, KeyT>(baseCollection, fields, {\n    wrap: (k, v, key): Promise<EncT> | EncT => cr.encrypt(key, JSON.stringify(v)),\n    unwrap: async (k, v, key): Promise<any> => JSON.parse(await cr.decrypt(key, v)),\n    preWrap: loadKey.bind(null, true),\n    preUnwrap: loadKey.bind(null, false),\n    preRemove: removeKey,\n  }));\n}\n\nfunction encryptByRecordWithMasterKey<ID extends IDType>(\n  sMasterKey: Buffer,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const keyEnc = encryptByKey(sMasterKey, cr);\n  const encKeyCollection = keyEnc<KeyRecord<ID, SerialisedKeyT>>()(\n    ['key'],\n    keyCollection,\n  );\n  return encryptByRecord(encKeyCollection, cacheSize, cr);\n}\n\nexport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\n","import type { Collection, UpdateOptions } from '../interfaces/Collection';\nimport type { IDable } from '../interfaces/IDable';\n\ntype MigrationFuncs<T, ExtraFetchFields extends readonly (keyof T & string)[]> = {\n  [K in keyof T]?: (\n    stored: T[K] | undefined,\n    record: Readonly<Pick<T, K | ExtraFetchFields[-1]>>,\n  ) => T[K];\n};\n\nclass MigratedCollection<\n  T extends IDable,\n  ExtraFetchFields extends readonly (keyof T & string)[],\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<T>,\n    private readonly migrations: MigrationFuncs<T, ExtraFetchFields>,\n    private readonly extraFetchFields?: ExtraFetchFields,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(entry);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.baseCollection.get(\n      searchAttribute,\n      searchValue,\n      this.extendAttributes(returnAttributes)!,\n    );\n    return raw ? this.applyMigration(raw, returnAttributes) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[],\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const raws = await this.baseCollection.getAll(\n      searchAttribute!,\n      searchValue as any,\n      this.extendAttributes(returnAttributes)!,\n    );\n    return raws.map((raw) => this.applyMigration(raw, returnAttributes));\n  }\n\n  public async update<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    return this.baseCollection.update(searchAttribute, searchValue, update, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    return this.baseCollection.remove(searchAttribute, searchValue);\n  }\n\n  private extendAttributes<\n    F extends readonly (keyof T & string)[]\n  >(returnAttributes?: F): readonly (keyof T & string)[] | undefined {\n    if (returnAttributes && this.extraFetchFields) {\n      return [...returnAttributes, ...this.extraFetchFields];\n    }\n    return returnAttributes;\n  }\n\n  private applyMigration<F extends readonly (keyof T & string)[]>(\n    raw: Readonly<Pick<T, ExtraFetchFields[-1] | F[-1]>>,\n    returnAttributes?: F,\n  ): Readonly<Pick<T, F[-1]>> {\n    if (returnAttributes && !returnAttributes.some((attr) => this.migrations[attr])) {\n      return raw;\n    }\n    const result: Pick<T, F[-1]> = { ...raw };\n    const attrs = returnAttributes || Object.keys(this.migrations);\n    attrs.forEach((key: string) => {\n      const attr = key as keyof Pick<T, F[-1]>;\n      const migration = this.migrations[attr];\n      if (migration) {\n        result[attr] = migration(raw[attr], raw);\n      }\n    });\n    return result;\n  }\n}\n\nfunction migrate<T extends IDable>(\n  migrations: MigrationFuncs<T, []>,\n  baseCollection: Collection<T>,\n): Collection<T>;\n\nfunction migrate<\n  T extends IDable,\n  ExtraFetchFields extends readonly (keyof T & string)[],\n>(\n  extraFetchFields: ExtraFetchFields,\n  migrations: MigrationFuncs<T, ExtraFetchFields>,\n  baseCollection: Collection<T>,\n): Collection<T>;\n\nfunction migrate<\n  T extends IDable,\n  ExtraFetchFields extends readonly (keyof T & string)[],\n>(\n  extraFetchFields: MigrationFuncs<T, []> | ExtraFetchFields,\n  migrations: MigrationFuncs<T, ExtraFetchFields> | Collection<T>,\n  baseCollection?: Collection<T>,\n): Collection<T> {\n  if (baseCollection) {\n    return new MigratedCollection(\n      baseCollection,\n      migrations as MigrationFuncs<T, ExtraFetchFields>,\n      extraFetchFields as ExtraFetchFields,\n    );\n  }\n  return new MigratedCollection(\n    migrations as Collection<T>,\n    extraFetchFields as MigrationFuncs<T, []>,\n  );\n}\n\nexport default migrate;\n","import CollectionStorage from './CollectionStorage';\nimport WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';\nimport type TypeEncryption from './wrappers/encryption/Encryption';\nimport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n} from './wrappers/encrypted';\nimport migrate from './wrappers/migrated';\nimport type { DB } from './interfaces/DB';\nimport type { Collection } from './interfaces/Collection';\nimport type { IDable } from './interfaces/IDable';\n\nexport type { DB, Collection, Wrapped };\nexport type Encrypted<T extends IDable, WF extends keyof T> =\n  Wrapped<T, WF, Buffer>;\nexport type Encryption<EncT, KeyT, SerialisedKeyT> =\n  TypeEncryption<EncT, KeyT, SerialisedKeyT>;\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport { default as RedisDb } from './redis/RedisDb';\nexport { default as LruCache } from './helpers/LruCache';\nexport {\n  WrappedCollection,\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n  migrate,\n};\nexport {\n  default as nodeEncryptionSync,\n} from './wrappers/encryption/nodeEncryptionSync';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport RedisDb from './redis/RedisDb';\nimport PostgresDb from './postgresql/PostgresDb';\nimport type { DB } from './interfaces/DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else if (url.startsWith('redis')) {\n      dbClass = RedisDb;\n    } else if (url.startsWith('postgres')) {\n      dbClass = PostgresDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}