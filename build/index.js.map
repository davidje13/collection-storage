{"version":3,"sources":["webpack://websocket-express/webpack/universalModuleDefinition","webpack://websocket-express/webpack/bootstrap","webpack://websocket-express/external \"crypto\"","webpack://websocket-express/external \"mongodb\"","webpack://websocket-express/external \"url\"","webpack://websocket-express/external \"ioredis\"","webpack://websocket-express/./src/helpers/serialiser.ts","webpack://websocket-express/./src/memory/MemoryCollection.ts","webpack://websocket-express/./src/memory/MemoryDb.ts","webpack://websocket-express/./src/helpers/retry.ts","webpack://websocket-express/./src/mongo/MongoCollection.ts","webpack://websocket-express/./src/mongo/MongoDb.ts","webpack://websocket-express/./src/redis/helpers.ts","webpack://websocket-express/./src/redis/RedisCollection.ts","webpack://websocket-express/./src/redis/scripts.ts","webpack://websocket-express/./src/redis/RedisConnectionPool.ts","webpack://websocket-express/./src/redis/RedisDb.ts","webpack://websocket-express/./src/wrappers/WrappedCollection.ts","webpack://websocket-express/./src/helpers/LruCache.ts","webpack://websocket-express/./src/wrappers/encryption/nodeEncryptionSync.ts","webpack://websocket-express/./src/wrappers/encrypted.ts","webpack://websocket-express/./src/index.ts","webpack://websocket-express/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","serialiseValue","Buffer","toString","JSON","stringify","deserialiseValue","type","data","substr","from","parse","Error","serialiseRecord","record","result","keys","forEach","k","deserialiseRecord","v","MemoryCollection","constructor","simulatedLatency","stateRef","closed","this","Map","map","options","simulateDbConnection","serialised","internalCheckDuplicates","set","id","internalPopulateIndices","keyName","upsert","undefined","sId","internalGetSerialisedIds","oldSerialised","oldValue","newValue","newSerialised","internalRemoveIndices","e","fields","all","getAll","length","sIds","field","applyFilter","delete","millis","Promise","resolve","setTimeout","sKey","has","keyInfo","serialisedValue","checkId","entries","unique","Set","add","size","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","getCollection","mapTables","close","sleep","shouldRetry","maxAttempts","baseDelayMillis","attemptDelayMillis","randomDelayMillis","async","attempt","fn","message","Math","random","MONGO_ID","ID","DOT_REG","fieldNameToMongo","encodeURIComponent","replace","withUpsertRetry","retry","includes","convertToMongo","converted","MBinary","_bsontype","convertFromMongo","buffer","decodeURIComponent","fieldNameFromMongo","makeMongoFields","names","fieldName","MongoCollection","collection","mongoKey","createIndex","insertOne","checkIndexExists","updateOne","$set","findOne","projection","cursor","mFields","find","raw","push","deleteMany","deletedCount","MongoDb","client","MongoClient","connect","useNewUrlParser","useUnifiedTopology","escapeName","getDb","minifyLuaScript","lines","argNames","combined","ln","trim","join","RegExp","makeIndexKeys","partialSerialisedValue","filter","prefix","parseItem","item","f","itemHasContent","values","some","unwatchAll","unwatch","RedisCollection","pool","keyPrefix","keyPrefixes","uniqueKeys","nonUniqueKeys","withConnection","internalAdd","update","patchSerialised","retryWithConnection","getAndWatchBySerialisedKey","rKey","makeKey","watch","rawByKeyKeepWatches","diff","flat","patchUniqueKeys","patchNonUniqueKeys","oldUniqueKeys","oldNonUniqueKeys","keyCount","updated","multi","exec","getByKeysKeepWatches","cut","remove","indexedKeys","items","pipeline","serialisedId","checkWatch","Boolean","serialisedIds","results","commands","multiExec","exists","hmget","hgetall","parsed","keyAddress","smembers","SCRIPT_ADD_ITEM","SCRIPT_UPDATE_ITEM","SCRIPT_REMOVE_ITEM","withRetry","RedisConnectionPool","RedisStatic","maxConnections","teardown","getConnection","returnConnection","inUse","doClose","closingFn","connections","disconnect","pop","defineCommand","lua","defineAllScripts","queue","q","shift","RedisDb","default","lazyConnect","getConnectionPool","hasAnyField","WrappedCollection","baseCollection","wrapper","entry","wrapAll","unwrapAll","extra","preRemove","processed","preWrap","allFields","wrap","preUnwrap","unwrap","LruCache","capacity","storage","flush","next","ALG","ALG_BUF","nodeEncryptionSync","encrypt","iv","crypto","randomBytes","cipher","createCipheriv","part","final","concat","decrypt","slice","equals","encrypted","decipher","createDecipheriv","decrypted","generateKey","createSecretKey","serialiseKey","export","deserialiseKey","makeEncrypter","encryptByKey","cr","encryptByRecord","keyCollection","cacheSize","cache","loadKey","generateIfNeeded","cached","removeKey","encryptByRecordWithMasterKey","sMasterKey","keyEnc","CollectionStorage","dbClass","startsWith"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"websocket-express\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"websocket-express\"] = factory();\n\telse\n\t\troot[\"websocket-express\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"crypto\");","module.exports = require(\"mongodb\");","module.exports = require(\"url\");","module.exports = require(\"ioredis\");","export function serialiseValue(\n  value: unknown,\n): string {\n  if (value instanceof Buffer) {\n    return `B${value.toString('base64')}`;\n  }\n  return `J${JSON.stringify(value)}`;\n}\n\nexport function deserialiseValue(\n  value: string,\n): unknown {\n  const type = value[0];\n  const data = value.substr(1);\n  if (type === 'B') {\n    return Buffer.from(data, 'base64');\n  }\n  if (type === 'J') {\n    return JSON.parse(data);\n  }\n  throw new Error(`Unknown data type ${type}`);\n}\n\nexport function serialiseRecord<T>(\n  record: T,\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  Object.keys(record).forEach((k) => {\n    result[k] = serialiseValue((record as any)[k]);\n  });\n  return result;\n}\n\nexport function deserialiseRecord(\n  record: Record<string, string | null>,\n): Record<string, unknown> {\n  const result: Record<string, any> = {};\n  Object.keys(record).forEach((k) => {\n    const v = record[k];\n    if (v) {\n      result[k] = deserialiseValue(v);\n    }\n  });\n  return result;\n}\n","import Collection, { KeyOptions } from '../interfaces/Collection';\nimport IDable from '../interfaces/IDable';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\n\nfunction sleep(millis: number): Promise<void> | null {\n  if (!millis) {\n    return null;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\ninterface KeyInfo {\n  map: Map<string, Set<string>>;\n  options: KeyOptions;\n}\n\ninterface State {\n  closed: boolean;\n}\n\nexport default class MemoryCollection<T extends IDable> implements Collection<T> {\n  private readonly data: Map<string, Record<string, string>>;\n\n  private readonly keys: { [K in keyof T]?: KeyInfo } = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n    private readonly stateRef: State = { closed: false },\n  ) {\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      this.keys[key] = { map: new Map(), options: keys[key]! };\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await this.simulateDbConnection();\n\n    const serialised = serialiseRecord(value);\n    this.internalCheckDuplicates(serialised, true);\n    this.data.set(serialised.id, serialised);\n    this.internalPopulateIndices(serialised);\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    if (upsert && keyName !== 'id' && value.id === undefined) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    await this.simulateDbConnection();\n\n    const sId = this.internalGetSerialisedIds(keyName, key)[0];\n    if (sId === undefined) {\n      if (upsert) {\n        const fullValue = { [keyName]: key, ...value };\n        const serialised = serialiseRecord(fullValue);\n        this.internalCheckDuplicates(serialised, true);\n        this.data.set(serialised.id, serialised);\n        this.internalPopulateIndices(serialised);\n      }\n      return;\n    }\n    const oldSerialised = this.data.get(sId)!;\n    const oldValue = deserialiseRecord(oldSerialised) as T;\n    const newValue = { ...oldValue, ...value };\n    if (newValue.id !== oldValue.id) {\n      throw new Error('Cannot update id');\n    }\n    const newSerialised = serialiseRecord(newValue);\n    this.internalRemoveIndices(oldSerialised);\n    try {\n      this.internalCheckDuplicates(newSerialised, false);\n    } catch (e) {\n      this.internalPopulateIndices(oldSerialised);\n      throw e;\n    }\n    this.data.set(newSerialised.id, newSerialised);\n    this.internalPopulateIndices(newSerialised);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.getAll(keyName, key, fields);\n    if (!all.length) {\n      return null;\n    }\n    return all[0];\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    await this.simulateDbConnection();\n\n    let sIds: string[];\n    if (keyName) {\n      sIds = this.internalGetSerialisedIds(keyName, key!);\n    } else {\n      sIds = [...this.data.keys()];\n    }\n    return sIds.map((sId) => applyFilter(\n      deserialiseRecord(this.data.get(sId)!) as T,\n      fields,\n    ));\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    await this.simulateDbConnection();\n\n    const sIds = this.internalGetSerialisedIds(key, value);\n    sIds.forEach((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      this.internalRemoveIndices(oldSerialised);\n      this.data.delete(sId);\n    });\n\n    return sIds.length;\n  }\n\n  private async simulateDbConnection(): Promise<void> {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    await sleep(this.simulatedLatency);\n  }\n\n  private internalGetSerialisedIds<K extends keyof T>(\n    keyName: K,\n    key: T[K],\n  ): string[] {\n    const sKey = serialiseValue(key);\n    if (keyName === 'id') {\n      return this.data.has(sKey) ? [sKey] : [];\n    }\n    const keyInfo = this.keys[keyName];\n    if (!keyInfo) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const sIds = keyInfo.map.get(sKey);\n    return sIds ? [...sIds] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(\n    serialisedValue: Record<string, string>,\n    checkId: boolean,\n  ): void {\n    if (checkId && this.data.has(serialisedValue.id)) {\n      throw new Error('duplicate');\n    }\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map, options } = keyInfo!;\n      if (options.unique && map.has(serialisedValue[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map } = keyInfo!;\n      const v = serialisedValue[key];\n      let o = map.get(v);\n      if (!o) {\n        o = new Set<string>();\n        map.set(v, o);\n      }\n      o.add(serialisedValue.id);\n    });\n  }\n\n  private internalRemoveIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map } = keyInfo!;\n      const v = serialisedValue[key];\n      const o = map.get(v)!;\n      o.delete(serialisedValue.id);\n      if (!o.size) {\n        map.delete(v);\n      }\n    });\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb implements DB {\n  private readonly simulatedLatency: number;\n\n  private readonly mapTables = new Map<string, MemoryCollection<any>>();\n\n  private readonly stateRef = { closed: false };\n\n  public constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MemoryCollection<T> {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n        this.stateRef,\n      ));\n    }\n    return this.mapTables.get(name)! as MemoryCollection<T>;\n  }\n\n  public close(): void {\n    this.stateRef.closed = true;\n  }\n}\n","function sleep(millis: number): Promise<void> | null {\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nexport default (\n  shouldRetry: (e: any) => boolean,\n  maxAttempts = 5,\n  baseDelayMillis = 20,\n  attemptDelayMillis = 200,\n  randomDelayMillis = 200,\n) => async <T>(fn: () => Promise<T> | T): Promise<T> => {\n  for (let attempt = 1; ; attempt += 1) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      return await fn();\n    } catch (e) {\n      if (!shouldRetry(e)) {\n        throw e;\n      }\n      if (attempt >= maxAttempts) {\n        e.message += ` (attempted ${attempt} times)`;\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(\n      baseDelayMillis +\n      attempt * attemptDelayMillis +\n      Math.random() * randomDelayMillis,\n    );\n  }\n};\n","import {\n  Collection as MCollection,\n  Cursor as MCursor,\n  Binary as MBinary,\n} from 'mongodb';\nimport IDable from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\nimport retry from '../helpers/retry';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\ninterface State {\n  closed: boolean;\n}\n\nconst DOT_REG = /\\./g;\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return encodeURIComponent(name).replace(DOT_REG, '%2E');\n}\n\nfunction fieldNameFromMongo(name: string): string {\n  if (name === MONGO_ID) {\n    return ID;\n  }\n  return decodeURIComponent(name);\n}\n\nconst withUpsertRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message.includes('E11000')\n));\n\nfunction convertToMongo<T extends Partial<IDable>>(\n  value: T,\n): Record<string, unknown> {\n  const converted: Record<string, unknown> = {};\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    if (v instanceof Buffer) {\n      v = new MBinary(v);\n      // eslint-disable-next-line no-underscore-dangle\n    } else if (typeof v === 'object' && v._bsontype) {\n      throw new Error('Must use Buffer to provide binary data');\n    }\n    converted[fieldNameToMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: Record<string, unknown> | null,\n): T | null {\n  if (!value) {\n    return null;\n  }\n  const converted: T = {} as any;\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype === 'Binary') {\n      v = v.buffer;\n    }\n    (converted as any)[fieldNameFromMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction makeMongoFields(names?: readonly string[]): Record<string, boolean> {\n  const fields: Record<string, boolean> = {};\n  if (names) {\n    fields[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      fields[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return fields;\n}\n\nexport default class MongoCollection<T extends IDable> implements Collection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    private readonly keys: DBKeys<T> = {},\n    private readonly stateRef: State = { closed: false },\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      const mongoKey = fieldNameToMongo(keyName);\n      if (options && options.unique) {\n        collection.createIndex({ [mongoKey]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [mongoKey]: 'hashed' });\n      }\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await this.getCollection().insertOne(convertToMongo(value));\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    if (upsert && keyName !== 'id' && value.id === undefined) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    this.checkIndexExists(keyName);\n\n    if (upsert) {\n      // special handling due to https://jira.mongodb.org/browse/SERVER-14322\n      await withUpsertRetry(() => this.getCollection().updateOne(\n        convertToMongo({ [keyName]: key }),\n        { $set: convertToMongo(value) },\n        { upsert: true },\n      ));\n    } else {\n      await this.getCollection().updateOne(\n        convertToMongo({ [keyName]: key }),\n        { $set: convertToMongo(value) },\n      );\n    }\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    this.checkIndexExists(keyName);\n\n    const raw = await this.getCollection().findOne(\n      convertToMongo({ [keyName]: key }),\n      { projection: makeMongoFields(fields) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const result: Pick<T, F[-1]>[] = [];\n\n    let cursor: MCursor;\n    const mFields = makeMongoFields(fields);\n    if (keyName) {\n      this.checkIndexExists(keyName);\n\n      cursor = this.getCollection().find(\n        convertToMongo({ [keyName]: key }),\n        { projection: mFields },\n      );\n    } else {\n      cursor = this.getCollection().find({}, { projection: mFields });\n    }\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    this.checkIndexExists(key);\n\n    const result = await this.getCollection().deleteMany(\n      convertToMongo({ [key]: value }),\n    );\n    return result.deletedCount || 0;\n  }\n\n  private checkIndexExists(key: string): void {\n    if (key !== 'id' && !(this.keys as any)[key]) {\n      throw new Error(`No index for ${key}`);\n    }\n  }\n\n  private getCollection(): MCollection {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    return this.collection;\n  }\n}\n","import { MongoClient as MClient, Db as MDb } from 'mongodb';\nimport MongoCollection from './MongoCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nfunction escapeName(name: string): string {\n  return encodeURIComponent(name);\n}\n\nexport default class MongoDb implements DB {\n  private readonly stateRef = { closed: false };\n\n  private constructor(\n    private readonly client: MClient,\n  ) {}\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client);\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MongoCollection<T> {\n    const collection = this.client.db().collection(escapeName(name));\n    return new MongoCollection(collection, keys, this.stateRef);\n  }\n\n  public async close(): Promise<void> {\n    this.stateRef.closed = true;\n    return this.client.close();\n  }\n\n  public getDb(): MDb {\n    return this.client.db();\n  }\n}\n","import { Redis, Pipeline, MultiOptions } from 'ioredis';\n\n// Thanks, https://stackoverflow.com/a/50014868/1180785\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U: never;\n\ntype PipelineVersions<I> = {\n  [K in keyof I]: (...args: ArgumentTypes<I[K]>) => Pipeline & PipelineVersions<I>;\n};\n\ninterface RedisWithExtendedPipeline<I> extends Redis {\n  multi(commands?: string[][], options?: MultiOptions): Pipeline & PipelineVersions<I>;\n  multi(options: { pipeline: false }): Promise<string>;\n}\n\nexport type ExtendedRedis<I> = I & RedisWithExtendedPipeline<I>;\n\nexport async function multiExec(\n  client: Redis,\n  commands: string[][],\n): Promise<[unknown, any][] | null> {\n  if (!commands.length) {\n    return [];\n  }\n  return client.multi(commands).exec();\n}\n\nexport function minifyLuaScript(\n  lines: string[],\n  ...argNames: string[]\n): string {\n  let combined = lines.map((ln) => ln.trim()).join(' ');\n  argNames.forEach((name, i) => {\n    combined = combined.replace(new RegExp(`\\\\$${name}\\\\b`, 'g'), `ARGV[${i + 1}]`);\n  });\n  return combined;\n}\n","import IDable from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\nimport RedisConnectionPool from './RedisConnectionPool';\nimport { multiExec } from './helpers';\nimport { ERedis } from './scripts';\n\ninterface Key<T> {\n  key: keyof T & string;\n  prefix: string;\n}\n\nfunction makeIndexKeys(\n  keys: Key<any>[],\n  partialSerialisedValue: Record<string, string | null>,\n): string[] {\n  return keys\n    .filter(({ key }) => partialSerialisedValue[key])\n    .map(({ key, prefix }) => `${prefix}:${partialSerialisedValue[key]}`);\n}\n\nfunction parseItem(\n  item: (string | null)[] | Record<string, string | null>,\n  fields?: readonly string[],\n): Record<string, string | null> {\n  if (!fields) {\n    return item as any;\n  }\n  const result: Record<string, string | null> = {};\n  for (let f = 0; f < fields.length; f += 1) {\n    result[fields[f]] = (item as any)[f];\n  }\n  return result;\n}\n\nfunction itemHasContent(item: Record<string, string | null>): boolean {\n  return Object.values(item).some((v) => (v !== null));\n}\n\nasync function unwatchAll(client: ERedis): Promise<void> {\n  await client.unwatch();\n}\n\nexport default class RedisCollection<T extends IDable> implements Collection<T> {\n  private readonly keyPrefixes: { [K in keyof T]?: string } = {};\n\n  private readonly keys: Key<T>[] = [];\n\n  private readonly uniqueKeys: Key<T>[] = [];\n\n  private readonly nonUniqueKeys: Key<T>[] = [];\n\n  public constructor(\n    private readonly pool: RedisConnectionPool,\n    private readonly prefix: string,\n    keys: DBKeys<T> = {},\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      const keyPrefix = `${prefix}-${key}`;\n      this.keyPrefixes[key] = keyPrefix;\n      const keyInfo = { key, prefix: keyPrefix };\n      this.keys.push(keyInfo);\n      if (keys[key]!.unique) {\n        this.uniqueKeys.push(keyInfo);\n      } else {\n        this.nonUniqueKeys.push(keyInfo);\n      }\n    });\n  }\n\n  public add(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    return this.pool.withConnection(async (client) => {\n      const added = await this.internalAdd(client, serialised, false);\n      if (!added) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  public update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    const { id, ...patchSerialised } = serialiseRecord(value);\n    const sKey = serialiseValue(key);\n    if (upsert && keyName !== 'id' && !id) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, keyName, sKey))[0];\n      if (sId) {\n        if (id && id !== sId) {\n          throw new Error('Cannot update id');\n        }\n      } else if (!upsert) {\n        return;\n      }\n      const rKey = this.makeKey(sId || id);\n      await client.watch(rKey);\n      const oldSerialised = sId && await this.rawByKeyKeepWatches(\n        client,\n        sId,\n        this.keys.map((k) => k.key).filter((k) => patchSerialised[k]),\n      );\n      if (!oldSerialised) {\n        if (upsert) {\n          await this.internalAdd(\n            client,\n            { id, [keyName]: sKey, ...patchSerialised },\n            true,\n          );\n        }\n        return;\n      }\n      Object.keys(patchSerialised).forEach((k) => {\n        if (oldSerialised[k] === patchSerialised[k]) {\n          delete patchSerialised[k];\n          delete oldSerialised[k];\n        }\n      });\n      const diff = Object.entries(patchSerialised).flat();\n      if (!diff.length) {\n        return; // nothing changed\n      }\n      const patchUniqueKeys = makeIndexKeys(this.uniqueKeys, patchSerialised);\n      const patchNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, patchSerialised);\n      const oldUniqueKeys = makeIndexKeys(this.uniqueKeys, oldSerialised);\n      const oldNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, oldSerialised);\n      if (\n        oldUniqueKeys.length !== patchUniqueKeys.length ||\n        oldNonUniqueKeys.length !== patchNonUniqueKeys.length\n      ) {\n        throw new Error('unexpected key mismatch with old value');\n      }\n      const keyCount = 1 + (patchUniqueKeys.length + patchNonUniqueKeys.length) * 2;\n      const params = [\n        rKey,\n        ...patchUniqueKeys,\n        ...patchNonUniqueKeys,\n        ...oldUniqueKeys,\n        ...oldNonUniqueKeys,\n        patchUniqueKeys.length,\n        patchUniqueKeys.length + patchNonUniqueKeys.length,\n        sId,\n        ...diff,\n      ];\n      const updated = await client\n        .multi()\n        .update(keyCount, params)\n        .exec();\n      if (!updated) {\n        throw new Error('transient error');\n      }\n      if (!updated[0][1]) {\n        throw new Error('duplicate');\n      }\n    }, unwatchAll);\n  }\n\n  public get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const sKey = serialiseValue(key);\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, keyName, sKey))[0];\n      if (sId === undefined) {\n        return null;\n      }\n      const results = await this.getByKeysKeepWatches(client, [sId], fields);\n      return results[0] || null;\n    }, unwatchAll);\n  }\n\n  public getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    return this.pool.retryWithConnection(async (client) => {\n      let sIds: string[];\n      if (keyName) {\n        const sKey = serialiseValue(key);\n        sIds = await this.getAndWatchBySerialisedKey(client, keyName, sKey);\n      } else {\n        sIds = await client.keys(this.makeKey('*'));\n        const cut = this.prefix.length + 1;\n        sIds = sIds.map((v) => v.substr(cut));\n      }\n      return this.getByKeysKeepWatches(client, sIds, fields);\n    }, unwatchAll);\n  }\n\n  public remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    const sKey = serialiseValue(value);\n    const indexedKeys = this.keys.map((k) => k.key);\n    indexedKeys.push('id');\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, key, sKey);\n      const items = (await Promise.all(\n        sIds.map((sId) => this.rawByKeyKeepWatches(client, sId, indexedKeys)),\n      )).filter(<T>(item?: T): item is T => (item !== undefined));\n\n      if (items.length === 0) {\n        return 0;\n      }\n\n      const pipeline = client.multi();\n      items.forEach((item) => {\n        const keys = makeIndexKeys(this.keys, item);\n        pipeline.remove(\n          1 + keys.length,\n          this.makeKey(item.id!),\n          ...keys,\n          item.id!,\n        );\n      });\n      await pipeline.exec();\n      return items.length;\n    }, unwatchAll);\n  }\n\n  private makeKey(serialisedId: string): string {\n    return `${this.prefix}:${serialisedId}`;\n  }\n\n  private async internalAdd(\n    client: ERedis,\n    { id, ...serialised }: Record<string, string>,\n    checkWatch: boolean,\n  ): Promise<boolean> {\n    const uniqueKeys = makeIndexKeys(this.uniqueKeys, serialised);\n    const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, serialised);\n\n    const keyCount = 1 + uniqueKeys.length + nonUniqueKeys.length;\n    const params = [\n      this.makeKey(id),\n      ...uniqueKeys,\n      ...nonUniqueKeys,\n      uniqueKeys.length,\n      'id', // ID is always first in flattened key/value pairs\n      id,\n      ...Object.entries(serialised).flat(),\n    ];\n\n    if (!checkWatch) {\n      return Boolean(await client.add(keyCount, ...params));\n    }\n\n    const result = await client\n      .multi()\n      .add(keyCount, ...params)\n      .exec();\n    if (!result) {\n      throw new Error('transient error');\n    }\n    return Boolean(result[0][1]);\n  }\n\n  private async getByKeysKeepWatches<F extends readonly (keyof T & string)[]>(\n    client: ERedis,\n    serialisedIds: string[],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const results = await multiExec(\n      client,\n      serialisedIds\n        .map((sId) => this.makeKey(sId))\n        .map((k) => (fields ? ['hmget', k, ...fields] : ['hgetall', k])),\n    );\n    if (!results) {\n      throw new Error('transient error');\n    }\n    return results\n      .map(([, item]: [unknown, any]) => parseItem(item, fields))\n      .filter(itemHasContent)\n      .map(deserialiseRecord) as T[];\n  }\n\n  private async rawByKeyKeepWatches(\n    client: ERedis,\n    serialisedId: string,\n    fields?: readonly (keyof T & string)[],\n  ): Promise<Record<string, string | null> | undefined> {\n    const key = this.makeKey(serialisedId);\n    let item;\n    if (fields) {\n      if (!fields.length) {\n        // just check existence\n        const exists = await client.exists(key);\n        return exists ? {} : undefined;\n      }\n      item = await client.hmget(key, ...fields);\n    } else {\n      item = await client.hgetall(key);\n    }\n    const parsed = parseItem(item, fields);\n    return itemHasContent(parsed) ? parsed : undefined;\n  }\n\n  private async getAndWatchBySerialisedKey(\n    client: ERedis,\n    keyName: keyof T,\n    serialisedValue: string,\n  ): Promise<string[]> {\n    if (keyName === 'id') {\n      return [serialisedValue];\n    }\n    const keyPrefix = this.keyPrefixes[keyName];\n    if (!keyPrefix) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const keyAddress = `${keyPrefix}:${serialisedValue}`;\n    await client.watch(keyAddress);\n    return client.smembers(keyAddress);\n  }\n}\n","import { Redis } from 'ioredis';\nimport { minifyLuaScript, ExtendedRedis } from './helpers';\n\nexport interface ScriptExtensions {\n  add(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  update(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  remove(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n}\n\nexport type ERedis = ExtendedRedis<ScriptExtensions>;\n\n// KEYS = [id, ...uniqueKeys, ...nonUniqueKeys]\nconst SCRIPT_ADD_ITEM = minifyLuaScript([\n  'if redis.call(\"exists\",KEYS[1])==1 then',\n  '  return 0',\n  'end',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 2))',\n  'for k=2,#KEYS do',\n  '  redis.call(\"sadd\",KEYS[k],ARGV[3])',\n  'end',\n  'return 1',\n], 'uniqueKeyCount');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE_ITEM = minifyLuaScript([\n  'local tkc=tonumber($totalKeyCount)',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 4))',\n  'for k=1,tkc do',\n  '  redis.call(\"smove\",KEYS[1+tkc+k],KEYS[1+k],$id)',\n  'end',\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...keys]\nconst SCRIPT_REMOVE_ITEM = minifyLuaScript([\n  'redis.call(\"del\",KEYS[1])',\n  'for k=2,#KEYS do',\n  '  redis.call(\"srem\",KEYS[k],$id)',\n  'end',\n], 'id');\n\nexport default async function defineAllScripts(\n  client: Redis,\n): Promise<ERedis> {\n  await client.defineCommand('add', { lua: SCRIPT_ADD_ITEM });\n  await client.defineCommand('update', { lua: SCRIPT_UPDATE_ITEM });\n  await client.defineCommand('remove', { lua: SCRIPT_REMOVE_ITEM });\n\n  return client as ERedis;\n}\n","import IORedis from 'ioredis';\nimport defineAllScripts, { ERedis } from './scripts';\nimport retry from '../helpers/retry';\n\ntype RS = new(host?: string, options?: IORedis.RedisOptions) => IORedis.Redis;\n\nconst withRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message === 'transient error'\n));\n\nexport default class RedisConnectionPool {\n  private readonly connections: ERedis[] = [];\n\n  private inUse = 0;\n\n  private queue: ((client: ERedis) => void)[] = [];\n\n  private closingFn?: () => void;\n\n  private closed = false;\n\n  public constructor(\n    private readonly RedisStatic: RS,\n    private readonly url: string,\n    private readonly options: IORedis.RedisOptions,\n    private readonly maxConnections: number,\n  ) {}\n\n  public async withConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    const c = await this.getConnection();\n    try {\n      return await fn(c);\n    } finally {\n      if (teardown) {\n        await teardown(c);\n      }\n      this.returnConnection(c);\n    }\n  }\n\n  public async retryWithConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    return withRetry(() => this.withConnection(fn, teardown));\n  }\n\n  public close(): Promise<void> {\n    if (this.closed) {\n      return Promise.resolve();\n    }\n\n    this.closed = true;\n    if (this.inUse === 0) {\n      this.doClose();\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve): void => {\n      this.closingFn = (): void => {\n        this.doClose();\n        resolve();\n      };\n    });\n  }\n\n  private doClose(): void {\n    this.connections.forEach((c) => c.disconnect());\n    this.connections.length = 0;\n  }\n\n  private async getConnection(): Promise<ERedis> {\n    if (this.closed) {\n      throw new Error('Connection closed');\n    }\n\n    const r = this.connections.pop();\n    if (r) {\n      this.inUse += 1;\n      return r;\n    }\n    if (this.inUse < this.maxConnections) {\n      this.inUse += 1;\n      const client = new this.RedisStatic(this.url, this.options);\n      await client.connect();\n      return defineAllScripts(client);\n    }\n    return new Promise((resolve): void => {\n      this.queue.push(resolve);\n    });\n  }\n\n  private returnConnection(c: ERedis): void {\n    const q = this.queue.shift();\n    if (q) {\n      q(c);\n    } else {\n      this.inUse -= 1;\n      this.connections.push(c);\n      if (this.closingFn && this.inUse === 0) {\n        this.closingFn();\n      }\n    }\n  }\n}\n","import RedisCollection from './RedisCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\nimport RedisConnectionPool from './RedisConnectionPool';\n\nexport default class RedisDb implements DB {\n  private constructor(\n    private readonly pool: RedisConnectionPool,\n  ) {}\n\n  public static async connect(url: string): Promise<RedisDb> {\n    const { default: RedisStatic } = await import('ioredis');\n    const connectionPoolSize = 5;\n    return new RedisDb(new RedisConnectionPool(\n      RedisStatic,\n      url,\n      { lazyConnect: true },\n      connectionPoolSize,\n    ));\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): RedisCollection<T> {\n    return new RedisCollection(this.pool, name, keys);\n  }\n\n  public close(): Promise<void> {\n    return this.pool.close();\n  }\n\n  public getConnectionPool(): RedisConnectionPool {\n    return this.pool;\n  }\n}\n","import IDable from '../interfaces/IDable';\nimport Collection, { UpdateOptions } from '../interfaces/Collection';\n\nexport type Wrapped<T extends IDable, WF extends keyof T, W> = {\n  [K in keyof T]: K extends 'id' ? T[K] : K extends WF ? W : T[K];\n};\n\nexport interface Wrapper<T extends IDable, K extends keyof T, W, E> {\n  wrap: (\n    key: K,\n    value: T[K],\n    processed: E,\n  ) => Promise<W> | W;\n\n  unwrap: (\n    key: K,\n    value: W,\n    processed: E,\n  ) => Promise<T[K]> | T[K];\n\n  preWrap?: (\n    record: Readonly<Partial<T>>,\n  ) => Promise<E> | E;\n\n  preUnwrap?: (\n    record: Readonly<Partial<Wrapped<T, K, W>>>,\n  ) => Promise<E> | E;\n\n  preRemove?: (\n    record: Readonly<Pick<Wrapped<T, K, W>, 'id'>>,\n  ) => Promise<void> | void;\n}\n\nfunction hasAnyField(value: object, fields: readonly string[]): boolean {\n  return fields\n    .some((field) => Object.prototype.hasOwnProperty.call(value, field));\n}\n\nexport default class WrappedCollection<\n  T extends IDable,\n  WF extends readonly (keyof Omit<T, 'id'> & string)[],\n  W,\n  E,\n  Inner extends Wrapped<T, WF[-1], W> = Wrapped<T, WF[-1], W>\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<Inner>,\n    private readonly fields: WF,\n    private readonly wrapper: Wrapper<T, WF[-1], W, E>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(await this.wrapAll(entry));\n  }\n\n  public async get<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key: K,\n    value: T[K] & Inner[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.get(key, value, fields!);\n    return raw ? this.unwrapAll(raw, { [key]: value }) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key?: K,\n    value?: T[K] & Inner[NonNullable<K>],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (key !== undefined && this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.getAll(key!, value!, fields!);\n    const extra = (key !== undefined) ? { [key]: value } : undefined;\n    return Promise.all(raw.map((v) => this.unwrapAll(v, extra)));\n  }\n\n  public async update<K extends keyof T & keyof Inner & string>(\n    key: K,\n    value: T[K] & Inner[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot update by encrypted value');\n    }\n    const converted = await this.wrapAll(update, { [key]: value });\n    return this.baseCollection.update(key, value, converted, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K] & Inner[K],\n  ): Promise<number> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot remove by encrypted value');\n    }\n    if (!this.wrapper.preRemove) {\n      return this.baseCollection.remove(key, value);\n    }\n\n    const items = await this.baseCollection.getAll(key, value, ['id']);\n    await Promise.all(items.map(async (item) => {\n      await this.wrapper.preRemove!(item);\n      await this.baseCollection.remove('id', item.id);\n    }));\n    return items.length;\n  }\n\n  private async wrapAll(\n    v: Readonly<T>,\n    extra?: object,\n  ): Promise<Inner>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>> {\n    let processed: E;\n    if (this.wrapper.preWrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preWrap(allFields);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.wrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n\n  private async unwrapAll(\n    v: Readonly<Inner>,\n    extra?: object,\n  ): Promise<T>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>> {\n    let processed: E;\n    if (this.wrapper.preUnwrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preUnwrap(allFields as any);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.unwrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n}\n","export default class LruCache<K, V> {\n  private readonly storage = new Map<K, V>();\n\n  public constructor(\n    private readonly capacity: number,\n  ) {}\n\n  public set(key: K, value: V): void {\n    this.storage.delete(key);\n    this.storage.set(key, value);\n    this.flush();\n  }\n\n  public get(key: K): V | undefined {\n    const value = this.storage.get(key);\n    if (this.storage.delete(key)) {\n      this.storage.set(key, value!);\n    }\n    return value;\n  }\n\n  public remove(key: K): void {\n    this.storage.delete(key);\n  }\n\n  private flush(): void {\n    while (this.storage.size > this.capacity) {\n      this.storage.delete(this.storage.keys().next().value);\n    }\n  }\n}\n","import crypto, { KeyObject } from 'crypto';\nimport Encryption from './Encryption';\n\nconst ALG = 'aes-256-cbc';\nconst ALG_BUF = Buffer.from(`${ALG}:`, 'utf8');\nconst IV_LEN = 16;\n\nconst nodeEncryptionSync: Encryption<Buffer, KeyObject, Buffer> = {\n  encrypt: (key: KeyObject, v: string): Buffer => {\n    const iv = crypto.randomBytes(IV_LEN);\n    const cipher = crypto.createCipheriv(ALG, key, iv);\n    const part = cipher.update(v, 'utf8');\n    const final = cipher.final();\n    return Buffer.concat([ALG_BUF, iv, part, final]);\n  },\n\n  decrypt: (key: KeyObject, v: Buffer): string => {\n    if (!v.slice(0, ALG_BUF.length).equals(ALG_BUF)) {\n      throw new Error('Unknown encryption algorithm');\n    }\n\n    const iv = v.slice(ALG_BUF.length, ALG_BUF.length + IV_LEN);\n    const encrypted = v.slice(ALG_BUF.length + IV_LEN);\n\n    const decipher = crypto.createDecipheriv(ALG, key as any, iv);\n    let decrypted = decipher.update(encrypted, undefined, 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  },\n\n  generateKey: (): KeyObject => crypto\n    .createSecretKey(crypto.randomBytes(32)),\n\n  serialiseKey: (key: KeyObject): Buffer => key.export(),\n\n  deserialiseKey: (data: Buffer): KeyObject => crypto.createSecretKey(data),\n};\n\nexport default nodeEncryptionSync;\n","import IDable, { IDableBy, IDType } from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport LruCache from '../helpers/LruCache';\nimport { serialiseValue, deserialiseValue } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\nimport Encryption from './encryption/Encryption';\nimport nodeEncryptionSync from './encryption/nodeEncryptionSync';\n\nexport interface KeyRecord<ID extends IDType, KeyT> {\n  id: ID;\n  key: KeyT;\n}\n\ntype EncryptableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\ntype Encrypter<EncT, ID extends IDType> = <T extends IDableBy<ID>>(\n) => <F extends EncryptableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n) => Collection<T>;\n\n// makeEncrypter provides optional 2-tier function call due to\n// https://github.com/Microsoft/TypeScript/issues/26242\n\nfunction makeEncrypter<EncT, ID extends IDType>(\n  wrapper: <T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => Collection<T>,\n): Encrypter<EncT, ID> {\n  return (fields?: any, baseCollection?: Collection<any>): any => {\n    if (fields && baseCollection) {\n      // non-typescript API (remove need for extra ())\n      return wrapper(fields, baseCollection) as any;\n    }\n    return wrapper;\n  };\n}\n\nfunction encryptByKey(sKey: Buffer): Encrypter<Buffer, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, IDType> {\n  const key = cr.deserialiseKey(sKey);\n\n  return makeEncrypter(<T extends IDable, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<EncT> | EncT => cr.encrypt(key, serialiseValue(v)),\n    unwrap: async (k, v): Promise<any> => deserialiseValue(await cr.decrypt(key, v)),\n  }));\n}\n\nfunction encryptByRecord<ID extends IDType>(\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const cache = new LruCache<ID, KeyT>(cacheSize);\n\n  const loadKey = async (\n    generateIfNeeded: boolean,\n    record: { id?: ID },\n  ): Promise<KeyT> => {\n    const { id } = record;\n\n    if (id === undefined) {\n      throw new Error('Must provide ID for encryption');\n    }\n\n    const cached = cache.get(id);\n    if (cached) {\n      return cached;\n    }\n    let key: KeyT;\n    const item = await keyCollection.get('id', id, ['key']);\n    if (item) {\n      key = cr.deserialiseKey(item.key);\n    } else {\n      if (!generateIfNeeded) {\n        throw new Error('No encryption key found for record');\n      }\n      key = await cr.generateKey();\n      await keyCollection.add({ id, key: cr.serialiseKey(key) });\n    }\n    cache.set(id, key);\n    return key;\n  };\n\n  const removeKey = async ({ id }: { id: ID }): Promise<void> => {\n    await keyCollection.remove('id', id);\n    cache.remove(id);\n  };\n\n  return makeEncrypter(<T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, KeyT>(baseCollection, fields, {\n    wrap: (k, v, key): Promise<EncT> | EncT => cr.encrypt(key, JSON.stringify(v)),\n    unwrap: async (k, v, key): Promise<any> => JSON.parse(await cr.decrypt(key, v)),\n    preWrap: loadKey.bind(null, true),\n    preUnwrap: loadKey.bind(null, false),\n    preRemove: removeKey,\n  }));\n}\n\nfunction encryptByRecordWithMasterKey<ID extends IDType>(\n  sMasterKey: Buffer,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const keyEnc = encryptByKey(sMasterKey, cr);\n  const encKeyCollection = keyEnc<KeyRecord<ID, SerialisedKeyT>>()(\n    ['key'],\n    keyCollection,\n  );\n  return encryptByRecord(encKeyCollection, cacheSize, cr);\n}\n\nexport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\n","import CollectionStorage from './CollectionStorage';\nimport WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';\nimport Encryption from './wrappers/encryption/Encryption';\nimport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n} from './wrappers/encrypted';\nimport DB from './interfaces/DB';\nimport Collection from './interfaces/Collection';\nimport IDable from './interfaces/IDable';\n\nexport type DB = DB;\nexport type Collection<T extends IDable> = Collection<T>;\nexport type Wrapped<T extends IDable, WF extends keyof T, W> =\n  Wrapped<T, WF, W>;\nexport type Encrypted<T extends IDable, WF extends keyof T> =\n  Wrapped<T, WF, Buffer>;\nexport type Encryption<EncT, KeyT, SerialisedKeyT> =\n  Encryption<EncT, KeyT, SerialisedKeyT>;\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport { default as RedisDb } from './redis/RedisDb';\nexport { default as LruCache } from './helpers/LruCache';\nexport {\n  WrappedCollection,\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\nexport {\n  default as nodeEncryptionSync,\n} from './wrappers/encryption/nodeEncryptionSync';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport RedisDb from './redis/RedisDb';\nimport DB from './interfaces/DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else if (url.startsWith('redis')) {\n      dbClass = RedisDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}