{"version":3,"sources":["webpack://websocket-express/webpack/universalModuleDefinition","webpack://websocket-express/webpack/bootstrap","webpack://websocket-express/external \"crypto\"","webpack://websocket-express/external \"mongodb\"","webpack://websocket-express/external \"url\"","webpack://websocket-express/external \"ioredis\"","webpack://websocket-express/external \"pg\"","webpack://websocket-express/./src/interfaces/BaseCollection.ts","webpack://websocket-express/./src/helpers/serialiser.ts","webpack://websocket-express/./src/memory/MemoryCollection.ts","webpack://websocket-express/./src/memory/MemoryDb.ts","webpack://websocket-express/./src/helpers/retry.ts","webpack://websocket-express/./src/mongo/MongoCollection.ts","webpack://websocket-express/./src/mongo/MongoDb.ts","webpack://websocket-express/./src/redis/helpers.ts","webpack://websocket-express/./src/redis/RedisCollection.ts","webpack://websocket-express/./src/redis/scripts.ts","webpack://websocket-express/./src/redis/RedisConnectionPool.ts","webpack://websocket-express/./src/redis/RedisDb.ts","webpack://websocket-express/./src/postgresql/hstore.ts","webpack://websocket-express/./src/postgresql/sql.ts","webpack://websocket-express/./src/postgresql/PostgresCollection.ts","webpack://websocket-express/./src/postgresql/PostgresDb.ts","webpack://websocket-express/./src/wrappers/WrappedCollection.ts","webpack://websocket-express/./src/helpers/LruCache.ts","webpack://websocket-express/./src/wrappers/encryption/nodeEncryptionSync.ts","webpack://websocket-express/./src/wrappers/encrypted.ts","webpack://websocket-express/./src/index.ts","webpack://websocket-express/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","BaseCollection","constructor","keys","entry","this","preAct","internalAdd","searchAttribute","searchValue","returnAttributes","isIndexed","Error","internalGet","internalGetAll","update","options","undefined","id","upsert","withoutId","internalUpsert","isIndexUnique","some","k","internalUpdate","internalRemove","attribute","keyOptions","Boolean","unique","all","length","serialiseValue","Buffer","toString","JSON","stringify","deserialiseValue","type","data","substr","from","parse","serialiseRecord","record","result","forEach","deserialiseRecord","v","MemoryCollection","simulatedLatency","stateRef","closed","super","Map","indices","millis","Promise","resolve","setTimeout","sleep","serialised","internalCheckDuplicates","set","internalPopulateIndices","has","updates","internalGetSerialisedIds","map","sId","oldSerialised","oldValue","newValue","newSerialised","internalRemoveIndices","e","sIds","fields","field","applyFilter","delete","sKey","index","serialisedValue","checkId","Set","add","size","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","getCollection","mapTables","close","shouldRetry","maxAttempts","baseDelayMillis","attemptDelayMillis","randomDelayMillis","async","attempt","fn","message","Math","random","MONGO_ID","ID","DOT_REG","fieldNameToMongo","encodeURIComponent","replace","withUpsertRetry","retry","includes","convertToMongo","converted","MBinary","_bsontype","convertFromMongo","buffer","decodeURIComponent","fieldNameFromMongo","makeMongoProjection","names","projection","fieldName","MongoCollection","collection","keyName","mongoKey","createIndex","insertOne","updateOne","$set","query","mongoUpdate","updateMany","findOne","cursor","find","raw","push","deleteMany","deletedCount","MongoDb","client","MongoClient","connect","useNewUrlParser","useUnifiedTopology","escapeName","getDb","minifyLuaScript","lines","argNames","combined","ln","trim","join","RegExp","notUndefined","item","makeIndexKeys","partialSerialisedValue","filter","prefix","parseItem","f","itemHasContent","values","unwatchAll","unwatch","mapAwaitSync","RedisCollection","pool","keyPrefix","keyPrefixes","keyInfo","uniqueKeys","nonUniqueKeys","withConnection","runAdd","patchSerialised","retryWithConnection","patch","getUpdatePatch","runUpdates","insertValue","getAndWatchBySerialisedKey","patches","getByKeysKeepWatches","makeKey","cut","indexedKeys","items","rawByKeyKeepWatches","pipeline","multi","remove","exec","serialisedId","checkWatch","keyCount","entries","flat","watch","argsList","makeUpdateArgs","results","updateArgs","checkUpdate","chain","updateWithoutCheck","diff","patchUniqueKeys","patchNonUniqueKeys","oldUniqueKeys","oldNonUniqueKeys","serialisedIds","commands","multiExec","exists","hmget","hgetall","parsed","keyAddress","smembers","SCRIPT_ADD","FRAG_CHECK_UPDATE","FRAG_UPDATE","SCRIPT_CHECK_UPDATE","SCRIPT_UPDATE_WITHOUT_CHECK","SCRIPT_UPDATE","SCRIPT_REMOVE","withRetry","RedisConnectionPool","RedisStatic","maxConnections","teardown","getConnection","returnConnection","inUse","doClose","closingFn","connections","disconnect","pop","defineCommand","lua","defineAllScripts","queue","q","shift","RedisDb","default","lazyConnect","getConnectionPool","quoteHValue","DQUOTE_REG","SQUOTE_REG","quoteValue","msg","ID_REG","withIdentifiers","base","identifiers","quoteIdentifier","STATEMENTS","CREATE_HSTORE","CREATE_TABLE","CREATE_INDEX","CREATE_UNIQUE_INDEX","DROP_INDEX","INSERT","UPDATE","UPDATE_ID","UPSERT_ID","SELECT_ONE","SELECT_ALL","SELECT_ALL_BY","SELECT_ID","DELETE","DELETE_ID","toHStore","encodeHStore","fromHStore","rawMap","hstore","current","currentKey","quote","decodeHStore","PostgresCollection","tableName","T","keyEntries","I","release","configureTable","then","pending","catch","process","stderr","write","rest","runTableQuery","rowCount","rows","queryName","cached","cachedQueries","rowMode","text","PostgresDb","Pool","connectionString","end","hasAnyField","WrappedCollection","baseCollection","wrapper","wrapAll","unwrapAll","getAll","extra","preRemove","processed","preWrap","allFields","wrap","preUnwrap","unwrap","LruCache","capacity","storage","flush","next","ALG","ALG_BUF","nodeEncryptionSync","encrypt","iv","crypto","randomBytes","cipher","createCipheriv","part","final","concat","decrypt","slice","equals","encrypted","decipher","createDecipheriv","decrypted","generateKey","createSecretKey","serialiseKey","export","deserialiseKey","makeEncrypter","encryptByKey","cr","encryptByRecord","keyCollection","cacheSize","cache","loadKey","generateIfNeeded","removeKey","encryptByRecordWithMasterKey","sMasterKey","keyEnc","CollectionStorage","dbClass","startsWith"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"websocket-express\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"websocket-express\"] = factory();\n\telse\n\t\troot[\"websocket-express\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"crypto\");","module.exports = require(\"mongodb\");","module.exports = require(\"url\");","module.exports = require(\"ioredis\");","module.exports = require(\"pg\");","import Collection, { UpdateOptions } from './Collection';\nimport IDable from './IDable';\nimport { DBKeys } from './DB';\n\nexport default abstract class BaseCollection<T extends IDable> implements Collection<T> {\n  protected constructor(\n    protected readonly keys: DBKeys<T>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    await this.preAct();\n    return this.internalAdd(entry);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.preAct();\n    return this.internalGet(searchAttribute, searchValue, returnAttributes);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (searchAttribute && !this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.preAct();\n    return this.internalGetAll(searchAttribute, searchValue, returnAttributes);\n  }\n\n  public async update<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options: UpdateOptions = {},\n  ): Promise<void> {\n    if (searchAttribute === 'id' && update.id !== undefined && update.id !== searchValue) {\n      throw new Error('Cannot update ID');\n    }\n    if (options.upsert) {\n      if (searchAttribute !== 'id') {\n        throw new Error(`Can only upsert by ID, not ${searchAttribute}`);\n      }\n      await this.preAct();\n      let withoutId = update;\n      if (Object.prototype.hasOwnProperty.call(update, 'id')) {\n        withoutId = { ...update };\n        delete withoutId.id;\n      }\n      return this.internalUpsert(searchValue as T['id'], withoutId, options);\n    }\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    if (\n      !this.isIndexUnique(searchAttribute) &&\n      Object.keys(update).some((k) => this.isIndexUnique(k))\n    ) {\n      throw new Error('duplicate');\n    }\n\n    await this.preAct();\n    return this.internalUpdate(searchAttribute, searchValue, update, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    if (!this.isIndexed(searchAttribute)) {\n      throw new Error(`No index for ${searchAttribute}`);\n    }\n    await this.preAct();\n    return this.internalRemove(searchAttribute, searchValue);\n  }\n\n  protected isIndexed(attribute: string): boolean {\n    return (\n      attribute === 'id' ||\n      this.keys[attribute as keyof DBKeys<T>] !== undefined\n    );\n  }\n\n  protected isIndexUnique(attribute: string): boolean {\n    const keyOptions = this.keys[attribute as keyof DBKeys<T>];\n    return (\n      attribute === 'id' ||\n      Boolean(keyOptions && keyOptions.unique)\n    );\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-empty-function\n  protected preAct(): Promise<void> | void {}\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.internalGetAll(searchAttribute, searchValue, returnAttributes);\n    return (all.length > 0) ? all[0] : null;\n  }\n\n  protected internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n    options: UpdateOptions,\n  ): Promise<void> {\n    return this.internalUpdate('id', id, update, options);\n  }\n\n  protected abstract internalAdd(entry: T): Promise<void>;\n\n  protected abstract internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]>;\n\n  protected abstract internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    options: UpdateOptions,\n  ): Promise<void>;\n\n  protected abstract internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number>;\n}\n","export function serialiseValue(\n  value: unknown,\n): string {\n  if (value instanceof Buffer) {\n    return `B${value.toString('base64')}`;\n  }\n  return `J${JSON.stringify(value)}`;\n}\n\nexport function deserialiseValue(\n  value: string,\n): unknown {\n  const type = value[0];\n  const data = value.substr(1);\n  if (type === 'B') {\n    return Buffer.from(data, 'base64');\n  }\n  if (type === 'J') {\n    return JSON.parse(data);\n  }\n  throw new Error(`Unknown data type ${type}`);\n}\n\nexport function serialiseRecord<T>(\n  record: T,\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  Object.keys(record).forEach((k) => {\n    result[k] = serialiseValue((record as any)[k]);\n  });\n  return result;\n}\n\nexport function deserialiseRecord(\n  record: Record<string, string | null>,\n): Record<string, unknown> {\n  const result: Record<string, any> = {};\n  Object.keys(record).forEach((k) => {\n    const v = record[k];\n    if (v) {\n      result[k] = deserialiseValue(v);\n    }\n  });\n  return result;\n}\n","import IDable from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\n\nfunction sleep(millis: number): Promise<void> | void {\n  if (!millis) {\n    return undefined;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\ninterface State {\n  closed: boolean;\n}\n\nexport default class MemoryCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly data: Map<string, Record<string, string>>;\n\n  private readonly indices: Partial<Record<keyof T, Map<string, Set<string>>>> = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n    private readonly stateRef: State = { closed: false },\n  ) {\n    super(keys);\n\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      this.indices[k as keyof T] = new Map();\n    });\n  }\n\n  protected preAct(): Promise<void> | void {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    return sleep(this.simulatedLatency);\n  }\n\n  protected async internalAdd(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    this.internalCheckDuplicates(serialised, true);\n    this.data.set(serialised.id, serialised);\n    this.internalPopulateIndices(serialised);\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    if (this.data.has(serialiseValue(id))) {\n      await this.internalUpdate('id', id, update);\n    } else {\n      await this.internalAdd({ id, ...update } as T);\n    }\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n  ): Promise<void> {\n    const sIds = this.internalGetSerialisedIds(searchAttribute, searchValue);\n\n    const updates = sIds.map((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      const oldValue = deserialiseRecord(oldSerialised) as T;\n      const newValue = { ...oldValue, ...update };\n      if (newValue.id !== oldValue.id) {\n        throw new Error('Cannot update ID');\n      }\n      const newSerialised = serialiseRecord(newValue);\n      return { oldSerialised, newSerialised };\n    });\n\n    updates.forEach(({ oldSerialised }) => this.internalRemoveIndices(oldSerialised));\n    try {\n      updates.forEach(({ newSerialised }) => this.internalCheckDuplicates(newSerialised, false));\n    } catch (e) {\n      updates.forEach(({ oldSerialised }) => this.internalPopulateIndices(oldSerialised));\n      throw e;\n    }\n    updates.forEach(({ newSerialised }) => {\n      this.data.set(newSerialised.id, newSerialised);\n      this.internalPopulateIndices(newSerialised);\n    });\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    let sIds: string[];\n    if (searchAttribute) {\n      sIds = this.internalGetSerialisedIds(searchAttribute, searchValue!);\n    } else {\n      sIds = [...this.data.keys()];\n    }\n    return sIds.map((sId) => applyFilter(\n      deserialiseRecord(this.data.get(sId)!) as T,\n      returnAttributes,\n    ));\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const sIds = this.internalGetSerialisedIds(searchAttribute, searchValue);\n    sIds.forEach((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      this.internalRemoveIndices(oldSerialised);\n      this.data.delete(sId);\n    });\n\n    return sIds.length;\n  }\n\n  private internalGetSerialisedIds<K extends keyof T>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): string[] {\n    const sKey = serialiseValue(searchValue);\n    if (searchAttribute === 'id') {\n      return this.data.has(sKey) ? [sKey] : [];\n    }\n    const index = this.indices[searchAttribute];\n    if (!index) {\n      throw new Error(`Requested key ${searchAttribute} not indexed`);\n    }\n    const sIds = index.get(sKey);\n    return sIds ? [...sIds] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(\n    serialisedValue: Record<string, string>,\n    checkId: boolean,\n  ): void {\n    if (checkId && this.data.has(serialisedValue.id)) {\n      throw new Error('duplicate');\n    }\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      if (this.isIndexUnique(key) && index.has(serialisedValue[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      const v = serialisedValue[key];\n      let o = index.get(v);\n      if (!o) {\n        o = new Set<string>();\n        index.set(v, o);\n      }\n      o.add(serialisedValue.id);\n    });\n  }\n\n  private internalRemoveIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.keys(this.keys).forEach((key) => {\n      const index = this.indices[key as keyof T]!;\n      const v = serialisedValue[key];\n      const o = index.get(v)!;\n      o.delete(serialisedValue.id);\n      if (!o.size) {\n        index.delete(v);\n      }\n    });\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb implements DB {\n  private readonly simulatedLatency: number;\n\n  private readonly mapTables = new Map<string, MemoryCollection<any>>();\n\n  private readonly stateRef = { closed: false };\n\n  public constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MemoryCollection<T> {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n        this.stateRef,\n      ));\n    }\n    return this.mapTables.get(name)! as MemoryCollection<T>;\n  }\n\n  public close(): void {\n    this.stateRef.closed = true;\n  }\n}\n","function sleep(millis: number): Promise<void> | null {\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nexport default (\n  shouldRetry: (e: any) => boolean,\n  maxAttempts = 5,\n  baseDelayMillis = 20,\n  attemptDelayMillis = 200,\n  randomDelayMillis = 200,\n) => async <T>(fn: () => Promise<T> | T): Promise<T> => {\n  for (let attempt = 1; ; attempt += 1) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      return await fn();\n    } catch (e) {\n      if (!shouldRetry(e)) {\n        throw e;\n      }\n      if (attempt >= maxAttempts) {\n        e.message += ` (attempted ${attempt} times)`;\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(\n      baseDelayMillis +\n      attempt * attemptDelayMillis +\n      Math.random() * randomDelayMillis,\n    );\n  }\n};\n","import {\n  Collection as MCollection,\n  Binary as MBinary,\n} from 'mongodb';\nimport IDable from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport { DBKeys } from '../interfaces/DB';\nimport retry from '../helpers/retry';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\ninterface State {\n  closed: boolean;\n}\n\nconst DOT_REG = /\\./g;\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return encodeURIComponent(name).replace(DOT_REG, '%2E');\n}\n\nfunction fieldNameFromMongo(name: string): string {\n  if (name === MONGO_ID) {\n    return ID;\n  }\n  return decodeURIComponent(name);\n}\n\nconst withUpsertRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message.includes('E11000')\n));\n\nfunction convertToMongo<T extends Partial<IDable>>(\n  value: T,\n): Record<string, unknown> {\n  const converted: Record<string, unknown> = {};\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    if (v instanceof Buffer) {\n      v = new MBinary(v);\n      // eslint-disable-next-line no-underscore-dangle\n    } else if (typeof v === 'object' && v._bsontype) {\n      throw new Error('Must use Buffer to provide binary data');\n    }\n    converted[fieldNameToMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: Record<string, unknown> | null,\n): T | null {\n  if (!value) {\n    return null;\n  }\n  const converted: T = {} as any;\n  Object.keys(value).forEach((k) => {\n    let v = (value as any)[k];\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype === 'Binary') {\n      v = v.buffer;\n    }\n    (converted as any)[fieldNameFromMongo(k)] = v;\n  });\n  return converted;\n}\n\nfunction makeMongoProjection(\n  names?: readonly string[],\n): Record<string, boolean> {\n  const projection: Record<string, boolean> = {};\n  if (names) {\n    projection[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      projection[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return projection;\n}\n\nexport default class MongoCollection<T extends IDable> extends BaseCollection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    keys: DBKeys<T> = {},\n    private readonly stateRef: State = { closed: false },\n  ) {\n    super(keys);\n    Object.keys(keys).forEach((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      const mongoKey = fieldNameToMongo(keyName);\n      if (options && options.unique) {\n        collection.createIndex({ [mongoKey]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [mongoKey]: 'hashed' });\n      }\n    });\n  }\n\n  protected async internalAdd(value: T): Promise<void> {\n    await this.getCollection().insertOne(convertToMongo(value));\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    await withUpsertRetry(() => this.getCollection().updateOne(\n      convertToMongo({ id }),\n      { $set: convertToMongo(update) },\n      { upsert: true },\n    ));\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n  ): Promise<void> {\n    const query = convertToMongo({ [searchAttribute]: searchValue });\n    const mongoUpdate = { $set: convertToMongo(update) };\n    if (this.isIndexUnique(searchAttribute)) {\n      await this.getCollection().updateOne(query, mongoUpdate);\n    } else {\n      await this.getCollection().updateMany(query, mongoUpdate);\n    }\n  }\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.getCollection().findOne(\n      convertToMongo({ [searchAttribute]: searchValue }),\n      { projection: makeMongoProjection(returnAttributes) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const cursor = this.getCollection().find(\n      searchAttribute ? convertToMongo({ [searchAttribute]: searchValue }) : {},\n      { projection: makeMongoProjection(returnAttributes) },\n    );\n\n    const result: Pick<T, F[-1]>[] = [];\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const result = await this.getCollection().deleteMany(\n      convertToMongo({ [searchAttribute]: searchValue }),\n    );\n    return result.deletedCount || 0;\n  }\n\n  private getCollection(): MCollection {\n    if (this.stateRef.closed) {\n      throw new Error('Connection closed');\n    }\n    return this.collection;\n  }\n}\n","import { MongoClient as MClient, Db as MDb } from 'mongodb';\nimport MongoCollection from './MongoCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nfunction escapeName(name: string): string {\n  return encodeURIComponent(name);\n}\n\nexport default class MongoDb implements DB {\n  private readonly stateRef = { closed: false };\n\n  private constructor(\n    private readonly client: MClient,\n  ) {}\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client);\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MongoCollection<T> {\n    const collection = this.client.db().collection(escapeName(name));\n    return new MongoCollection(collection, keys, this.stateRef);\n  }\n\n  public async close(): Promise<void> {\n    this.stateRef.closed = true;\n    return this.client.close();\n  }\n\n  public getDb(): MDb {\n    return this.client.db();\n  }\n}\n","import { Redis, Pipeline, MultiOptions } from 'ioredis';\n\n// Thanks, https://stackoverflow.com/a/50014868/1180785\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U: never;\n\ntype PipelineVersions<I> = {\n  [K in keyof I]: (...args: ArgumentTypes<I[K]>) => Pipeline & PipelineVersions<I>;\n};\n\ninterface RedisWithExtendedPipeline<I> extends Redis {\n  multi(commands?: string[][], options?: MultiOptions): Pipeline & PipelineVersions<I>;\n  multi(options: { pipeline: false }): Promise<string>;\n}\n\nexport type ExtendedRedis<I> = I & RedisWithExtendedPipeline<I>;\n\nexport async function multiExec(\n  client: Redis,\n  commands: string[][],\n): Promise<[unknown, any][] | null> {\n  if (!commands.length) {\n    return [];\n  }\n  return client.multi(commands).exec();\n}\n\nexport function minifyLuaScript(\n  lines: string[],\n  ...argNames: string[]\n): string {\n  let combined = lines.map((ln) => ln.trim()).join(' ');\n  argNames.forEach((name, i) => {\n    combined = combined.replace(new RegExp(`\\\\$${name}\\\\b`, 'g'), `ARGV[${i + 1}]`);\n  });\n  return combined;\n}\n","import IDable from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport { UpdateOptions } from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\nimport RedisConnectionPool from './RedisConnectionPool';\nimport { multiExec } from './helpers';\nimport { ERedis } from './scripts';\n\ninterface Key<T> {\n  key: keyof T & string;\n  prefix: string;\n}\n\ninterface InternalPatch {\n  sId: string;\n  oldSerialised: Record<string, string | null>;\n  newSerialised: Record<string, string>;\n}\n\nconst notUndefined = <T>(item?: T): item is T => (item !== undefined);\n\nfunction makeIndexKeys(\n  keys: Key<any>[],\n  partialSerialisedValue: Record<string, string | null>,\n): string[] {\n  return keys\n    .filter(({ key }) => partialSerialisedValue[key])\n    .map(({ key, prefix }) => `${prefix}:${partialSerialisedValue[key]}`);\n}\n\nfunction parseItem(\n  item: (string | null)[] | Record<string, string | null>,\n  fields?: readonly string[],\n): Record<string, string | null> {\n  if (!fields) {\n    return item as any;\n  }\n  const result: Record<string, string | null> = {};\n  for (let f = 0; f < fields.length; f += 1) {\n    result[fields[f]] = (item as any)[f];\n  }\n  return result;\n}\n\nfunction itemHasContent(item: Record<string, string | null>): boolean {\n  return Object.values(item).some((v) => (v !== null));\n}\n\nasync function unwatchAll(client: ERedis): Promise<void> {\n  await client.unwatch();\n}\n\nasync function mapAwaitSync<T, O>(\n  values: T[],\n  fn: (value: T) => Promise<O>,\n): Promise<O[]> {\n  const result: O[] = [];\n  for (let i = 0; i < values.length; i += 1) {\n    // eslint-disable-next-line no-await-in-loop\n    result.push(await fn(values[i]));\n  }\n  return result;\n}\n\nexport default class RedisCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly keyPrefixes: { [K in keyof T]?: string } = {};\n\n  private readonly uniqueKeys: Key<T>[] = [];\n\n  private readonly nonUniqueKeys: Key<T>[] = [];\n\n  public constructor(\n    private readonly pool: RedisConnectionPool,\n    private readonly prefix: string,\n    keys: DBKeys<T> = {},\n  ) {\n    super(keys);\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      const keyPrefix = `${prefix}-${key}`;\n      this.keyPrefixes[key] = keyPrefix;\n      const keyInfo = { key, prefix: keyPrefix };\n      if (keys[key]!.unique) {\n        this.uniqueKeys.push(keyInfo);\n      } else {\n        this.nonUniqueKeys.push(keyInfo);\n      }\n    });\n  }\n\n  protected internalAdd(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    return this.pool.withConnection(async (client) => {\n      const added = await this.runAdd(client, serialised, false);\n      if (!added) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  protected internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    update: Partial<T>,\n    { upsert }: UpdateOptions,\n  ): Promise<void> {\n    const patchSerialised = serialiseRecord(update);\n    const sKey = serialiseValue(searchValue);\n\n    if (searchAttribute === 'id') {\n      return this.pool.retryWithConnection(async (client) => {\n        const patch = await this.getUpdatePatch(client, sKey, patchSerialised);\n        if (patch) {\n          await this.runUpdates(client, [patch]);\n        } else if (upsert) {\n          const insertValue = { ...patchSerialised, id: sKey };\n          if (!await this.runAdd(client, insertValue, true)) {\n            throw new Error('duplicate');\n          }\n        }\n      }, unwatchAll);\n    }\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      const patches = (await mapAwaitSync(\n        sIds,\n        (sId) => this.getUpdatePatch(client, sId, patchSerialised),\n      )).filter(notUndefined);\n      await this.runUpdates(client, patches);\n    }, unwatchAll);\n  }\n\n  protected internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const sKey = serialiseValue(searchValue);\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey))[0];\n      if (sId === undefined) {\n        return null;\n      }\n      const results = await this.getByKeysKeepWatches(client, [sId], returnAttributes);\n      return results[0] || null;\n    }, unwatchAll);\n  }\n\n  protected internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    return this.pool.retryWithConnection(async (client) => {\n      let sIds: string[];\n      if (searchAttribute) {\n        const sKey = serialiseValue(searchValue);\n        sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      } else {\n        sIds = await client.keys(this.makeKey('*'));\n        const cut = this.prefix.length + 1;\n        sIds = sIds.map((v) => v.substr(cut));\n      }\n      return this.getByKeysKeepWatches(client, sIds, returnAttributes);\n    }, unwatchAll);\n  }\n\n  protected internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    const sKey = serialiseValue(searchValue);\n    const indexedKeys = Object.keys(this.keys);\n    indexedKeys.push('id');\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, searchAttribute, sKey);\n      const items = (await mapAwaitSync(\n        sIds,\n        (sId) => this.rawByKeyKeepWatches(client, sId, indexedKeys),\n      )).filter(notUndefined);\n\n      if (items.length === 0) {\n        return 0;\n      }\n\n      const pipeline = client.multi();\n      items.forEach((item) => {\n        const uniqueKeys = makeIndexKeys(this.uniqueKeys, item);\n        const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, item);\n        pipeline.remove(\n          1 + uniqueKeys.length + nonUniqueKeys.length,\n          this.makeKey(item.id!),\n          ...uniqueKeys,\n          ...nonUniqueKeys,\n          item.id!,\n        );\n      });\n      await pipeline.exec();\n      return items.length;\n    }, unwatchAll);\n  }\n\n  private makeKey(serialisedId: string): string {\n    return `${this.prefix}:${serialisedId}`;\n  }\n\n  private async runAdd(\n    client: ERedis,\n    { id, ...serialised }: Record<string, string>,\n    checkWatch: boolean,\n  ): Promise<boolean> {\n    const uniqueKeys = makeIndexKeys(this.uniqueKeys, serialised);\n    const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, serialised);\n\n    const keyCount = 1 + uniqueKeys.length + nonUniqueKeys.length;\n    const params = [\n      this.makeKey(id),\n      ...uniqueKeys,\n      ...nonUniqueKeys,\n      uniqueKeys.length,\n      'id', // ID is always first in flattened key/value pairs\n      id,\n      ...Object.entries(serialised).flat(),\n    ];\n\n    if (!checkWatch) {\n      return Boolean(await client.add(keyCount, ...params));\n    }\n\n    const result = await client\n      .multi()\n      .add(keyCount, ...params)\n      .exec();\n    if (!result) {\n      throw new Error('transient error');\n    }\n    return Boolean(result[0][1]);\n  }\n\n  private async getUpdatePatch(\n    client: ERedis,\n    sId: string,\n    patchSerialised: Record<string, string>,\n  ): Promise<InternalPatch | undefined> {\n    await client.watch(this.makeKey(sId));\n    const oldSerialised = await this.rawByKeyKeepWatches(\n      client,\n      sId,\n      Object.keys(this.keys).filter((k) => patchSerialised[k]),\n    );\n    if (!oldSerialised) {\n      return undefined;\n    }\n    const newSerialised = { ...patchSerialised };\n    Object.keys(newSerialised).forEach((k) => {\n      if (oldSerialised[k] === newSerialised[k]) {\n        delete newSerialised[k];\n        delete oldSerialised[k];\n      }\n    });\n    return { sId, newSerialised, oldSerialised };\n  }\n\n  private async runUpdates(\n    client: ERedis,\n    patches: InternalPatch[],\n  ): Promise<void> {\n    const argsList = patches\n      .map((patch) => this.makeUpdateArgs(patch))\n      .filter(notUndefined);\n\n    if (!argsList.length) {\n      return;\n    }\n\n    if (argsList.length === 1) {\n      const results = await client.multi()\n        .update(argsList[0][0], argsList[0][1])\n        .exec();\n\n      if (!results) {\n        throw new Error('transient error');\n      }\n      if (!results[0][1]) {\n        throw new Error('duplicate');\n      }\n      return;\n    }\n\n    const updateCheckResults = await mapAwaitSync(\n      argsList,\n      (updateArgs) => client.checkUpdate(updateArgs[0], updateArgs[1]),\n    );\n    if (updateCheckResults.some((r) => !r)) {\n      throw new Error('duplicate');\n    }\n\n    let chain = client.multi();\n    argsList.forEach((updateArgs) => {\n      chain = chain.updateWithoutCheck(updateArgs[0], updateArgs[1]);\n    });\n    const results = await chain.exec();\n\n    if (!results) {\n      throw new Error('transient error');\n    }\n  }\n\n  private makeUpdateArgs(\n    { sId, oldSerialised, newSerialised }: InternalPatch,\n  ): [number, any[]] | undefined {\n    const diff = Object.entries(newSerialised).flat();\n    if (!diff.length) {\n      return undefined; // nothing changed\n    }\n    const patchUniqueKeys = makeIndexKeys(this.uniqueKeys, newSerialised);\n    const patchNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, newSerialised);\n    const oldUniqueKeys = makeIndexKeys(this.uniqueKeys, oldSerialised);\n    const oldNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, oldSerialised);\n    if (\n      oldUniqueKeys.length !== patchUniqueKeys.length ||\n      oldNonUniqueKeys.length !== patchNonUniqueKeys.length\n    ) {\n      throw new Error('unexpected key mismatch with old value');\n    }\n    const keyCount = 1 + (patchUniqueKeys.length + patchNonUniqueKeys.length) * 2;\n    const params = [\n      this.makeKey(sId),\n      ...patchUniqueKeys,\n      ...patchNonUniqueKeys,\n      ...oldUniqueKeys,\n      ...oldNonUniqueKeys,\n      patchUniqueKeys.length,\n      patchUniqueKeys.length + patchNonUniqueKeys.length,\n      sId,\n      ...diff,\n    ];\n    return [keyCount, params];\n  }\n\n  private async getByKeysKeepWatches<F extends readonly (keyof T & string)[]>(\n    client: ERedis,\n    serialisedIds: string[],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const results = await multiExec(\n      client,\n      serialisedIds\n        .map((sId) => this.makeKey(sId))\n        .map((k) => (fields ? ['hmget', k, ...fields] : ['hgetall', k])),\n    );\n    if (!results) {\n      throw new Error('transient error');\n    }\n    return results\n      .map(([, item]: [unknown, any]) => parseItem(item, fields))\n      .filter(itemHasContent)\n      .map(deserialiseRecord) as T[];\n  }\n\n  private async rawByKeyKeepWatches(\n    client: ERedis,\n    serialisedId: string,\n    fields?: readonly string[],\n  ): Promise<Record<string, string | null> | undefined> {\n    const key = this.makeKey(serialisedId);\n    let item;\n    if (fields) {\n      if (!fields.length) {\n        // just check existence\n        const exists = await client.exists(key);\n        return exists ? {} : undefined;\n      }\n      item = await client.hmget(key, ...fields);\n    } else {\n      item = await client.hgetall(key);\n    }\n    const parsed = parseItem(item, fields);\n    return itemHasContent(parsed) ? parsed : undefined;\n  }\n\n  private async getAndWatchBySerialisedKey(\n    client: ERedis,\n    keyName: keyof T,\n    serialisedValue: string,\n  ): Promise<string[]> {\n    if (keyName === 'id') {\n      return [serialisedValue];\n    }\n    const keyPrefix = this.keyPrefixes[keyName];\n    if (!keyPrefix) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const keyAddress = `${keyPrefix}:${serialisedValue}`;\n    await client.watch(keyAddress);\n    return client.smembers(keyAddress);\n  }\n}\n","import { Redis } from 'ioredis';\nimport { minifyLuaScript, ExtendedRedis } from './helpers';\n\nexport interface ScriptExtensions {\n  add(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  update(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  checkUpdate(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  updateWithoutCheck(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n  remove(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n}\n\nexport type ERedis = ExtendedRedis<ScriptExtensions>;\n\n// KEYS = [id, ...uniqueKeys, ...nonUniqueKeys]\nconst SCRIPT_ADD = minifyLuaScript([\n  'if redis.call(\"exists\",KEYS[1])==1 then',\n  '  return 0',\n  'end',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 2))',\n  'for k=2,#KEYS do',\n  '  redis.call(\"sadd\",KEYS[k],ARGV[3])',\n  'end',\n  'return 1',\n], 'uniqueKeyCount');\n\nconst FRAG_CHECK_UPDATE = [\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n];\n\nconst FRAG_UPDATE = [\n  'local tkc=tonumber($totalKeyCount)',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 4))',\n  'for k=1,tkc do',\n  '  redis.call(\"smove\",KEYS[1+tkc+k],KEYS[1+k],$id)',\n  'end',\n];\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_CHECK_UPDATE = minifyLuaScript([\n  ...FRAG_CHECK_UPDATE,\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE_WITHOUT_CHECK = minifyLuaScript([\n  ...FRAG_UPDATE,\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE = minifyLuaScript([\n  ...FRAG_CHECK_UPDATE,\n  ...FRAG_UPDATE,\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...keys]\nconst SCRIPT_REMOVE = minifyLuaScript([\n  'redis.call(\"del\",KEYS[1])',\n  'for k=2,#KEYS do',\n  '  redis.call(\"srem\",KEYS[k],$id)',\n  'end',\n], 'id');\n\nexport default async function defineAllScripts(\n  client: Redis,\n): Promise<ERedis> {\n  await client.defineCommand('add', { lua: SCRIPT_ADD });\n  await client.defineCommand('update', { lua: SCRIPT_UPDATE });\n  await client.defineCommand('checkUpdate', { lua: SCRIPT_CHECK_UPDATE });\n  await client.defineCommand('updateWithoutCheck', { lua: SCRIPT_UPDATE_WITHOUT_CHECK });\n  await client.defineCommand('remove', { lua: SCRIPT_REMOVE });\n\n  return client as ERedis;\n}\n","import IORedis from 'ioredis';\nimport defineAllScripts, { ERedis } from './scripts';\nimport retry from '../helpers/retry';\n\ntype RS = new(host?: string, options?: IORedis.RedisOptions) => IORedis.Redis;\n\nconst withRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message === 'transient error'\n));\n\nexport default class RedisConnectionPool {\n  private readonly connections: ERedis[] = [];\n\n  private inUse = 0;\n\n  private queue: ((client: ERedis) => void)[] = [];\n\n  private closingFn?: () => void;\n\n  private closed = false;\n\n  public constructor(\n    private readonly RedisStatic: RS,\n    private readonly url: string,\n    private readonly options: IORedis.RedisOptions,\n    private readonly maxConnections: number,\n  ) {}\n\n  public async withConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    const c = await this.getConnection();\n    try {\n      return await fn(c);\n    } finally {\n      if (teardown) {\n        await teardown(c);\n      }\n      this.returnConnection(c);\n    }\n  }\n\n  public async retryWithConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    return withRetry(() => this.withConnection(fn, teardown));\n  }\n\n  public close(): Promise<void> {\n    if (this.closed) {\n      return Promise.resolve();\n    }\n\n    this.closed = true;\n    if (this.inUse === 0) {\n      this.doClose();\n      return Promise.resolve();\n    }\n\n    return new Promise((resolve): void => {\n      this.closingFn = (): void => {\n        this.doClose();\n        resolve();\n      };\n    });\n  }\n\n  private doClose(): void {\n    this.connections.forEach((c) => c.disconnect());\n    this.connections.length = 0;\n  }\n\n  private async getConnection(): Promise<ERedis> {\n    if (this.closed) {\n      throw new Error('Connection closed');\n    }\n\n    const r = this.connections.pop();\n    if (r) {\n      this.inUse += 1;\n      return r;\n    }\n    if (this.inUse < this.maxConnections) {\n      this.inUse += 1;\n      const client = new this.RedisStatic(this.url, this.options);\n      await client.connect();\n      return defineAllScripts(client);\n    }\n    return new Promise((resolve): void => {\n      this.queue.push(resolve);\n    });\n  }\n\n  private returnConnection(c: ERedis): void {\n    const q = this.queue.shift();\n    if (q) {\n      q(c);\n    } else {\n      this.inUse -= 1;\n      this.connections.push(c);\n      if (this.closingFn && this.inUse === 0) {\n        this.closingFn();\n      }\n    }\n  }\n}\n","import RedisCollection from './RedisCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\nimport RedisConnectionPool from './RedisConnectionPool';\n\nexport default class RedisDb implements DB {\n  private constructor(\n    private readonly pool: RedisConnectionPool,\n  ) {}\n\n  public static async connect(url: string): Promise<RedisDb> {\n    const { default: RedisStatic } = await import('ioredis');\n    const connectionPoolSize = 5;\n    return new RedisDb(new RedisConnectionPool(\n      RedisStatic,\n      url,\n      { lazyConnect: true },\n      connectionPoolSize,\n    ));\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): RedisCollection<T> {\n    return new RedisCollection(this.pool, name, keys);\n  }\n\n  public close(): Promise<void> {\n    return this.pool.close();\n  }\n\n  public getConnectionPool(): RedisConnectionPool {\n    return this.pool;\n  }\n}\n","export function quoteHValue(v: string): string {\n  return `\"${v.replace(/([\"\\\\])/g, '\\\\$1')}\"`;\n}\n\nexport function encodeHStore(record: Record<string, string>): string {\n  const result: string[] = [];\n  Object.keys(record).forEach((k) => {\n    result.push(`${quoteHValue(k)}=>${quoteHValue(record[k])}`);\n  });\n  return result.join(',');\n}\n\nexport function decodeHStore(hstore: string): Record<string, string> {\n  const result: Record<string, string> = {};\n  let current = '';\n  let currentKey = '';\n  let quote = false;\n  for (let p = 0; p < hstore.length;) {\n    const c = hstore[p];\n    switch (c) {\n      case ' ':\n      case '\\r':\n      case '\\n':\n      case '\\t':\n        if (quote) {\n          current += c;\n        }\n        break;\n      case '\\\\':\n        current += hstore[p + 1];\n        p += 1;\n        break;\n      case '\"':\n        quote = !quote;\n        break;\n      case '=':\n        if (quote) {\n          current += c;\n        } else if (hstore[p + 1] === '>') {\n          currentKey = current;\n          current = '';\n          p += 1;\n        }\n        break;\n      case ',':\n        if (quote) {\n          current += c;\n        } else {\n          result[currentKey] = current;\n          currentKey = '';\n          current = '';\n        }\n        break;\n      default:\n        current += c;\n        break;\n    }\n    p += 1;\n  }\n  if (currentKey) {\n    result[currentKey] = current;\n  }\n  return result;\n}\n","const DQUOTE_REG = /\"/g;\nexport function quoteIdentifier(msg: string): string {\n  return `\"${msg.replace(DQUOTE_REG, '\"\"')}\"`;\n}\n\nconst SQUOTE_REG = /'/g;\nexport function quoteValue(msg: string): string {\n  // only used for creating indices,\n  // because prepared statements do not support CREATE\n  return `'${msg.replace(SQUOTE_REG, '\\'\\'')}'`;\n}\n\nconst ID_REG = /\\$[A-Z]/g;\nexport function withIdentifiers(\n  base: string,\n  identifiers: Record<string, string>,\n): string {\n  return base.replace(\n    ID_REG,\n    (v) => quoteIdentifier(identifiers[v.substr(1)]),\n  );\n}\n","import { Pool as PPool, QueryArrayResult } from 'pg';\nimport IDable from '../interfaces/IDable';\nimport BaseCollection from '../interfaces/BaseCollection';\nimport { DBKeys } from '../interfaces/DB';\nimport { serialiseValue, deserialiseValue, serialiseRecord } from '../helpers/serialiser';\nimport { encodeHStore, decodeHStore } from './hstore';\nimport { withIdentifiers, quoteValue } from './sql';\n\nconst STATEMENTS = {\n  CREATE_HSTORE: 'CREATE EXTENSION IF NOT EXISTS hstore',\n\n  CREATE_TABLE: [\n    'CREATE TABLE IF NOT EXISTS $T (',\n    'id TEXT NOT NULL PRIMARY KEY,',\n    'data HSTORE NOT NULL',\n    ')',\n  ].join(''),\n\n  CREATE_INDEX: 'CREATE INDEX IF NOT EXISTS $I ON $T USING HASH ((data->$1))',\n  CREATE_UNIQUE_INDEX: 'CREATE UNIQUE INDEX IF NOT EXISTS $I ON $T ((data->$1))',\n  DROP_INDEX: 'DROP INDEX IF EXISTS $I',\n\n  INSERT: 'INSERT INTO $T (id, data) VALUES ($1, $2::hstore)',\n\n  UPDATE: 'UPDATE $T SET data=data||$1::hstore WHERE data->$2=$3 RETURNING id',\n  UPDATE_ID: 'UPDATE $T SET data=data||$1::hstore WHERE id=$2',\n\n  UPSERT_ID: 'INSERT INTO $T (id, data) VALUES ($1, $2::hstore) ON CONFLICT (id) DO UPDATE SET data=$T.data||$2::hstore',\n\n  SELECT_ONE: 'SELECT id, data FROM $T WHERE data->$1=$2 LIMIT 1',\n  SELECT_ALL: 'SELECT id, data FROM $T',\n  SELECT_ALL_BY: 'SELECT id, data FROM $T WHERE data->$1=$2',\n  SELECT_ID: 'SELECT id, data FROM $T WHERE id=$1',\n\n  DELETE: 'DELETE FROM $T WHERE data->$1=$2',\n  DELETE_ID: 'DELETE FROM $T WHERE id=$1',\n};\n\nasync function configureTable(\n  pool: PPool,\n  tableName: string,\n  keys: DBKeys<any> = {},\n): Promise<void> {\n  const c = await pool.connect();\n  try {\n    await c.query(STATEMENTS.CREATE_HSTORE);\n    await c.query(withIdentifiers(STATEMENTS.CREATE_TABLE, {\n      T: tableName,\n    }));\n\n    // PostgreSQL does not support prepared statements for CREATE statements,\n    // so we must escape the values manually using quoteValue.\n    const keyEntries = Object.entries(keys);\n    for (let i = 0; i < keyEntries.length; i += 1) {\n      /* eslint-disable no-await-in-loop */ // client cannot multitask\n      const [k, v] = keyEntries[i];\n      if (v && v.unique) {\n        await c.query(withIdentifiers(STATEMENTS.DROP_INDEX, {\n          T: tableName,\n          I: `${tableName}_i${k}`,\n        }));\n        await c.query(withIdentifiers(STATEMENTS.CREATE_UNIQUE_INDEX, {\n          T: tableName,\n          I: `${tableName}_u${k}`,\n        }).replace(/\\$1/g, quoteValue(k)));\n      } else {\n        await c.query(withIdentifiers(STATEMENTS.DROP_INDEX, {\n          T: tableName,\n          I: `${tableName}_u${k}`,\n        }));\n        await c.query(withIdentifiers(STATEMENTS.CREATE_INDEX, {\n          T: tableName,\n          I: `${tableName}_i${k}`,\n        }).replace(/\\$1/g, quoteValue(k)));\n      }\n      /* eslint-enable no-await-in-loop */\n    }\n  } finally {\n    c.release();\n  }\n}\n\nfunction toHStore(record: Record<string, unknown>): string {\n  return encodeHStore(serialiseRecord(record));\n}\n\nfunction fromHStore<T>(\n  [id, data]: readonly any[],\n  fields?: readonly string[],\n): T {\n  const rawMap = decodeHStore(data);\n  rawMap.id = id;\n\n  const result: Record<string, unknown> = {};\n\n  if (!fields) {\n    Object.entries(rawMap).forEach(([k, v]) => {\n      result[k] = deserialiseValue(v);\n    });\n    return result as T;\n  }\n\n  fields.forEach((f) => {\n    result[f] = deserialiseValue(rawMap[f]);\n  });\n  return result as T;\n}\n\nexport default class PostgresCollection<T extends IDable> extends BaseCollection<T> {\n  private readonly tableName: string;\n\n  private readonly cachedQueries: Partial<Record<keyof typeof STATEMENTS, string>> = {};\n\n  private pending?: (() => void)[] = [];\n\n  public constructor(\n    private readonly pool: PPool,\n    name: string,\n    keys: DBKeys<T> = {},\n  ) {\n    super(keys);\n\n    this.tableName = name;\n    configureTable(pool, this.tableName, keys)\n      .then(() => {\n        if (this.pending) {\n          this.pending.forEach((f) => f());\n          this.pending = undefined;\n        }\n      })\n      .catch((e) => {\n        process.stderr.write(`Failed to prepare table ${name}: ${e}`);\n      });\n  }\n\n  protected async internalAdd({ id, ...rest }: T): Promise<void> {\n    await this.runTableQuery('INSERT', serialiseValue(id), toHStore(rest));\n  }\n\n  protected async internalUpsert(\n    id: T['id'],\n    update: Partial<T>,\n  ): Promise<void> {\n    await this.runTableQuery('UPSERT_ID', serialiseValue(id), toHStore(update));\n  }\n\n  protected async internalUpdate<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n    { id, ...rest }: Partial<T>,\n  ): Promise<void> {\n    const sId = serialiseValue(searchValue);\n    const hstore = toHStore(rest);\n\n    if (searchAttribute === 'id') {\n      await this.runTableQuery('UPDATE_ID', hstore, sId);\n    } else {\n      const r = await this.runTableQuery('UPDATE', hstore, searchAttribute, sId);\n      if (id !== undefined && r.rowCount > 0 && r.rows[0][0] !== id) {\n        throw new Error('Cannot update ID');\n      }\n    }\n  }\n\n  protected async internalGet<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute: K,\n    searchValue: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    let raw;\n    if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('SELECT_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('SELECT_ONE', searchAttribute, serialiseValue(searchValue));\n    }\n    if (!raw.rowCount) {\n      return null;\n    }\n    return fromHStore<T>(raw.rows[0], returnAttributes);\n  }\n\n  protected async internalGetAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    searchAttribute?: K,\n    searchValue?: T[K],\n    returnAttributes?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    let raw;\n    if (!searchAttribute) {\n      raw = await this.runTableQuery('SELECT_ALL');\n    } else if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('SELECT_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('SELECT_ALL_BY', searchAttribute, serialiseValue(searchValue));\n    }\n    return raw.rows.map((v) => fromHStore<T>(v, returnAttributes));\n  }\n\n  protected async internalRemove<K extends keyof T & string>(\n    searchAttribute: K,\n    searchValue: T[K],\n  ): Promise<number> {\n    let raw;\n    if (searchAttribute === 'id') {\n      raw = await this.runTableQuery('DELETE_ID', serialiseValue(searchValue));\n    } else {\n      raw = await this.runTableQuery('DELETE', searchAttribute, serialiseValue(searchValue));\n    }\n    return raw.rowCount;\n  }\n\n  private async runTableQuery(\n    queryName: keyof typeof STATEMENTS,\n    ...values: any[]\n  ): Promise<QueryArrayResult<any[]>> {\n    if (this.pending) {\n      await new Promise((resolve): void => {\n        this.pending!.push(resolve);\n      });\n    }\n\n    let cached = this.cachedQueries[queryName];\n    if (!cached) {\n      cached = withIdentifiers(STATEMENTS[queryName], { T: this.tableName });\n      this.cachedQueries[queryName] = cached;\n    }\n\n    return this.pool.query({\n      name: `${this.tableName}_${queryName}`,\n      rowMode: 'array',\n      text: cached,\n      values,\n    });\n  }\n}\n","import { Pool as PPool } from 'pg';\nimport PostgresCollection from './PostgresCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nexport default class PostgresDb implements DB {\n  private closed = false;\n\n  private constructor(\n    private readonly pool: PPool,\n  ) {}\n\n  public static async connect(url: string): Promise<PostgresDb> {\n    const { Pool } = await import('pg');\n    const pool = new Pool({ connectionString: url });\n    return new PostgresDb(pool);\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): PostgresCollection<T> {\n    return new PostgresCollection(this.pool, name, keys);\n  }\n\n  public close(): Promise<void> {\n    if (this.closed) {\n      return Promise.resolve();\n    }\n    this.closed = true;\n    return this.pool.end();\n  }\n\n  public getConnectionPool(): PPool {\n    return this.pool;\n  }\n}\n","import IDable from '../interfaces/IDable';\nimport Collection, { UpdateOptions } from '../interfaces/Collection';\n\nexport type Wrapped<T extends IDable, WF extends keyof T, W> = {\n  [K in keyof T]: K extends 'id' ? T[K] : K extends WF ? W : T[K];\n};\n\nexport interface Wrapper<T extends IDable, K extends keyof T, W, E> {\n  wrap: (\n    key: K,\n    value: T[K],\n    processed: E,\n  ) => Promise<W> | W;\n\n  unwrap: (\n    key: K,\n    value: W,\n    processed: E,\n  ) => Promise<T[K]> | T[K];\n\n  preWrap?: (\n    record: Readonly<Partial<T>>,\n  ) => Promise<E> | E;\n\n  preUnwrap?: (\n    record: Readonly<Partial<Wrapped<T, K, W>>>,\n  ) => Promise<E> | E;\n\n  preRemove?: (\n    record: Readonly<Pick<Wrapped<T, K, W>, 'id'>>,\n  ) => Promise<void> | void;\n}\n\nfunction hasAnyField(value: object, fields: readonly string[]): boolean {\n  return fields\n    .some((field) => Object.prototype.hasOwnProperty.call(value, field));\n}\n\nexport default class WrappedCollection<\n  T extends IDable,\n  WF extends readonly (keyof Omit<T, 'id'> & string)[],\n  W,\n  E,\n  Inner extends Wrapped<T, WF[-1], W> = Wrapped<T, WF[-1], W>\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<Inner>,\n    private readonly fields: WF,\n    private readonly wrapper: Wrapper<T, WF[-1], W, E>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(await this.wrapAll(entry));\n  }\n\n  public async get<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key: K,\n    value: T[K] & Inner[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.get(key, value, fields!);\n    return raw ? this.unwrapAll(raw, { [key]: value }) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key?: K,\n    value?: T[K] & Inner[NonNullable<K>],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (key !== undefined && this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.getAll(key!, value!, fields!);\n    const extra = (key !== undefined) ? { [key]: value } : undefined;\n    return Promise.all(raw.map((v) => this.unwrapAll(v, extra)));\n  }\n\n  public async update<K extends keyof T & keyof Inner & string>(\n    key: K,\n    value: T[K] & Inner[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot update by encrypted value');\n    }\n    const converted = await this.wrapAll(update, { [key]: value });\n    return this.baseCollection.update(key, value, converted, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K] & Inner[K],\n  ): Promise<number> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot remove by encrypted value');\n    }\n    if (!this.wrapper.preRemove) {\n      return this.baseCollection.remove(key, value);\n    }\n\n    const items = await this.baseCollection.getAll(key, value, ['id']);\n    await Promise.all(items.map(async (item) => {\n      await this.wrapper.preRemove!(item);\n      await this.baseCollection.remove('id', item.id);\n    }));\n    return items.length;\n  }\n\n  private async wrapAll(\n    v: Readonly<T>,\n    extra?: object,\n  ): Promise<Inner>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>> {\n    let processed: E;\n    if (this.wrapper.preWrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preWrap(allFields);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.wrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n\n  private async unwrapAll(\n    v: Readonly<Inner>,\n    extra?: object,\n  ): Promise<T>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>> {\n    let processed: E;\n    if (this.wrapper.preUnwrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? { ...extra, ...v } : v;\n      processed = await this.wrapper.preUnwrap(allFields as any);\n    }\n    const converted = { ...v } as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.unwrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n}\n","export default class LruCache<K, V> {\n  private readonly storage = new Map<K, V>();\n\n  public constructor(\n    private readonly capacity: number,\n  ) {}\n\n  public set(key: K, value: V): void {\n    this.storage.delete(key);\n    this.storage.set(key, value);\n    this.flush();\n  }\n\n  public get(key: K): V | undefined {\n    const value = this.storage.get(key);\n    if (this.storage.delete(key)) {\n      this.storage.set(key, value!);\n    }\n    return value;\n  }\n\n  public remove(key: K): void {\n    this.storage.delete(key);\n  }\n\n  private flush(): void {\n    while (this.storage.size > this.capacity) {\n      this.storage.delete(this.storage.keys().next().value);\n    }\n  }\n}\n","import crypto, { KeyObject } from 'crypto';\nimport Encryption from './Encryption';\n\nconst ALG = 'aes-256-cbc';\nconst ALG_BUF = Buffer.from(`${ALG}:`, 'utf8');\nconst IV_LEN = 16;\n\nconst nodeEncryptionSync: Encryption<Buffer, KeyObject, Buffer> = {\n  encrypt: (key: KeyObject, v: string): Buffer => {\n    const iv = crypto.randomBytes(IV_LEN);\n    const cipher = crypto.createCipheriv(ALG, key, iv);\n    const part = cipher.update(v, 'utf8');\n    const final = cipher.final();\n    return Buffer.concat([ALG_BUF, iv, part, final]);\n  },\n\n  decrypt: (key: KeyObject, v: Buffer): string => {\n    if (!v.slice(0, ALG_BUF.length).equals(ALG_BUF)) {\n      throw new Error('Unknown encryption algorithm');\n    }\n\n    const iv = v.slice(ALG_BUF.length, ALG_BUF.length + IV_LEN);\n    const encrypted = v.slice(ALG_BUF.length + IV_LEN);\n\n    const decipher = crypto.createDecipheriv(ALG, key as any, iv);\n    let decrypted = decipher.update(encrypted, undefined, 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  },\n\n  generateKey: (): KeyObject => crypto\n    .createSecretKey(crypto.randomBytes(32)),\n\n  serialiseKey: (key: KeyObject): Buffer => key.export(),\n\n  deserialiseKey: (data: Buffer): KeyObject => crypto.createSecretKey(data),\n};\n\nexport default nodeEncryptionSync;\n","import IDable, { IDableBy, IDType } from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport LruCache from '../helpers/LruCache';\nimport { serialiseValue, deserialiseValue } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\nimport Encryption from './encryption/Encryption';\nimport nodeEncryptionSync from './encryption/nodeEncryptionSync';\n\nexport interface KeyRecord<ID extends IDType, KeyT> {\n  id: ID;\n  key: KeyT;\n}\n\ntype EncryptableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\ntype Encrypter<EncT, ID extends IDType> = <T extends IDableBy<ID>>(\n) => <F extends EncryptableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n) => Collection<T>;\n\n// makeEncrypter provides optional 2-tier function call due to\n// https://github.com/Microsoft/TypeScript/issues/26242\n\nfunction makeEncrypter<EncT, ID extends IDType>(\n  wrapper: <T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => Collection<T>,\n): Encrypter<EncT, ID> {\n  return (fields?: any, baseCollection?: Collection<any>): any => {\n    if (fields && baseCollection) {\n      // non-typescript API (remove need for extra ())\n      return wrapper(fields, baseCollection) as any;\n    }\n    return wrapper;\n  };\n}\n\nfunction encryptByKey(sKey: Buffer): Encrypter<Buffer, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, IDType> {\n  const key = cr.deserialiseKey(sKey);\n\n  return makeEncrypter(<T extends IDable, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<EncT> | EncT => cr.encrypt(key, serialiseValue(v)),\n    unwrap: async (k, v): Promise<any> => deserialiseValue(await cr.decrypt(key, v)),\n  }));\n}\n\nfunction encryptByRecord<ID extends IDType>(\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const cache = new LruCache<ID, KeyT>(cacheSize);\n\n  const loadKey = async (\n    generateIfNeeded: boolean,\n    record: { id?: ID },\n  ): Promise<KeyT> => {\n    const { id } = record;\n\n    if (id === undefined) {\n      throw new Error('Must provide ID for encryption');\n    }\n\n    const cached = cache.get(id);\n    if (cached) {\n      return cached;\n    }\n    let key: KeyT;\n    const item = await keyCollection.get('id', id, ['key']);\n    if (item) {\n      key = cr.deserialiseKey(item.key);\n    } else {\n      if (!generateIfNeeded) {\n        throw new Error('No encryption key found for record');\n      }\n      key = await cr.generateKey();\n      await keyCollection.add({ id, key: cr.serialiseKey(key) });\n    }\n    cache.set(id, key);\n    return key;\n  };\n\n  const removeKey = async ({ id }: { id: ID }): Promise<void> => {\n    await keyCollection.remove('id', id);\n    cache.remove(id);\n  };\n\n  return makeEncrypter(<T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, KeyT>(baseCollection, fields, {\n    wrap: (k, v, key): Promise<EncT> | EncT => cr.encrypt(key, JSON.stringify(v)),\n    unwrap: async (k, v, key): Promise<any> => JSON.parse(await cr.decrypt(key, v)),\n    preWrap: loadKey.bind(null, true),\n    preUnwrap: loadKey.bind(null, false),\n    preRemove: removeKey,\n  }));\n}\n\nfunction encryptByRecordWithMasterKey<ID extends IDType>(\n  sMasterKey: Buffer,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const keyEnc = encryptByKey(sMasterKey, cr);\n  const encKeyCollection = keyEnc<KeyRecord<ID, SerialisedKeyT>>()(\n    ['key'],\n    keyCollection,\n  );\n  return encryptByRecord(encKeyCollection, cacheSize, cr);\n}\n\nexport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\n","import CollectionStorage from './CollectionStorage';\nimport WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';\nimport Encryption from './wrappers/encryption/Encryption';\nimport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n} from './wrappers/encrypted';\nimport DB from './interfaces/DB';\nimport Collection from './interfaces/Collection';\nimport IDable from './interfaces/IDable';\n\nexport type DB = DB;\nexport type Collection<T extends IDable> = Collection<T>;\nexport type Wrapped<T extends IDable, WF extends keyof T, W> =\n  Wrapped<T, WF, W>;\nexport type Encrypted<T extends IDable, WF extends keyof T> =\n  Wrapped<T, WF, Buffer>;\nexport type Encryption<EncT, KeyT, SerialisedKeyT> =\n  Encryption<EncT, KeyT, SerialisedKeyT>;\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport { default as RedisDb } from './redis/RedisDb';\nexport { default as LruCache } from './helpers/LruCache';\nexport {\n  WrappedCollection,\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\nexport {\n  default as nodeEncryptionSync,\n} from './wrappers/encryption/nodeEncryptionSync';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport RedisDb from './redis/RedisDb';\nimport PostgresDb from './postgresql/PostgresDb';\nimport DB from './interfaces/DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else if (url.startsWith('redis')) {\n      dbClass = RedisDb;\n    } else if (url.startsWith('postgres')) {\n      dbClass = PostgresDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}