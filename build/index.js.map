{"version":3,"sources":["webpack://websocket-express/webpack/universalModuleDefinition","webpack://websocket-express/webpack/bootstrap","webpack://websocket-express/external \"crypto\"","webpack://websocket-express/external \"mongodb\"","webpack://websocket-express/external \"url\"","webpack://websocket-express/external \"ioredis\"","webpack://websocket-express/./src/helpers/serialiser.ts","webpack://websocket-express/./src/memory/MemoryCollection.ts","webpack://websocket-express/./src/memory/MemoryDb.ts","webpack://websocket-express/./src/helpers/retry.ts","webpack://websocket-express/./src/mongo/MongoCollection.ts","webpack://websocket-express/./src/mongo/MongoDb.ts","webpack://websocket-express/./src/redis/helpers.ts","webpack://websocket-express/./src/redis/RedisCollection.ts","webpack://websocket-express/./src/redis/scripts.ts","webpack://websocket-express/./src/redis/RedisConnectionPool.ts","webpack://websocket-express/./src/redis/RedisDb.ts","webpack://websocket-express/./src/wrappers/WrappedCollection.ts","webpack://websocket-express/./src/helpers/LruCache.ts","webpack://websocket-express/./src/wrappers/encryption/nodeEncryptionSync.ts","webpack://websocket-express/./src/wrappers/encrypted.ts","webpack://websocket-express/./src/index.ts","webpack://websocket-express/./src/CollectionStorage.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","serialiseValue","Buffer","toString","JSON","stringify","deserialiseValue","type","data","substr","from","parse","Error","serialiseRecord","record","result","keys","forEach","k","deserialiseRecord","v","sleep","millis","Promise","resolve","setTimeout","MemoryCollection","constructor","simulatedLatency","this","Map","map","options","serialised","internalCheckDuplicates","set","id","internalPopulateIndices","keyName","upsert","undefined","sId","internalGetSerialisedIds","assign","oldSerialised","oldValue","newValue","newSerialised","internalRemoveIndices","e","fields","all","getAll","length","sIds","field","applyFilter","delete","sKey","has","keyInfo","serialisedValue","checkId","entries","unique","Set","add","size","globalDbs","initial","existing","getGlobal","MemoryDb","url","parsedUrl","URL","hostname","params","searchParams","Number","db","getCollection","mapTables","shouldRetry","maxAttempts","baseDelayMillis","attemptDelayMillis","randomDelayMillis","async","attempt","fn","message","Math","random","MONGO_ID","ID","withUpsertRetry","retry","includes","convertToMongo","converted","rest","MBinary","_bsontype","convertFromMongo","buffer","makeMongoFields","names","fieldName","fieldNameToMongo","MongoCollection","collection","createIndex","insertOne","updateOne","$set","findOne","projection","cursor","mFields","find","raw","push","deleteMany","deletedCount","MongoDb","MongoClient","client","connect","useNewUrlParser","useUnifiedTopology","minifyLuaScript","lines","argNames","combined","ln","trim","join","replace","RegExp","makeIndexKeys","partialSerialisedValue","filter","prefix","parseItem","item","f","itemHasContent","values","some","unwatchAll","unwatch","RedisCollection","pool","keyPrefix","keyPrefixes","uniqueKeys","nonUniqueKeys","withConnection","internalAdd","update","patchSerialised","retryWithConnection","getAndWatchBySerialisedKey","rKey","makeKey","watch","rawByKeyKeepWatches","diff","flat","patchUniqueKeys","patchNonUniqueKeys","oldUniqueKeys","oldNonUniqueKeys","keyCount","updated","multi","exec","getByKeysKeepWatches","cut","remove","indexedKeys","items","pipeline","serialisedId","checkWatch","Boolean","serialisedIds","results","commands","multiExec","exists","hmget","hgetall","parsed","keyAddress","smembers","SCRIPT_ADD_ITEM","SCRIPT_UPDATE_ITEM","SCRIPT_REMOVE_ITEM","withRetry","RedisConnectionPool","RedisStatic","maxConnections","teardown","getConnection","returnConnection","connections","pop","inUse","defineCommand","lua","defineAllScripts","queue","q","shift","RedisDb","default","lazyConnect","getConnectionPool","hasAnyField","WrappedCollection","baseCollection","wrapper","entry","wrapAll","unwrapAll","extra","preRemove","processed","preWrap","allFields","wrap","preUnwrap","unwrap","LruCache","capacity","storage","flush","next","ALG","ALG_BUF","nodeEncryptionSync","encrypt","iv","crypto","randomBytes","cipher","createCipheriv","part","final","concat","decrypt","slice","equals","encrypted","decipher","createDecipheriv","decrypted","generateKey","createSecretKey","serialiseKey","export","deserialiseKey","makeEncrypter","encryptByKey","cr","encryptByRecord","keyCollection","cacheSize","cache","loadKey","generateIfNeeded","cached","removeKey","encryptByRecordWithMasterKey","sMasterKey","keyEnc","CollectionStorage","dbClass","startsWith"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"websocket-express\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"websocket-express\"] = factory();\n\telse\n\t\troot[\"websocket-express\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"crypto\");","module.exports = require(\"mongodb\");","module.exports = require(\"url\");","module.exports = require(\"ioredis\");","export function serialiseValue(\n  value: unknown,\n): string {\n  if (value instanceof Buffer) {\n    return `B${value.toString('base64')}`;\n  }\n  return `J${JSON.stringify(value)}`;\n}\n\nexport function deserialiseValue(\n  value: string,\n): unknown {\n  const type = value[0];\n  const data = value.substr(1);\n  if (type === 'B') {\n    return Buffer.from(data, 'base64');\n  }\n  if (type === 'J') {\n    return JSON.parse(data);\n  }\n  throw new Error(`Unknown data type ${type}`);\n}\n\nexport function serialiseRecord<T>(\n  record: T,\n): Record<string, string> {\n  const result: Record<string, string> = {};\n  Object.keys(record).forEach((k) => {\n    result[k] = serialiseValue((record as any)[k]);\n  });\n  return result;\n}\n\nexport function deserialiseRecord(\n  record: Record<string, string | null>,\n): Record<string, unknown> {\n  const result: Record<string, any> = {};\n  Object.keys(record).forEach((k) => {\n    const v = record[k];\n    if (v) {\n      result[k] = deserialiseValue(v);\n    }\n  });\n  return result;\n}\n","import Collection, { KeyOptions } from '../interfaces/Collection';\nimport IDable from '../interfaces/IDable';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\n\nfunction sleep(millis: number): Promise<void> | null {\n  if (!millis) {\n    return null;\n  }\n\n  // Simulate data access delays to ensure non-flakey e2e tests, etc.\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nfunction applyFilter<T, F extends readonly (keyof T)[]>(\n  data: T,\n  fields?: F,\n): Pick<T, F[-1]> {\n  if (!fields) {\n    return data;\n  }\n  const result: Pick<T, F[-1]> = {} as any;\n  fields.forEach((field) => {\n    result[field] = data[field];\n  });\n  return result;\n}\n\ninterface KeyInfo {\n  map: Map<string, Set<string>>;\n  options: KeyOptions;\n}\n\nexport default class MemoryCollection<T extends IDable> implements Collection<T> {\n  private readonly data: Map<string, Record<string, string>>;\n\n  private readonly keys: { [K in keyof T]?: KeyInfo } = {};\n\n  public constructor(\n    keys: DBKeys<T> = {},\n    private readonly simulatedLatency = 0,\n  ) {\n    this.data = new Map();\n\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      this.keys[key] = { map: new Map(), options: keys[key]! };\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await sleep(this.simulatedLatency);\n\n    const serialised = serialiseRecord(value);\n    this.internalCheckDuplicates(serialised, true);\n    this.data.set(serialised.id, serialised);\n    this.internalPopulateIndices(serialised);\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    if (upsert && keyName !== 'id' && value.id === undefined) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    await sleep(this.simulatedLatency);\n\n    const sId = this.internalGetSerialisedIds(keyName, key)[0];\n    if (sId === undefined) {\n      if (upsert) {\n        const fullValue = Object.assign({ [keyName]: key }, value as T);\n        const serialised = serialiseRecord(fullValue);\n        this.internalCheckDuplicates(serialised, true);\n        this.data.set(serialised.id, serialised);\n        this.internalPopulateIndices(serialised);\n      }\n      return;\n    }\n    const oldSerialised = this.data.get(sId)!;\n    const oldValue = deserialiseRecord(oldSerialised) as T;\n    const newValue = Object.assign({}, oldValue, value);\n    if (newValue.id !== oldValue.id) {\n      throw new Error('Cannot update id');\n    }\n    const newSerialised = serialiseRecord(newValue);\n    this.internalRemoveIndices(oldSerialised);\n    try {\n      this.internalCheckDuplicates(newSerialised, false);\n    } catch (e) {\n      this.internalPopulateIndices(oldSerialised);\n      throw e;\n    }\n    this.data.set(newSerialised.id, newSerialised);\n    this.internalPopulateIndices(newSerialised);\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const all = await this.getAll(keyName, key, fields);\n    if (!all.length) {\n      return null;\n    }\n    return all[0];\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    await sleep(this.simulatedLatency);\n\n    let sIds: string[];\n    if (keyName) {\n      sIds = this.internalGetSerialisedIds(keyName, key!);\n    } else {\n      sIds = [...this.data.keys()];\n    }\n    return sIds.map((sId) => applyFilter(\n      deserialiseRecord(this.data.get(sId)!) as T,\n      fields,\n    ));\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    await sleep(this.simulatedLatency);\n\n    const sIds = this.internalGetSerialisedIds(key, value);\n    sIds.forEach((sId) => {\n      const oldSerialised = this.data.get(sId)!;\n      this.internalRemoveIndices(oldSerialised);\n      this.data.delete(sId);\n    });\n\n    return sIds.length;\n  }\n\n  private internalGetSerialisedIds<K extends keyof T>(\n    keyName: K,\n    key: T[K],\n  ): string[] {\n    const sKey = serialiseValue(key);\n    if (keyName === 'id') {\n      return this.data.has(sKey) ? [sKey] : [];\n    }\n    const keyInfo = this.keys[keyName];\n    if (!keyInfo) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const sIds = keyInfo.map.get(sKey);\n    return sIds ? [...sIds] : []; // convert set to array\n  }\n\n  private internalCheckDuplicates(\n    serialisedValue: Record<string, string>,\n    checkId: boolean,\n  ): void {\n    if (checkId && this.data.has(serialisedValue.id)) {\n      throw new Error('duplicate');\n    }\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map, options } = keyInfo!;\n      if (options.unique && map.has(serialisedValue[key])) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  private internalPopulateIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map } = keyInfo!;\n      const v = serialisedValue[key];\n      let o = map.get(v);\n      if (!o) {\n        o = new Set<string>();\n        map.set(v, o);\n      }\n      o.add(serialisedValue.id);\n    });\n  }\n\n  private internalRemoveIndices(\n    serialisedValue: Record<string, string>,\n  ): void {\n    Object.entries(this.keys).forEach(([key, keyInfo]) => {\n      const { map } = keyInfo!;\n      const v = serialisedValue[key];\n      const o = map.get(v)!;\n      o.delete(serialisedValue.id);\n      if (!o.size) {\n        map.delete(v);\n      }\n    });\n  }\n}\n","import { URL } from 'url';\nimport MemoryCollection from './MemoryCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nfunction getGlobal<T>(name: string, initial: T): T {\n  const existing = (global as any)[name];\n  if (existing) {\n    return existing;\n  }\n\n  (global as any)[name] = initial;\n  return initial;\n}\n\nconst globalDbs = getGlobal(\n  'collectionStorageInMemory',\n  new Map<string, MemoryDb>(),\n);\n\nexport default class MemoryDb implements DB {\n  private readonly simulatedLatency: number;\n\n  private readonly mapTables = new Map<string, MemoryCollection<any>>();\n\n  public constructor({ simulatedLatency = 0 } = {}) {\n    this.simulatedLatency = simulatedLatency;\n  }\n\n  public static connect(url: string): MemoryDb {\n    const parsedUrl = new URL(url);\n    const name = parsedUrl.hostname;\n    if (name && globalDbs.has(name)) {\n      return globalDbs.get(name)!;\n    }\n    const params = parsedUrl.searchParams;\n    const simulatedLatency = Number(params.get('simulatedLatency'));\n    const db = new MemoryDb({ simulatedLatency });\n    if (name) {\n      globalDbs.set(name, db);\n    }\n    return db;\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MemoryCollection<T> {\n    if (!this.mapTables.has(name)) {\n      this.mapTables.set(name, new MemoryCollection(\n        keys,\n        this.simulatedLatency,\n      ));\n    }\n    return this.mapTables.get(name)! as MemoryCollection<T>;\n  }\n}\n","function sleep(millis: number): Promise<void> | null {\n  return new Promise((resolve): any => setTimeout(resolve, millis));\n}\n\nexport default (\n  shouldRetry: (e: any) => boolean,\n  maxAttempts = 5,\n  baseDelayMillis = 20,\n  attemptDelayMillis = 200,\n  randomDelayMillis = 200,\n) => async <T>(fn: () => Promise<T> | T): Promise<T> => {\n  for (let attempt = 1; ; attempt += 1) {\n    try {\n      // eslint-disable-next-line no-await-in-loop\n      return await fn();\n    } catch (e) {\n      if (!shouldRetry(e)) {\n        throw e;\n      }\n      if (attempt >= maxAttempts) {\n        e.message += ` (attempted ${attempt} times)`;\n        throw e;\n      }\n    }\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(\n      baseDelayMillis +\n      attempt * attemptDelayMillis +\n      Math.random() * randomDelayMillis,\n    );\n  }\n};\n","import {\n  Collection as MCollection,\n  Cursor as MCursor,\n  Binary as MBinary,\n} from 'mongodb';\nimport IDable from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\nimport retry from '../helpers/retry';\n\nconst MONGO_ID = '_id';\nconst ID = 'id';\n\ntype MongoT<T extends Partial<IDable>> = Omit<T, 'id'> & { _id?: T['id'] };\n\nfunction fieldNameToMongo(name: string): string {\n  if (name === ID) {\n    return MONGO_ID;\n  }\n  return name;\n}\n\nconst withUpsertRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message.includes('E11000')\n));\n\nfunction convertToMongo<T extends Partial<IDable>>(value: T): MongoT<T> {\n  let converted: MongoT<T>;\n  // keys\n  if (value[ID] === undefined) {\n    converted = Object.assign({}, value);\n  } else {\n    const { [ID]: id, ...rest } = value;\n    converted = { [MONGO_ID]: id, ...rest };\n  }\n  // values\n  Object.keys(converted).forEach((k) => {\n    const v = (converted as any)[k];\n    if (v instanceof Buffer) {\n      (converted as any)[k] = new MBinary(v);\n    }\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype) {\n      throw new Error('Must use Buffer to provide binary data');\n    }\n  });\n  return converted;\n}\n\nfunction convertFromMongo<T extends Partial<IDable>>(\n  value: MongoT<T> | null,\n): T | null {\n  if (!value) {\n    return null;\n  }\n  let converted: T;\n  // keys\n  if (value[MONGO_ID] === undefined) {\n    converted = Object.assign({}, value) as T;\n  } else {\n    const { [MONGO_ID]: id, ...rest } = value;\n    converted = { [ID]: id, ...rest } as any;\n  }\n  // values\n  Object.keys(converted).forEach((k) => {\n    const v = (converted as any)[k];\n    // eslint-disable-next-line no-underscore-dangle\n    if (typeof v === 'object' && v._bsontype === 'Binary') {\n      (converted as any)[k] = v.buffer;\n    }\n  });\n  return converted;\n}\n\nfunction makeMongoFields(names?: readonly string[]): Record<string, boolean> {\n  const fields: Record<string, boolean> = {};\n  if (names) {\n    fields[MONGO_ID] = false;\n    names.forEach((fieldName) => {\n      fields[fieldNameToMongo(fieldName)] = true;\n    });\n  }\n  return fields;\n}\n\nexport default class MongoCollection<T extends IDable> implements Collection<T> {\n  public constructor(\n    private readonly collection: MCollection,\n    keys: DBKeys<T> = {},\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const keyName = k as keyof DBKeys<T>;\n      const options = keys[keyName];\n      if (options && options.unique) {\n        collection.createIndex({ [keyName]: 1 }, { unique: true });\n      } else {\n        collection.createIndex({ [keyName]: 'hashed' });\n      }\n    });\n  }\n\n  public async add(value: T): Promise<void> {\n    await this.collection.insertOne(convertToMongo(value));\n  }\n\n  public async update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    if (upsert && keyName !== 'id' && value.id === undefined) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    if (upsert) {\n      // special handling due to https://jira.mongodb.org/browse/SERVER-14322\n      await withUpsertRetry(() => this.collection.updateOne(\n        convertToMongo({ [keyName]: key }),\n        { $set: convertToMongo(value) },\n        { upsert: true },\n      ));\n    } else {\n      await this.collection.updateOne(\n        convertToMongo({ [keyName]: key }),\n        { $set: convertToMongo(value) },\n      );\n    }\n  }\n\n  public async get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const raw = await this.collection.findOne<T>(\n      convertToMongo({ [keyName]: key }),\n      { projection: makeMongoFields(fields) },\n    );\n    return convertFromMongo<T>(raw);\n  }\n\n  public async getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const result: Pick<T, F[-1]>[] = [];\n\n    let cursor: MCursor<T>;\n    const mFields = makeMongoFields(fields);\n    if (keyName) {\n      cursor = this.collection.find<T>(\n        convertToMongo({ [keyName]: key }),\n        { projection: mFields },\n      );\n    } else {\n      cursor = this.collection.find<T>({}, { projection: mFields });\n    }\n    await cursor.forEach((raw) => result.push(convertFromMongo<T>(raw)!));\n\n    return result;\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    const result = await this.collection.deleteMany(\n      convertToMongo({ [key]: value }),\n    );\n    return result.deletedCount || 0;\n  }\n}\n","import { Db as MDb } from 'mongodb';\nimport MongoCollection from './MongoCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\n\nexport default class MongoDb implements DB {\n  private constructor(\n    private readonly db: MDb,\n  ) {}\n\n  public static async connect(url: string): Promise<MongoDb> {\n    const { MongoClient } = await import('mongodb');\n    const client = await MongoClient.connect(url, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    return new MongoDb(client.db());\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): MongoCollection<T> {\n    const collection = this.db.collection(name);\n    return new MongoCollection(collection, keys);\n  }\n}\n","import { Redis, Pipeline, MultiOptions } from 'ioredis';\n\n// Thanks, https://stackoverflow.com/a/50014868/1180785\ntype ArgumentTypes<T> = T extends (...args: infer U) => any ? U: never;\n\ntype PipelineVersions<I> = {\n  [K in keyof I]: (...args: ArgumentTypes<I[K]>) => Pipeline & PipelineVersions<I>;\n};\n\ninterface RedisWithExtendedPipeline<I> extends Redis {\n  multi(commands?: string[][], options?: MultiOptions): Pipeline & PipelineVersions<I>;\n  multi(options: { pipeline: false }): Promise<string>;\n}\n\nexport type ExtendedRedis<I> = I & RedisWithExtendedPipeline<I>;\n\nexport async function multiExec(\n  client: Redis,\n  commands: string[][],\n): Promise<[unknown, any][] | null> {\n  if (!commands.length) {\n    return [];\n  }\n  return client.multi(commands).exec();\n}\n\nexport function minifyLuaScript(\n  lines: string[],\n  ...argNames: string[]\n): string {\n  let combined = lines.map((ln) => ln.trim()).join(' ');\n  argNames.forEach((name, i) => {\n    combined = combined.replace(new RegExp(`\\\\$${name}\\\\b`, 'g'), `ARGV[${i + 1}]`);\n  });\n  return combined;\n}\n","import IDable from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport { DBKeys } from '../interfaces/DB';\nimport {\n  serialiseValue,\n  serialiseRecord,\n  deserialiseRecord,\n} from '../helpers/serialiser';\nimport RedisConnectionPool from './RedisConnectionPool';\nimport { multiExec } from './helpers';\nimport { ERedis } from './scripts';\n\ninterface Key<T> {\n  key: keyof T & string;\n  prefix: string;\n}\n\nfunction makeIndexKeys(\n  keys: Key<any>[],\n  partialSerialisedValue: Record<string, string | null>,\n): string[] {\n  return keys\n    .filter(({ key }) => partialSerialisedValue[key])\n    .map(({ key, prefix }) => `${prefix}:${partialSerialisedValue[key]}`);\n}\n\nfunction parseItem(\n  item: (string | null)[] | Record<string, string | null>,\n  fields?: readonly string[],\n): Record<string, string | null> {\n  if (!fields) {\n    return item as any;\n  }\n  const result: Record<string, string | null> = {};\n  for (let f = 0; f < fields.length; f += 1) {\n    result[fields[f]] = (item as any)[f];\n  }\n  return result;\n}\n\nfunction itemHasContent(item: Record<string, string | null>): boolean {\n  return Object.values(item).some((v) => (v !== null));\n}\n\nasync function unwatchAll(client: ERedis): Promise<void> {\n  await client.unwatch();\n}\n\nexport default class RedisCollection<T extends IDable> implements Collection<T> {\n  private readonly keyPrefixes: { [K in keyof T]?: string } = {};\n\n  private readonly keys: Key<T>[] = [];\n\n  private readonly uniqueKeys: Key<T>[] = [];\n\n  private readonly nonUniqueKeys: Key<T>[] = [];\n\n  public constructor(\n    private readonly pool: RedisConnectionPool,\n    private readonly prefix: string,\n    keys: DBKeys<T> = {},\n  ) {\n    Object.keys(keys).forEach((k) => {\n      const key = k as keyof DBKeys<T>;\n      const keyPrefix = `${prefix}-${key}`;\n      this.keyPrefixes[key] = keyPrefix;\n      const keyInfo = { key, prefix: keyPrefix };\n      this.keys.push(keyInfo);\n      if (keys[key]!.unique) {\n        this.uniqueKeys.push(keyInfo);\n      } else {\n        this.nonUniqueKeys.push(keyInfo);\n      }\n    });\n  }\n\n  public add(value: T): Promise<void> {\n    const serialised = serialiseRecord(value);\n    return this.pool.withConnection(async (client) => {\n      const added = await this.internalAdd(client, serialised, false);\n      if (!added) {\n        throw new Error('duplicate');\n      }\n    });\n  }\n\n  public update<K extends keyof T & string>(\n    keyName: K,\n    key: T[K],\n    value: Partial<T>,\n    { upsert = false } = {},\n  ): Promise<void> {\n    const { id, ...patchSerialised } = serialiseRecord(value);\n    const sKey = serialiseValue(key);\n    if (upsert && keyName !== 'id' && !id) {\n      throw new Error('Cannot upsert without ID');\n    }\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, keyName, sKey))[0];\n      if (sId) {\n        if (id && id !== sId) {\n          throw new Error('Cannot update id');\n        }\n      } else if (!upsert) {\n        return;\n      }\n      const rKey = this.makeKey(sId || id);\n      await client.watch(rKey);\n      const oldSerialised = sId && await this.rawByKeyKeepWatches(\n        client,\n        sId,\n        this.keys.map((k) => k.key).filter((k) => patchSerialised[k]),\n      );\n      if (!oldSerialised) {\n        if (upsert) {\n          await this.internalAdd(\n            client,\n            { id, [keyName]: sKey, ...patchSerialised },\n            true,\n          );\n        }\n        return;\n      }\n      Object.keys(patchSerialised).forEach((k) => {\n        if (oldSerialised[k] === patchSerialised[k]) {\n          delete patchSerialised[k];\n          delete oldSerialised[k];\n        }\n      });\n      const diff = Object.entries(patchSerialised).flat();\n      if (!diff.length) {\n        return; // nothing changed\n      }\n      const patchUniqueKeys = makeIndexKeys(this.uniqueKeys, patchSerialised);\n      const patchNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, patchSerialised);\n      const oldUniqueKeys = makeIndexKeys(this.uniqueKeys, oldSerialised);\n      const oldNonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, oldSerialised);\n      if (\n        oldUniqueKeys.length !== patchUniqueKeys.length ||\n        oldNonUniqueKeys.length !== patchNonUniqueKeys.length\n      ) {\n        throw new Error('unexpected key mismatch with old value');\n      }\n      const keyCount = 1 + (patchUniqueKeys.length + patchNonUniqueKeys.length) * 2;\n      const params = [\n        rKey,\n        ...patchUniqueKeys,\n        ...patchNonUniqueKeys,\n        ...oldUniqueKeys,\n        ...oldNonUniqueKeys,\n        patchUniqueKeys.length,\n        patchUniqueKeys.length + patchNonUniqueKeys.length,\n        sId,\n        ...diff,\n      ];\n      const updated = await client\n        .multi()\n        .update(keyCount, params)\n        .exec();\n      if (!updated) {\n        throw new Error('transient error');\n      }\n      if (!updated[0][1]) {\n        throw new Error('duplicate');\n      }\n    }, unwatchAll);\n  }\n\n  public get<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName: K,\n    key: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    const sKey = serialiseValue(key);\n    return this.pool.retryWithConnection(async (client) => {\n      const sId = (await this.getAndWatchBySerialisedKey(client, keyName, sKey))[0];\n      if (sId === undefined) {\n        return null;\n      }\n      const results = await this.getByKeysKeepWatches(client, [sId], fields);\n      return results[0] || null;\n    }, unwatchAll);\n  }\n\n  public getAll<\n    K extends keyof T & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    keyName?: K,\n    key?: T[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    return this.pool.retryWithConnection(async (client) => {\n      let sIds: string[];\n      if (keyName) {\n        const sKey = serialiseValue(key);\n        sIds = await this.getAndWatchBySerialisedKey(client, keyName, sKey);\n      } else {\n        sIds = await client.keys(this.makeKey('*'));\n        const cut = this.prefix.length + 1;\n        sIds = sIds.map((v) => v.substr(cut));\n      }\n      return this.getByKeysKeepWatches(client, sIds, fields);\n    }, unwatchAll);\n  }\n\n  public remove<K extends keyof T & string>(\n    key: K,\n    value: T[K],\n  ): Promise<number> {\n    const sKey = serialiseValue(value);\n    const indexedKeys = this.keys.map((k) => k.key);\n    indexedKeys.push('id');\n\n    return this.pool.retryWithConnection(async (client) => {\n      const sIds = await this.getAndWatchBySerialisedKey(client, key, sKey);\n      const items = (await Promise.all(\n        sIds.map((sId) => this.rawByKeyKeepWatches(client, sId, indexedKeys)),\n      )).filter(<T>(item?: T): item is T => (item !== undefined));\n\n      if (items.length === 0) {\n        return 0;\n      }\n\n      const pipeline = client.multi();\n      items.forEach((item) => {\n        const keys = makeIndexKeys(this.keys, item);\n        pipeline.remove(\n          1 + keys.length,\n          this.makeKey(item.id!),\n          ...keys,\n          item.id!,\n        );\n      });\n      await pipeline.exec();\n      return items.length;\n    }, unwatchAll);\n  }\n\n  private makeKey(serialisedId: string): string {\n    return `${this.prefix}:${serialisedId}`;\n  }\n\n  private async internalAdd(\n    client: ERedis,\n    { id, ...serialised }: Record<string, string>,\n    checkWatch: boolean,\n  ): Promise<boolean> {\n    const uniqueKeys = makeIndexKeys(this.uniqueKeys, serialised);\n    const nonUniqueKeys = makeIndexKeys(this.nonUniqueKeys, serialised);\n\n    const keyCount = 1 + uniqueKeys.length + nonUniqueKeys.length;\n    const params = [\n      this.makeKey(id),\n      ...uniqueKeys,\n      ...nonUniqueKeys,\n      uniqueKeys.length,\n      'id', // ID is always first in flattened key/value pairs\n      id,\n      ...Object.entries(serialised).flat(),\n    ];\n\n    if (!checkWatch) {\n      return Boolean(await client.add(keyCount, ...params));\n    }\n\n    const result = await client\n      .multi()\n      .add(keyCount, ...params)\n      .exec();\n    if (!result) {\n      throw new Error('transient error');\n    }\n    return Boolean(result[0][1]);\n  }\n\n  private async getByKeysKeepWatches<F extends readonly (keyof T & string)[]>(\n    client: ERedis,\n    serialisedIds: string[],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    const results = await multiExec(\n      client,\n      serialisedIds\n        .map((sId) => this.makeKey(sId))\n        .map((k) => (fields ? ['hmget', k, ...fields] : ['hgetall', k])),\n    );\n    if (!results) {\n      throw new Error('transient error');\n    }\n    return results\n      .map(([, item]: [unknown, any]) => parseItem(item, fields))\n      .filter(itemHasContent)\n      .map(deserialiseRecord) as T[];\n  }\n\n  private async rawByKeyKeepWatches(\n    client: ERedis,\n    serialisedId: string,\n    fields?: readonly (keyof T & string)[],\n  ): Promise<Record<string, string | null> | undefined> {\n    const key = this.makeKey(serialisedId);\n    let item;\n    if (fields) {\n      if (!fields.length) {\n        // just check existence\n        const exists = await client.exists(key);\n        return exists ? {} : undefined;\n      }\n      item = await client.hmget(key, ...fields);\n    } else {\n      item = await client.hgetall(key);\n    }\n    const parsed = parseItem(item, fields);\n    return itemHasContent(parsed) ? parsed : undefined;\n  }\n\n  private async getAndWatchBySerialisedKey(\n    client: ERedis,\n    keyName: keyof T,\n    serialisedValue: string,\n  ): Promise<string[]> {\n    if (keyName === 'id') {\n      return [serialisedValue];\n    }\n    const keyPrefix = this.keyPrefixes[keyName];\n    if (!keyPrefix) {\n      throw new Error(`Requested key ${keyName} not indexed`);\n    }\n    const keyAddress = `${keyPrefix}:${serialisedValue}`;\n    await client.watch(keyAddress);\n    return client.smembers(keyAddress);\n  }\n}\n","import { Redis } from 'ioredis';\nimport { minifyLuaScript, ExtendedRedis } from './helpers';\n\nexport interface ScriptExtensions {\n  add(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  update(keyCount: number, ...keysAndArgs: any[]): Promise<number>;\n  remove(keyCount: number, ...keysAndArgs: any[]): Promise<void>;\n}\n\nexport type ERedis = ExtendedRedis<ScriptExtensions>;\n\n// KEYS = [id, ...uniqueKeys, ...nonUniqueKeys]\nconst SCRIPT_ADD_ITEM = minifyLuaScript([\n  'if redis.call(\"exists\",KEYS[1])==1 then',\n  '  return 0',\n  'end',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 2))',\n  'for k=2,#KEYS do',\n  '  redis.call(\"sadd\",KEYS[k],ARGV[3])',\n  'end',\n  'return 1',\n], 'uniqueKeyCount');\n\n// KEYS = [id, ...patchUniqueKeys, ...patchNonUniqueKeys, ...oldUniqueKeys, ...oldNonUniqueKeys]\nconst SCRIPT_UPDATE_ITEM = minifyLuaScript([\n  'local tkc=tonumber($totalKeyCount)',\n  'for k=2,1+tonumber($uniqueKeyCount) do',\n  '  if redis.call(\"exists\",KEYS[k])==1 then',\n  '    return 0',\n  '  end',\n  'end',\n  'redis.call(\"hset\",KEYS[1],unpack(ARGV, 4))',\n  'for k=1,tkc do',\n  '  redis.call(\"smove\",KEYS[1+tkc+k],KEYS[1+k],$id)',\n  'end',\n  'return 1',\n], 'uniqueKeyCount', 'totalKeyCount', 'id');\n\n// KEYS = [id, ...keys]\nconst SCRIPT_REMOVE_ITEM = minifyLuaScript([\n  'redis.call(\"del\",KEYS[1])',\n  'for k=2,#KEYS do',\n  '  redis.call(\"srem\",KEYS[k],$id)',\n  'end',\n], 'id');\n\nexport default async function defineAllScripts(\n  client: Redis,\n): Promise<ERedis> {\n  await client.defineCommand('add', { lua: SCRIPT_ADD_ITEM });\n  await client.defineCommand('update', { lua: SCRIPT_UPDATE_ITEM });\n  await client.defineCommand('remove', { lua: SCRIPT_REMOVE_ITEM });\n\n  return client as ERedis;\n}\n","import IORedis from 'ioredis';\nimport defineAllScripts, { ERedis } from './scripts';\nimport retry from '../helpers/retry';\n\ntype RS = new(host?: string, options?: IORedis.RedisOptions) => IORedis.Redis;\n\nconst withRetry = retry((e) => (\n  typeof e === 'object' &&\n  e.message === 'transient error'\n));\n\nexport default class RedisConnectionPool {\n  private readonly connections: ERedis[] = [];\n\n  private inUse: number = 0;\n\n  private queue: ((client: ERedis) => void)[] = [];\n\n  public constructor(\n    private readonly RedisStatic: RS,\n    private readonly url: string,\n    private readonly options: IORedis.RedisOptions,\n    private readonly maxConnections: number,\n  ) {}\n\n  public async withConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    const c = await this.getConnection();\n    try {\n      return await fn(c);\n    } finally {\n      if (teardown) {\n        await teardown(c);\n      }\n      this.returnConnection(c);\n    }\n  }\n\n  public async retryWithConnection<T>(\n    fn: (c: ERedis) => Promise<T> | T,\n    teardown?: (c: ERedis) => Promise<void> | void,\n  ): Promise<T> {\n    return withRetry(() => this.withConnection(fn, teardown));\n  }\n\n  private async getConnection(): Promise<ERedis> {\n    const r = this.connections.pop();\n    if (r) {\n      this.inUse += 1;\n      return r;\n    }\n    if (this.inUse < this.maxConnections) {\n      this.inUse += 1;\n      const client = new this.RedisStatic(this.url, this.options);\n      await client.connect();\n      return defineAllScripts(client);\n    }\n    return new Promise((resolve): void => {\n      this.queue.push(resolve);\n    });\n  }\n\n  private returnConnection(c: ERedis): void {\n    const q = this.queue.shift();\n    if (q) {\n      q(c);\n    } else {\n      this.inUse -= 1;\n      this.connections.push(c);\n    }\n  }\n}\n","import RedisCollection from './RedisCollection';\nimport DB, { DBKeys } from '../interfaces/DB';\nimport IDable from '../interfaces/IDable';\nimport RedisConnectionPool from './RedisConnectionPool';\n\nexport default class RedisDb implements DB {\n  private constructor(\n    private readonly pool: RedisConnectionPool,\n  ) {}\n\n  public static async connect(url: string): Promise<RedisDb> {\n    const { default: RedisStatic } = await import('ioredis');\n    const connectionPoolSize = 5;\n    return new RedisDb(new RedisConnectionPool(\n      RedisStatic,\n      url,\n      { lazyConnect: true },\n      connectionPoolSize,\n    ));\n  }\n\n  public getCollection<T extends IDable>(\n    name: string,\n    keys?: DBKeys<T>,\n  ): RedisCollection<T> {\n    return new RedisCollection(this.pool, name, keys);\n  }\n\n  public getConnectionPool(): RedisConnectionPool {\n    return this.pool;\n  }\n}\n","import IDable from '../interfaces/IDable';\nimport Collection, { UpdateOptions } from '../interfaces/Collection';\n\nexport type Wrapped<T extends IDable, WF extends keyof T, W> = {\n  [K in keyof T]: K extends 'id' ? T[K] : K extends WF ? W : T[K];\n};\n\nexport interface Wrapper<T extends IDable, K extends keyof T, W, E> {\n  wrap: (\n    key: K,\n    value: T[K],\n    processed: E,\n  ) => Promise<W> | W;\n\n  unwrap: (\n    key: K,\n    value: W,\n    processed: E,\n  ) => Promise<T[K]> | T[K];\n\n  preWrap?: (\n    record: Readonly<Partial<T>>,\n  ) => Promise<E> | E;\n\n  preUnwrap?: (\n    record: Readonly<Partial<Wrapped<T, K, W>>>,\n  ) => Promise<E> | E;\n\n  preRemove?: (\n    record: Readonly<Pick<Wrapped<T, K, W>, 'id'>>,\n  ) => Promise<void> | void;\n}\n\nfunction hasAnyField(value: object, fields: readonly string[]): boolean {\n  return fields\n    .some((field) => Object.prototype.hasOwnProperty.call(value, field));\n}\n\nexport default class WrappedCollection<\n  T extends IDable,\n  WF extends readonly (keyof Omit<T, 'id'> & string)[],\n  W,\n  E,\n  Inner extends Wrapped<T, WF[-1], W> = Wrapped<T, WF[-1], W>\n> implements Collection<T> {\n  public constructor(\n    private readonly baseCollection: Collection<Inner>,\n    private readonly fields: WF,\n    private readonly wrapper: Wrapper<T, WF[-1], W, E>,\n  ) {}\n\n  public async add(entry: T): Promise<void> {\n    return this.baseCollection.add(await this.wrapAll(entry));\n  }\n\n  public async get<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key: K,\n    value: T[K] & Inner[K],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>> | null> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.get(key, value, fields!);\n    return raw ? this.unwrapAll(raw, { [key]: value }) : null;\n  }\n\n  public async getAll<\n    K extends keyof T & keyof Inner & string,\n    F extends readonly (keyof T & string)[]\n  >(\n    key?: K,\n    value?: T[K] & Inner[NonNullable<K>],\n    fields?: F,\n  ): Promise<Readonly<Pick<T, F[-1]>>[]> {\n    if (key !== undefined && this.fields.includes(key as any)) {\n      throw new Error('Cannot get by encrypted value');\n    }\n    const raw = await this.baseCollection.getAll(key!, value!, fields!);\n    const extra = (key !== undefined) ? { [key]: value } : undefined;\n    return Promise.all(raw.map((v) => this.unwrapAll(v, extra)));\n  }\n\n  public async update<K extends keyof T & keyof Inner & string>(\n    key: K,\n    value: T[K] & Inner[K],\n    update: Partial<T>,\n    options?: UpdateOptions,\n  ): Promise<void> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot update by encrypted value');\n    }\n    const converted = await this.wrapAll(update, { [key]: value });\n    return this.baseCollection.update(key, value, converted, options);\n  }\n\n  public async remove<K extends keyof T & string>(\n    key: K,\n    value: T[K] & Inner[K],\n  ): Promise<number> {\n    if (this.fields.includes(key as any)) {\n      throw new Error('Cannot remove by encrypted value');\n    }\n    if (!this.wrapper.preRemove) {\n      return this.baseCollection.remove(key, value);\n    }\n\n    const items = await this.baseCollection.getAll(key, value, ['id']);\n    await Promise.all(items.map(async (item) => {\n      await this.wrapper.preRemove!(item);\n      await this.baseCollection.remove('id', item.id);\n    }));\n    return items.length;\n  }\n\n  private async wrapAll(\n    v: Readonly<T>,\n    extra?: object,\n  ): Promise<Inner>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>>;\n\n  private async wrapAll(\n    v: Readonly<Partial<T>>,\n    extra?: object,\n  ): Promise<Partial<Inner>> {\n    let processed: E;\n    if (this.wrapper.preWrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? Object.assign({}, extra, v) : v;\n      processed = await this.wrapper.preWrap(allFields);\n    }\n    const converted = Object.assign({}, v) as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.wrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n\n  private async unwrapAll(\n    v: Readonly<Inner>,\n    extra?: object,\n  ): Promise<T>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>>;\n\n  private async unwrapAll<K extends keyof T>(\n    v: Readonly<Pick<Inner, K>>,\n    extra?: object,\n  ): Promise<Pick<T, K>> {\n    let processed: E;\n    if (this.wrapper.preUnwrap && hasAnyField(v, this.fields)) {\n      const allFields = extra ? Object.assign({}, extra, v) : v;\n      processed = await this.wrapper.preUnwrap(allFields as any);\n    }\n    const converted = Object.assign({}, v) as any;\n    await Promise.all(this.fields.map(async (k) => {\n      if (Object.prototype.hasOwnProperty.call(v, k)) {\n        converted[k] = await this.wrapper.unwrap(k, (v as any)[k], processed);\n      }\n    }));\n    return converted;\n  }\n}\n","export default class LruCache<K, V> {\n  private readonly storage = new Map<K, V>();\n\n  public constructor(\n    private readonly capacity: number,\n  ) {}\n\n  public set(key: K, value: V): void {\n    this.storage.delete(key);\n    this.storage.set(key, value);\n    this.flush();\n  }\n\n  public get(key: K): V | undefined {\n    const value = this.storage.get(key);\n    if (this.storage.delete(key)) {\n      this.storage.set(key, value!);\n    }\n    return value;\n  }\n\n  public remove(key: K): void {\n    this.storage.delete(key);\n  }\n\n  private flush(): void {\n    while (this.storage.size > this.capacity) {\n      this.storage.delete(this.storage.keys().next().value);\n    }\n  }\n}\n","import crypto, { KeyObject } from 'crypto';\nimport Encryption from './Encryption';\n\nconst ALG = 'aes-256-cbc';\nconst ALG_BUF = Buffer.from(`${ALG}:`, 'utf8');\nconst IV_LEN = 16;\n\nconst nodeEncryptionSync: Encryption<Buffer, KeyObject, Buffer> = {\n  encrypt: (key: KeyObject, v: string): Buffer => {\n    const iv = crypto.randomBytes(IV_LEN);\n    const cipher = crypto.createCipheriv(ALG, key, iv);\n    const part = cipher.update(v, 'utf8');\n    const final = cipher.final();\n    return Buffer.concat([ALG_BUF, iv, part, final]);\n  },\n\n  decrypt: (key: KeyObject, v: Buffer): string => {\n    if (!v.slice(0, ALG_BUF.length).equals(ALG_BUF)) {\n      throw new Error('Unknown encryption algorithm');\n    }\n\n    const iv = v.slice(ALG_BUF.length, ALG_BUF.length + IV_LEN);\n    const encrypted = v.slice(ALG_BUF.length + IV_LEN);\n\n    const decipher = crypto.createDecipheriv(ALG, key as any, iv);\n    let decrypted = decipher.update(encrypted, undefined, 'utf8');\n    decrypted += decipher.final('utf8');\n\n    return decrypted;\n  },\n\n  generateKey: (): KeyObject => crypto\n    .createSecretKey(crypto.randomBytes(32)),\n\n  serialiseKey: (key: KeyObject): Buffer => key.export(),\n\n  deserialiseKey: (data: Buffer): KeyObject => crypto.createSecretKey(data),\n};\n\nexport default nodeEncryptionSync;\n","import IDable, { IDableBy, IDType } from '../interfaces/IDable';\nimport Collection from '../interfaces/Collection';\nimport LruCache from '../helpers/LruCache';\nimport { serialiseValue, deserialiseValue } from '../helpers/serialiser';\nimport WrappedCollection, { Wrapped } from './WrappedCollection';\nimport Encryption from './encryption/Encryption';\nimport nodeEncryptionSync from './encryption/nodeEncryptionSync';\n\nexport interface KeyRecord<ID extends IDType, KeyT> {\n  id: ID;\n  key: KeyT;\n}\n\ntype EncryptableKeys<T> = readonly (keyof Omit<T, 'id'> & string)[];\n\ntype Encrypter<EncT, ID extends IDType> = <T extends IDableBy<ID>>(\n) => <F extends EncryptableKeys<T>>(\n  fields: F,\n  baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n) => Collection<T>;\n\n// makeEncrypter provides optional 2-tier function call due to\n// https://github.com/Microsoft/TypeScript/issues/26242\n\nfunction makeEncrypter<EncT, ID extends IDType>(\n  wrapper: <T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => Collection<T>,\n): Encrypter<EncT, ID> {\n  return (fields?: any, baseCollection?: Collection<any>): any => {\n    if (fields && baseCollection) {\n      // non-typescript API (remove need for extra ())\n      return wrapper(fields, baseCollection) as any;\n    }\n    return wrapper;\n  };\n}\n\nfunction encryptByKey(sKey: Buffer): Encrypter<Buffer, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, IDType>;\n\nfunction encryptByKey<EncT, KeyT, SerialisedKeyT>(\n  sKey: SerialisedKeyT,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, IDType> {\n  const key = cr.deserialiseKey(sKey);\n\n  return makeEncrypter(<T extends IDable, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, never>(baseCollection, fields, {\n    wrap: (k, v): Promise<EncT> | EncT => cr.encrypt(key, serialiseValue(v)),\n    unwrap: async (k, v): Promise<any> => deserialiseValue(await cr.decrypt(key, v)),\n  }));\n}\n\nfunction encryptByRecord<ID extends IDType>(\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecord<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  keyCollection: Collection<KeyRecord<ID, SerialisedKeyT>>,\n  cacheSize: number = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const cache = new LruCache<ID, KeyT>(cacheSize);\n\n  const loadKey = async (\n    generateIfNeeded: boolean,\n    record: { id?: ID },\n  ): Promise<KeyT> => {\n    const { id } = record;\n\n    if (id === undefined) {\n      throw new Error('Must provide ID for encryption');\n    }\n\n    const cached = cache.get(id);\n    if (cached) {\n      return cached;\n    }\n    let key: KeyT;\n    const item = await keyCollection.get('id', id, ['key']);\n    if (item) {\n      key = cr.deserialiseKey(item.key);\n    } else {\n      if (!generateIfNeeded) {\n        throw new Error('No encryption key found for record');\n      }\n      key = await cr.generateKey();\n      await keyCollection.add({ id, key: cr.serialiseKey(key) });\n    }\n    cache.set(id, key);\n    return key;\n  };\n\n  const removeKey = async ({ id }: { id: ID }): Promise<void> => {\n    await keyCollection.remove('id', id);\n    cache.remove(id);\n  };\n\n  return makeEncrypter(<T extends IDableBy<ID>, F extends EncryptableKeys<T>>(\n    fields: F,\n    baseCollection: Collection<Wrapped<T, F[-1], EncT>>,\n  ) => new WrappedCollection<T, F, EncT, KeyT>(baseCollection, fields, {\n    wrap: (k, v, key): Promise<EncT> | EncT => cr.encrypt(key, JSON.stringify(v)),\n    unwrap: async (k, v, key): Promise<any> => JSON.parse(await cr.decrypt(key, v)),\n    preWrap: loadKey.bind(null, true),\n    preUnwrap: loadKey.bind(null, false),\n    preRemove: removeKey,\n  }));\n}\n\nfunction encryptByRecordWithMasterKey<ID extends IDType>(\n  sMasterKey: Buffer,\n  keyCollection: Collection<KeyRecord<ID, Buffer>>,\n  cacheSize?: number,\n): Encrypter<Buffer, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT>,\n): Encrypter<EncT, ID>;\n\nfunction encryptByRecordWithMasterKey<ID extends IDType, EncT, KeyT, SerialisedKeyT>(\n  sMasterKey: SerialisedKeyT,\n  keyCollection: Collection<KeyRecord<ID, EncT>>,\n  cacheSize: number = 0,\n  cr: Encryption<EncT, KeyT, SerialisedKeyT> = nodeEncryptionSync as any,\n): Encrypter<EncT, ID> {\n  const keyEnc = encryptByKey(sMasterKey, cr);\n  const encKeyCollection = keyEnc<KeyRecord<ID, SerialisedKeyT>>()(\n    ['key'],\n    keyCollection,\n  );\n  return encryptByRecord(encKeyCollection, cacheSize, cr);\n}\n\nexport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\n","import CollectionStorage from './CollectionStorage';\nimport WrappedCollection, { Wrapped } from './wrappers/WrappedCollection';\nimport Encryption from './wrappers/encryption/Encryption';\nimport {\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n} from './wrappers/encrypted';\nimport DB from './interfaces/DB';\nimport Collection from './interfaces/Collection';\nimport IDable from './interfaces/IDable';\n\nexport type DB = DB;\nexport type Collection<T extends IDable> = Collection<T>;\nexport type Wrapped<T extends IDable, WF extends keyof T, W> =\n  Wrapped<T, WF, W>;\nexport type Encrypted<T extends IDable, WF extends keyof T> =\n  Wrapped<T, WF, Buffer>;\nexport type Encryption<EncT, KeyT, SerialisedKeyT> =\n  Encryption<EncT, KeyT, SerialisedKeyT>;\n\nexport { default as MemoryDb } from './memory/MemoryDb';\nexport { default as MongoDb } from './mongo/MongoDb';\nexport { default as RedisDb } from './redis/RedisDb';\nexport { default as LruCache } from './helpers/LruCache';\nexport {\n  WrappedCollection,\n  encryptByKey,\n  encryptByRecord,\n  encryptByRecordWithMasterKey,\n};\nexport {\n  default as nodeEncryptionSync,\n} from './wrappers/encryption/nodeEncryptionSync';\nexport default CollectionStorage;\n","import MemoryDb from './memory/MemoryDb';\nimport MongoDb from './mongo/MongoDb';\nimport RedisDb from './redis/RedisDb';\nimport DB from './interfaces/DB';\n\nexport default class CollectionStorage {\n  public static async connect(url: string): Promise<DB> {\n    let dbClass;\n    if (url.startsWith('memory')) {\n      dbClass = MemoryDb;\n    } else if (url.startsWith('mongodb')) {\n      dbClass = MongoDb;\n    } else if (url.startsWith('redis')) {\n      dbClass = RedisDb;\n    } else {\n      throw new Error(`Unsupported database connection string: ${url}`);\n    }\n\n    try {\n      return await dbClass.connect(url);\n    } catch (e) {\n      throw new Error(`Failed to connect to database \"${url}\": ${e.message}`);\n    }\n  }\n}\n"],"sourceRoot":""}