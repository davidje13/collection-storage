!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("websocket-express",[],t):"object"==typeof exports?exports["websocket-express"]=t():e["websocket-express"]=t()}(global,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){e.exports=require("crypto")},function(e,t){e.exports=require("mongodb")},function(e,t){e.exports=require("url")},function(e,t,n){e.exports=n(8)},function(e,t){e.exports=require("ioredis")},function(e,t){},function(e,t){},function(e,t){},function(e,t,n){"use strict";n.r(t);var r=n(2);function i(e){return e instanceof Buffer?`B${e.toString("base64")}`:`J${JSON.stringify(e)}`}function s(e){const t=e[0],n=e.substr(1);if("B"===t)return Buffer.from(n,"base64");if("J"===t)return JSON.parse(n);throw new Error(`Unknown data type ${t}`)}function a(e){const t={};return Object.keys(e).forEach(n=>{t[n]=i(e[n])}),t}function o(e){const t={};return Object.keys(e).forEach(n=>{const r=e[n];r&&(t[n]=s(r))}),t}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e){return e?new Promise(t=>setTimeout(t,e)):null}class u{constructor(e={},t=0){this.simulatedLatency=t,c(this,"data",void 0),c(this,"keys",{}),this.data=new Map,Object.keys(e).forEach(t=>{const n=t;this.keys[n]={map:new Map,options:e[n]}})}async add(e){await l(this.simulatedLatency);const t=a(e);this.internalCheckDuplicates(t,!0),this.data.set(t.id,t),this.internalPopulateIndices(t)}async update(e,t,n,{upsert:r=!1}={}){if(r&&"id"!==e&&void 0===n.id)throw new Error("Cannot upsert without ID");await l(this.simulatedLatency);const i=this.internalGetSerialisedIds(e,t)[0];if(void 0===i)return void(r&&await this.add(Object.assign({[e]:t},n)));const s=this.data.get(i),c=o(s),u=Object.assign({},c,n);if(u.id!==c.id)throw new Error("Cannot update id");const d=a(u);this.internalRemoveIndices(s);try{this.internalCheckDuplicates(d,!1)}catch(e){throw this.internalPopulateIndices(s),e}this.data.set(d.id,d),this.internalPopulateIndices(d)}async get(e,t,n){const r=await this.getAll(e,t,n);return r.length?r[0]:null}async getAll(e,t,n){let r;return await l(this.simulatedLatency),(r=e?this.internalGetSerialisedIds(e,t):[...this.data.keys()]).map(e=>(function(e,t){if(!t)return e;const n={};return t.forEach(t=>{n[t]=e[t]}),n})(o(this.data.get(e)),n))}async remove(e,t){await l(this.simulatedLatency);const n=this.internalGetSerialisedIds(e,t);return n.forEach(e=>{const t=this.data.get(e);this.internalRemoveIndices(t),this.data.delete(e)}),n.length}internalGetSerialisedIds(e,t){const n=i(t);if("id"===e)return this.data.has(n)?[n]:[];const r=this.keys[e];if(!r)throw new Error(`Requested key ${e} not indexed`);const s=r.map.get(n);return s?[...s]:[]}internalCheckDuplicates(e,t){if(t&&this.data.has(e.id))throw new Error("duplicate");Object.entries(this.keys).forEach(([t,n])=>{const{map:r,options:i}=n;if(i.unique&&r.has(e[t]))throw new Error("duplicate")})}internalPopulateIndices(e){Object.entries(this.keys).forEach(([t,n])=>{const{map:r}=n,i=e[t];let s=r.get(i);s||(s=new Set,r.set(i,s)),s.add(e.id)})}internalRemoveIndices(e){Object.entries(this.keys).forEach(([t,n])=>{const{map:r}=n,i=e[t],s=r.get(i);s.delete(e.id),s.size||r.delete(i)})}}function d(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const h=function(e,t){const n=global[e];return n||(global[e]=t,t)}("collectionStorageInMemory",new Map);class f{constructor({simulatedLatency:e=0}={}){d(this,"simulatedLatency",void 0),d(this,"mapTables",new Map),this.simulatedLatency=e}static connect(e){const t=new r.URL(e),n=t.hostname;if(n&&h.has(n))return h.get(n);const i=t.searchParams,s=Number(i.get("simulatedLatency")),a=new f({simulatedLatency:s});return n&&h.set(n,a),a}getCollection(e,t){return this.mapTables.has(e)||this.mapTables.set(e,new u(t,this.simulatedLatency)),this.mapTables.get(e)}}var y=n(1);function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function w(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function m(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==typeof t?t:String(t)}const O="_id",v="id";function k(e){let t;if(void 0===e[v])t=Object.assign({},e);else{const{[v]:n}=e,r=g(e,[v].map(m));t=w({[O]:n},r)}return Object.keys(t).forEach(e=>{const n=t[e];if(n instanceof Buffer&&(t[e]=new y.Binary(n)),"object"==typeof n&&n._bsontype)throw new Error("Must use Buffer to provide binary data")}),t}function j(e){if(!e)return null;let t;if(void 0===e[O])t=Object.assign({},e);else{const{[O]:n}=e,r=g(e,[O].map(m));t=w({[v]:n},r)}return Object.keys(t).forEach(e=>{const n=t[e];"object"==typeof n&&"Binary"===n._bsontype&&(t[e]=n.buffer)}),t}function E(e){const t={};return e&&(t[O]=!1,e.forEach(e=>{t[function(e){return e===v?O:e}(e)]=!0})),t}class K{constructor(e,t={}){this.collection=e,Object.keys(t).forEach(n=>{const r=n,i=t[r];i&&i.unique?e.createIndex({[r]:1},{unique:!0}):e.createIndex({[r]:"hashed"})})}async add(e){await this.collection.insertOne(k(e))}async update(e,t,n,{upsert:r=!1}={}){if(r&&"id"!==e&&void 0===n.id)throw new Error("Cannot upsert without ID");await this.collection.updateOne(k({[e]:t}),{$set:k(n)},{upsert:r})}async get(e,t,n){return j(await this.collection.findOne(k({[e]:t}),{projection:E(n)}))}async getAll(e,t,n){const r=[];let i;const s=E(n);return i=e?this.collection.find(k({[e]:t}),{projection:s}):this.collection.find({},{projection:s}),await i.forEach(e=>r.push(j(e))),r}async remove(e,t){return(await this.collection.deleteMany(k({[e]:t}))).deletedCount||0}}class P{constructor(e){this.db=e}static async connect(e){const{MongoClient:t}=await Promise.resolve().then(()=>n(1)),r=await t.connect(e,{useNewUrlParser:!0,useUnifiedTopology:!0});return new P(r.db())}getCollection(e,t){const n=this.db.collection(e);return new K(n,t)}}function S(e,...t){let n=e.map(e=>e.trim()).join(" ");return t.forEach((e,t)=>{n=n.replace(new RegExp(`\\$${e}\\b`,"g"),`ARGV[${t+1}]`)}),n}const x=S(['if redis.call("exists",KEYS[1])==1 then',"  return 0","end","for k=2,1+tonumber($uniqueKeyCount) do",'  if redis.call("exists",KEYS[k])==1 then',"    return 0","  end","end",'redis.call("hset",KEYS[1],unpack(ARGV, 2))',"for k=2,#KEYS do",'  redis.call("sadd",KEYS[k],ARGV[3])',"end","return 1"],"uniqueKeyCount"),C=S(["local tkc=tonumber($totalKeyCount)","for k=2,1+tonumber($uniqueKeyCount) do",'  if redis.call("exists",KEYS[k])==1 then',"    return 0","  end","end",'redis.call("hset",KEYS[1],unpack(ARGV, 4))',"for k=1,tkc do",'  redis.call("smove",KEYS[1+tkc+k],KEYS[1+k],$id)',"end","return 1"],"uniqueKeyCount","totalKeyCount","id"),B=S(['redis.call("del",KEYS[1])',"for k=2,#KEYS do",'  redis.call("srem",KEYS[k],$id)',"end"],"id");function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function q(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function I(e,t){return e.filter(({key:e})=>t[e]).map(({key:e,prefix:n})=>`${n}:${t[e]}`)}function D(e,t){if(!t)return e;const n={};for(let r=0;r<t.length;r+=1)n[t[r]]=e[r];return n}function W(e){return Object.values(e).some(e=>null!==e)}class M{constructor(e,t,n={}){this.prefix=t,A(this,"client",void 0),A(this,"keyPrefixes",{}),A(this,"keys",[]),A(this,"uniqueKeys",[]),A(this,"nonUniqueKeys",[]),Object.keys(n).forEach(e=>{const r=e,i=`${t}-${r}`;this.keyPrefixes[r]=i;const s={key:r,prefix:i};this.keys.push(s),n[r].unique?this.uniqueKeys.push(s):this.nonUniqueKeys.push(s)}),this.client=function(e){return e.defineCommand("add",{lua:x}),e.defineCommand("update",{lua:C}),e.defineCommand("remove",{lua:B}),e}(e)}async add(e){if(!await this.internalAdd(a(e),!1))throw new Error("duplicate")}async update(e,t,n,{upsert:r=!1}={}){const s=a(n),{id:o}=s,c=q(s,["id"]),l=i(t);if(r&&"id"!==e&&!o)throw new Error("Cannot upsert without ID");try{const t=(await this.getAndWatchBySerialisedKey(e,l))[0];if(t){if(o&&o!==t)throw new Error("Cannot update id")}else if(!r)return;const n=this.makeKey(t||o);await this.client.watch(n);const i=t&&await this.rawByKeyKeepWatches(t,this.keys.map(e=>e.key).filter(e=>c[e]));if(!i)return void(r&&await this.internalAdd(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(n,!0).forEach((function(t){A(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({id:o,[e]:l},c),!0));Object.keys(c).forEach(e=>{i[e]===c[e]&&(delete c[e],delete i[e])});const s=Object.entries(c).flat();if(!s.length)return;const a=I(this.uniqueKeys,c),u=I(this.nonUniqueKeys,c),d=I(this.uniqueKeys,i),h=I(this.nonUniqueKeys,i);if(d.length!==a.length||h.length!==u.length)throw new Error("unexpected key mismatch with old value");const f=1+2*(a.length+u.length),y=[n,...a,...u,...d,...h,a.length,a.length+u.length,t,...s],p=await this.client.multi().update(f,y).exec();if(!p)throw new Error("rollback");if(!p[0][1])throw new Error("duplicate")}finally{await this.client.unwatch()}}async get(e,t,n){const r=i(t);try{const t=(await this.getAndWatchBySerialisedKey(e,r))[0];return void 0===t?null:(await this.getByKeysKeepWatches([t],n))[0]||null}finally{await this.client.unwatch()}}async getAll(e,t,n){try{let r;if(e){const n=i(t);r=await this.getAndWatchBySerialisedKey(e,n)}else{r=await this.client.keys(this.makeKey("*"));const e=this.prefix.length+1;r=r.map(t=>t.substr(e))}return await this.getByKeysKeepWatches(r,n)}finally{await this.client.unwatch()}}async remove(e,t){const n=i(t),r=this.keys.map(e=>e.key);r.push("id");try{const t=await this.getAndWatchBySerialisedKey(e,n),i=(await Promise.all(t.map(e=>this.rawByKeyKeepWatches(e,r)))).filter(e=>void 0!==e);if(0===i.length)return 0;const s=this.client.multi();return i.forEach(e=>{const t=I(this.keys,e);s.remove(1+t.length,this.makeKey(e.id),...t,e.id)}),await s.exec(),i.length}finally{await this.client.unwatch()}}makeKey(e){return`${this.prefix}:${e}`}async internalAdd(e,t){let{id:n}=e,r=q(e,["id"]);const i=I(this.uniqueKeys,r),s=I(this.nonUniqueKeys,r),a=1+i.length+s.length,o=[this.makeKey(n),...i,...s,i.length,"id",n,...Object.entries(r).flat()];if(!t)return Boolean(await this.client.add(a,...o));const c=await this.client.multi().add(a,...o).exec();if(!c)throw new Error("rollback");return Boolean(c[0][1])}async getByKeysKeepWatches(e,t){const n=await async function(e,t){return t.length?e.multi(t).exec():[]}(this.client,e.map(e=>this.makeKey(e)).map(e=>t?["hmget",e,...t]:["hgetall",e]));if(!n)throw new Error("rollback");return n.map(([,e])=>D(e,t)).filter(W).map(o)}async rawByKeyKeepWatches(e,t){const n=this.makeKey(e);let r;if(t){if(!t.length){return await this.client.exists(n)?{}:void 0}r=await this.client.hmget(n,...t)}else r=await this.client.hgetall(n);const i=D(r,t);return W(i)?i:void 0}async getAndWatchBySerialisedKey(e,t){if("id"===e)return[t];const n=this.keyPrefixes[e];if(!n)throw new Error(`Requested key ${e} not indexed`);const r=`${n}:${t}`;return await this.client.watch(r),this.client.smembers(r)}}class R{constructor(e){this.client=e}static async connect(e){const{default:t}=await Promise.resolve().then(()=>n(4)),r=new t(e,{lazyConnect:!0});return await r.connect(),new R(r)}getCollection(e,t){return new M(this.client,e,t)}}function U(e,t){return t.some(t=>Object.prototype.hasOwnProperty.call(e,t))}class L{constructor(e,t,n){this.baseCollection=e,this.fields=t,this.wrapper=n}async add(e){return this.baseCollection.add(await this.wrapAll(e))}async get(e,t,n){if(this.fields.includes(e))throw new Error("Cannot get by encrypted value");const r=await this.baseCollection.get(e,t,n);return r?this.unwrapAll(r,{[e]:t}):null}async getAll(e,t,n){if(void 0!==e&&this.fields.includes(e))throw new Error("Cannot get by encrypted value");const r=await this.baseCollection.getAll(e,t,n),i=void 0!==e?{[e]:t}:void 0;return Promise.all(r.map(e=>this.unwrapAll(e,i)))}async update(e,t,n,r){if(this.fields.includes(e))throw new Error("Cannot update by encrypted value");const i=await this.wrapAll(n,{[e]:t});return this.baseCollection.update(e,t,i,r)}async remove(e,t){if(this.fields.includes(e))throw new Error("Cannot remove by encrypted value");if(!this.wrapper.preRemove)return this.baseCollection.remove(e,t);const n=await this.baseCollection.getAll(e,t,["id"]);return await Promise.all(n.map(async e=>{await this.wrapper.preRemove(e),await this.baseCollection.remove("id",e.id)})),n.length}async wrapAll(e,t){let n;if(this.wrapper.preWrap&&U(e,this.fields)){const r=t?Object.assign({},t,e):e;n=await this.wrapper.preWrap(r)}const r=Object.assign({},e);return await Promise.all(this.fields.map(async t=>{Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=await this.wrapper.wrap(t,e[t],n))})),r}async unwrapAll(e,t){let n;if(this.wrapper.preUnwrap&&U(e,this.fields)){const r=t?Object.assign({},t,e):e;n=await this.wrapper.preUnwrap(r)}const r=Object.assign({},e);return await Promise.all(this.fields.map(async t=>{Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=await this.wrapper.unwrap(t,e[t],n))})),r}}n(5);class Y{constructor(e){var t,n,r;this.capacity=e,t=this,n="storage",r=new Map,n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r}set(e,t){this.storage.delete(e),this.storage.set(e,t),this.flush()}get(e){const t=this.storage.get(e);return this.storage.delete(e)&&this.storage.set(e,t),t}remove(e){this.storage.delete(e)}flush(){for(;this.storage.size>this.capacity;)this.storage.delete(this.storage.keys().next().value)}}var T=n(0),_=n.n(T);const G="aes-256-cbc",N=Buffer.from(`${G}:`,"utf8");var J={encrypt:(e,t)=>{const n=_.a.randomBytes(16),r=_.a.createCipheriv(G,e,n),i=r.update(t,"utf8"),s=r.final();return Buffer.concat([N,n,i,s])},decrypt:(e,t)=>{if(!t.slice(0,N.length).equals(N))throw new Error("Unknown encryption algorithm");const n=t.slice(N.length,N.length+16),r=t.slice(N.length+16),i=_.a.createDecipheriv(G,e,n);let s=i.update(r,void 0,"utf8");return s+=i.final("utf8")},generateKey:()=>_.a.createSecretKey(_.a.randomBytes(32)),serialiseKey:e=>e.export(),deserialiseKey:e=>_.a.createSecretKey(e)};function V(e){return(t,n)=>t&&n?e(t,n):e}function z(e,t=J){const n=t.deserialiseKey(e);return V((e,r)=>new L(r,e,{wrap:(e,r)=>t.encrypt(n,i(r)),unwrap:async(e,r)=>s(await t.decrypt(n,r))}))}function F(e,t=0,n=J){const r=new Y(t),i=async(t,i)=>{const{id:s}=i;if(void 0===s)throw new Error("Must provide ID for encryption");const a=r.get(s);if(a)return a;let o;const c=await e.get("id",s,["key"]);if(c)o=n.deserialiseKey(c.key);else{if(!t)throw new Error("No encryption key found for record");o=await n.generateKey(),await e.add({id:s,key:n.serialiseKey(o)})}return r.set(s,o),o},s=async({id:t})=>{await e.remove("id",t),r.remove(t)};return V((e,t)=>new L(t,e,{wrap:(e,t,r)=>n.encrypt(r,JSON.stringify(t)),unwrap:async(e,t,r)=>JSON.parse(await n.decrypt(r,t)),preWrap:i.bind(null,!0),preUnwrap:i.bind(null,!1),preRemove:s}))}function H(e,t,n=0,r=J){return F(z(e,r)()(["key"],t),n,r)}n(6),n(7);n.d(t,"MemoryDb",(function(){return f})),n.d(t,"MongoDb",(function(){return P})),n.d(t,"RedisDb",(function(){return R})),n.d(t,"LruCache",(function(){return Y})),n.d(t,"WrappedCollection",(function(){return L})),n.d(t,"encryptByKey",(function(){return z})),n.d(t,"encryptByRecord",(function(){return F})),n.d(t,"encryptByRecordWithMasterKey",(function(){return H})),n.d(t,"nodeEncryptionSync",(function(){return J}));t.default=class{static async connect(e){let t;if(e.startsWith("memory"))t=f;else if(e.startsWith("mongodb"))t=P;else{if(!e.startsWith("redis"))throw new Error(`Unsupported database connection string: ${e}`);t=R}try{return await t.connect(e)}catch(t){throw new Error(`Failed to connect to database "${e}": ${t.message}`)}}}}])}));
//# sourceMappingURL=index.js.map